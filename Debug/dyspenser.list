
dyspenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009180  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c3c  08009320  08009320  00019320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af5c  0800af5c  000201c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800af5c  0800af5c  0001af5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af64  0800af64  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af64  0800af64  0001af64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af68  0800af68  0001af68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  0800af6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050e0  200001c4  0800b130  000201c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200052a4  0800b130  000252a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd19  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041ef  00000000  00000000  0003df0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  00042100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001618  00000000  00000000  000438e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019883  00000000  00000000  00044f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bbd0  00000000  00000000  0005e783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b0f9  00000000  00000000  0007a353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011544c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000660c  00000000  00000000  0011549c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c4 	.word	0x200001c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009308 	.word	0x08009308

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001c8 	.word	0x200001c8
 80001dc:	08009308 	.word	0x08009308

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <DWT_Delay_Init+0x58>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	4a13      	ldr	r2, [pc, #76]	; (800053c <DWT_Delay_Init+0x58>)
 80004ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004f2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <DWT_Delay_Init+0x58>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	4a10      	ldr	r2, [pc, #64]	; (800053c <DWT_Delay_Init+0x58>)
 80004fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004fe:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <DWT_Delay_Init+0x5c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <DWT_Delay_Init+0x5c>)
 8000506:	f023 0301 	bic.w	r3, r3, #1
 800050a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <DWT_Delay_Init+0x5c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <DWT_Delay_Init+0x5c>)
 8000512:	f043 0301 	orr.w	r3, r3, #1
 8000516:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <DWT_Delay_Init+0x5c>)
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800051e:	bf00      	nop
    __ASM volatile ("NOP");
 8000520:	bf00      	nop
    __ASM volatile ("NOP");
 8000522:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <DWT_Delay_Init+0x5c>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800052c:	2300      	movs	r3, #0
 800052e:	e000      	b.n	8000532 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000530:	2301      	movs	r3, #1
    }
}
 8000532:	4618      	mov	r0, r3
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	e000edf0 	.word	0xe000edf0
 8000540:	e0001000 	.word	0xe0001000

08000544 <ResetPosition>:
{
	__HAL_TIM_SET_COUNTER(&htim3, value * 4); //TODO: Remove this after test;
}

void ResetPosition(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <ResetPosition+0x18>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2200      	movs	r2, #0
 800054e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	200002dc 	.word	0x200002dc

08000560 <SetAnimationTime>:

int flagDirectionPut = 0;
int animation = 0;
int flagDirectionSearch = 0;
int fluid = 40;
void SetAnimationTime(void){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim11);
 8000564:	481f      	ldr	r0, [pc, #124]	; (80005e4 <SetAnimationTime+0x84>)
 8000566:	f005 fa8f 	bl	8005a88 <HAL_TIM_Base_Stop_IT>

	if (animation == 0)
 800056a:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SetAnimationTime+0x88>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d121      	bne.n	80005b6 <SetAnimationTime+0x56>
	{
		if (flagDirectionPut == 0)
 8000572:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <SetAnimationTime+0x8c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d106      	bne.n	8000588 <SetAnimationTime+0x28>
		{
			flagDirectionPut = 1;
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <SetAnimationTime+0x8c>)
 800057c:	2201      	movs	r2, #1
 800057e:	601a      	str	r2, [r3, #0]
			animation = 20;
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <SetAnimationTime+0x88>)
 8000582:	2214      	movs	r2, #20
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	e005      	b.n	8000594 <SetAnimationTime+0x34>
		}
		else
		{
			flagDirectionPut = 0;
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <SetAnimationTime+0x8c>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
			animation = 10;
 800058e:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <SetAnimationTime+0x88>)
 8000590:	220a      	movs	r2, #10
 8000592:	601a      	str	r2, [r3, #0]
		}

		if (flagDirectionSearch == 0)
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <SetAnimationTime+0x90>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d106      	bne.n	80005aa <SetAnimationTime+0x4a>
		{
			flagDirectionSearch = 1;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <SetAnimationTime+0x90>)
 800059e:	2201      	movs	r2, #1
 80005a0:	601a      	str	r2, [r3, #0]
			animation = 20;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <SetAnimationTime+0x88>)
 80005a4:	2214      	movs	r2, #20
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	e005      	b.n	80005b6 <SetAnimationTime+0x56>
		}
		else
		{
			flagDirectionSearch = 0;
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <SetAnimationTime+0x90>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
			animation = 20;
 80005b0:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <SetAnimationTime+0x88>)
 80005b2:	2214      	movs	r2, #20
 80005b4:	601a      	str	r2, [r3, #0]
		}
	}

	if (fluid == 0)
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <SetAnimationTime+0x94>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d102      	bne.n	80005c4 <SetAnimationTime+0x64>
	{
		fluid = 40;
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <SetAnimationTime+0x94>)
 80005c0:	2228      	movs	r2, #40	; 0x28
 80005c2:	601a      	str	r2, [r3, #0]
	}
	fluid--;
 80005c4:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <SetAnimationTime+0x94>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <SetAnimationTime+0x94>)
 80005cc:	6013      	str	r3, [r2, #0]

	animation--;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <SetAnimationTime+0x88>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <SetAnimationTime+0x88>)
 80005d6:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim11);
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <SetAnimationTime+0x84>)
 80005da:	f005 f9f3 	bl	80059c4 <HAL_TIM_Base_Start_IT>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200003b4 	.word	0x200003b4
 80005e8:	200001e4 	.word	0x200001e4
 80005ec:	200001e0 	.word	0x200001e0
 80005f0:	200001e8 	.word	0x200001e8
 80005f4:	20000000 	.word	0x20000000

080005f8 <DrawShotSearching>:

void DrawShotSearching(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af02      	add	r7, sp, #8
	if (flagDirectionSearch == 1)
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <DrawShotSearching+0x7c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d119      	bne.n	800063a <DrawShotSearching+0x42>
	{
		SSD1306_DrawFilledRectangle(10, 0, 100, 60, 0);
 8000606:	2300      	movs	r3, #0
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	233c      	movs	r3, #60	; 0x3c
 800060c:	2264      	movs	r2, #100	; 0x64
 800060e:	2100      	movs	r1, #0
 8000610:	200a      	movs	r0, #10
 8000612:	f003 f831 	bl	8003678 <SSD1306_DrawFilledRectangle>
		SSD1306_DrawBitmap(20+animation, 0, lupa, 60, 58, 1);
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <DrawShotSearching+0x80>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	b29b      	uxth	r3, r3
 800061c:	3314      	adds	r3, #20
 800061e:	b29b      	uxth	r3, r3
 8000620:	b218      	sxth	r0, r3
 8000622:	2301      	movs	r3, #1
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	233a      	movs	r3, #58	; 0x3a
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	233c      	movs	r3, #60	; 0x3c
 800062c:	4a13      	ldr	r2, [pc, #76]	; (800067c <DrawShotSearching+0x84>)
 800062e:	2100      	movs	r1, #0
 8000630:	f002 fc2f 	bl	8002e92 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000634:	f002 fd5a 	bl	80030ec <SSD1306_UpdateScreen>
	{
		SSD1306_DrawFilledRectangle(10, 0, 100, 60, 0);
		SSD1306_DrawBitmap(40-animation, 0, lupa, 60, 58, 1);
		SSD1306_UpdateScreen();
	}
}
 8000638:	e019      	b.n	800066e <DrawShotSearching+0x76>
		SSD1306_DrawFilledRectangle(10, 0, 100, 60, 0);
 800063a:	2300      	movs	r3, #0
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	233c      	movs	r3, #60	; 0x3c
 8000640:	2264      	movs	r2, #100	; 0x64
 8000642:	2100      	movs	r1, #0
 8000644:	200a      	movs	r0, #10
 8000646:	f003 f817 	bl	8003678 <SSD1306_DrawFilledRectangle>
		SSD1306_DrawBitmap(40-animation, 0, lupa, 60, 58, 1);
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <DrawShotSearching+0x80>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	b29b      	uxth	r3, r3
 8000650:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8000654:	b29b      	uxth	r3, r3
 8000656:	b218      	sxth	r0, r3
 8000658:	2301      	movs	r3, #1
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	233a      	movs	r3, #58	; 0x3a
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	233c      	movs	r3, #60	; 0x3c
 8000662:	4a06      	ldr	r2, [pc, #24]	; (800067c <DrawShotSearching+0x84>)
 8000664:	2100      	movs	r1, #0
 8000666:	f002 fc14 	bl	8002e92 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 800066a:	f002 fd3f 	bl	80030ec <SSD1306_UpdateScreen>
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200001e8 	.word	0x200001e8
 8000678:	200001e4 	.word	0x200001e4
 800067c:	080093e4 	.word	0x080093e4

08000680 <DrawShotFill>:

void DrawShotFill(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af02      	add	r7, sp, #8
		SSD1306_DrawBitmap(40, 0, kielon, 40, 60, 1);
 8000686:	2301      	movs	r3, #1
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	233c      	movs	r3, #60	; 0x3c
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2328      	movs	r3, #40	; 0x28
 8000690:	4a2e      	ldr	r2, [pc, #184]	; (800074c <DrawShotFill+0xcc>)
 8000692:	2100      	movs	r1, #0
 8000694:	2028      	movs	r0, #40	; 0x28
 8000696:	f002 fbfc 	bl	8002e92 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 800069a:	f002 fd27 	bl	80030ec <SSD1306_UpdateScreen>
		//ciecz
		int16_t byteWidth = (30 + 7) / 8;
 800069e:	2304      	movs	r3, #4
 80006a0:	80fb      	strh	r3, [r7, #6]
		uint8_t byte = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]
		int16_t x = 45;
 80006a6:	232d      	movs	r3, #45	; 0x2d
 80006a8:	80bb      	strh	r3, [r7, #4]
		int16_t y = 44;
 80006aa:	232c      	movs	r3, #44	; 0x2c
 80006ac:	81bb      	strh	r3, [r7, #12]
		for (int16_t j = 40; j > fluid; j--, y--) {
 80006ae:	2328      	movs	r3, #40	; 0x28
 80006b0:	817b      	strh	r3, [r7, #10]
 80006b2:	e03f      	b.n	8000734 <DrawShotFill+0xb4>
			for (int16_t i = 0; i < 30; i++) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	813b      	strh	r3, [r7, #8]
 80006b8:	e02c      	b.n	8000714 <DrawShotFill+0x94>
				if (i & 7) {
 80006ba:	893b      	ldrh	r3, [r7, #8]
 80006bc:	f003 0307 	and.w	r3, r3, #7
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d003      	beq.n	80006cc <DrawShotFill+0x4c>
					byte <<= 1;
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	e010      	b.n	80006ee <DrawShotFill+0x6e>
				} else {
					byte = (*(const unsigned char*) (&ciecz[j * byteWidth
 80006cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006d4:	fb03 f202 	mul.w	r2, r3, r2
							+ i / 8]));
 80006d8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	da00      	bge.n	80006e2 <DrawShotFill+0x62>
 80006e0:	3307      	adds	r3, #7
 80006e2:	10db      	asrs	r3, r3, #3
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	4413      	add	r3, r2
					byte = (*(const unsigned char*) (&ciecz[j * byteWidth
 80006e8:	4a19      	ldr	r2, [pc, #100]	; (8000750 <DrawShotFill+0xd0>)
 80006ea:	5cd3      	ldrb	r3, [r2, r3]
 80006ec:	73fb      	strb	r3, [r7, #15]
				}
				if (byte & 0x80)
 80006ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	da08      	bge.n	8000708 <DrawShotFill+0x88>
					SSD1306_DrawPixel(x + i, y, 1);
 80006f6:	88ba      	ldrh	r2, [r7, #4]
 80006f8:	893b      	ldrh	r3, [r7, #8]
 80006fa:	4413      	add	r3, r2
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	89b9      	ldrh	r1, [r7, #12]
 8000700:	2201      	movs	r2, #1
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fd38 	bl	8003178 <SSD1306_DrawPixel>
			for (int16_t i = 0; i < 30; i++) {
 8000708:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800070c:	b29b      	uxth	r3, r3
 800070e:	3301      	adds	r3, #1
 8000710:	b29b      	uxth	r3, r3
 8000712:	813b      	strh	r3, [r7, #8]
 8000714:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000718:	2b1d      	cmp	r3, #29
 800071a:	ddce      	ble.n	80006ba <DrawShotFill+0x3a>
		for (int16_t j = 40; j > fluid; j--, y--) {
 800071c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000720:	b29b      	uxth	r3, r3
 8000722:	3b01      	subs	r3, #1
 8000724:	b29b      	uxth	r3, r3
 8000726:	817b      	strh	r3, [r7, #10]
 8000728:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800072c:	b29b      	uxth	r3, r3
 800072e:	3b01      	subs	r3, #1
 8000730:	b29b      	uxth	r3, r3
 8000732:	81bb      	strh	r3, [r7, #12]
 8000734:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <DrawShotFill+0xd4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	429a      	cmp	r2, r3
 800073e:	dcb9      	bgt.n	80006b4 <DrawShotFill+0x34>
			}
	}
}
 8000740:	bf00      	nop
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	080095b4 	.word	0x080095b4
 8000750:	080096e0 	.word	0x080096e0
 8000754:	20000000 	.word	0x20000000

08000758 <Print>:

void Print(GuiState state) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d10b      	bne.n	8000780 <Print+0x28>
	case StartLayer:
//		if(animation>10)
//		{
			SSD1306_GotoXY(0, 25);
 8000768:	2119      	movs	r1, #25
 800076a:	2000      	movs	r0, #0
 800076c:	f002 fd64 	bl	8003238 <SSD1306_GotoXY>
			SSD1306_Puts("Press key to start", &Font_7x10, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	4906      	ldr	r1, [pc, #24]	; (800078c <Print+0x34>)
 8000774:	4806      	ldr	r0, [pc, #24]	; (8000790 <Print+0x38>)
 8000776:	f002 fdf5 	bl	8003364 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 800077a:	f002 fcb7 	bl	80030ec <SSD1306_UpdateScreen>
//		}
//		else
//		{
//			ClearScreen();
//		}
		break;
 800077e:	e000      	b.n	8000782 <Print+0x2a>
	default:
		break;
 8000780:	bf00      	nop
	}
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000144 	.word	0x20000144
 8000790:	08009320 	.word	0x08009320

08000794 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 0 */

uint32_t encoderPosition = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	encoderPosition = __HAL_TIM_GET_COUNTER(&htim3) >>2;
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_TIM_IC_CaptureCallback+0x20>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a2:	089b      	lsrs	r3, r3, #2
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_TIM_IC_CaptureCallback+0x24>)
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	200002dc 	.word	0x200002dc
 80007b8:	20000410 	.word	0x20000410

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f003 f84a 	bl	8003858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f892 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 fa78 	bl	8000cbc <MX_GPIO_Init>
  MX_TIM2_Init();
 80007cc:	f000 f954 	bl	8000a78 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007d0:	f000 f99e 	bl	8000b10 <MX_TIM3_Init>
  MX_I2C1_Init();
 80007d4:	f000 f8f4 	bl	80009c0 <MX_I2C1_Init>
  MX_TIM10_Init();
 80007d8:	f000 fa28 	bl	8000c2c <MX_TIM10_Init>
  MX_TIM4_Init();
 80007dc:	f000 f9ec 	bl	8000bb8 <MX_TIM4_Init>
  MX_TIM11_Init();
 80007e0:	f000 fa48 	bl	8000c74 <MX_TIM11_Init>
  MX_I2C2_Init();
 80007e4:	f000 f91a 	bl	8000a1c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	STEPPERS_Init_TMR(&htim2);
 80007e8:	482e      	ldr	r0, [pc, #184]	; (80008a4 <main+0xe8>)
 80007ea:	f000 ff35 	bl	8001658 <STEPPERS_Init_TMR>

    STEPPER_Step_NonBlocking(0, 8192, Steppers_Dir);
 80007ee:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <main+0xec>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f8:	2000      	movs	r0, #0
 80007fa:	f001 f9cf 	bl	8001b9c <STEPPER_Step_NonBlocking>
	//HAL_TIM_Base_Start(&htim2);
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80007fe:	213c      	movs	r1, #60	; 0x3c
 8000800:	482a      	ldr	r0, [pc, #168]	; (80008ac <main+0xf0>)
 8000802:	f005 fa66 	bl	8005cd2 <HAL_TIM_Encoder_Start_IT>
	SSD1306_Init();
 8000806:	f002 fbad 	bl	8002f64 <SSD1306_Init>
	TIM10->EGR = TIM_EGR_UG; /* Force update for prescaler value. */
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <main+0xf4>)
 800080c:	2201      	movs	r2, #1
 800080e:	615a      	str	r2, [r3, #20]
	TIM10->SR = 0; /* Clear update flag. */
 8000810:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <main+0xf4>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
	TIM11->EGR = TIM_EGR_UG; /* Force update for prescaler value. */
 8000816:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <main+0xf8>)
 8000818:	2201      	movs	r2, #1
 800081a:	615a      	str	r2, [r3, #20]
	TIM11->SR = 0; /* Clear update flag. */
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <main+0xf8>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
	TIM2->EGR = TIM_EGR_UG; /* Force update for prescaler value. */
 8000822:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000826:	2201      	movs	r2, #1
 8000828:	615a      	str	r2, [r3, #20]
	TIM2->SR = 0; /* Clear update flag. */
 800082a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8000832:	2200      	movs	r2, #0
 8000834:	2102      	movs	r1, #2
 8000836:	4820      	ldr	r0, [pc, #128]	; (80008b8 <main+0xfc>)
 8000838:	f003 faf2 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800083c:	2014      	movs	r0, #20
 800083e:	f003 f84d 	bl	80038dc <HAL_Delay>
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
 8000842:	2201      	movs	r2, #1
 8000844:	2102      	movs	r1, #2
 8000846:	481c      	ldr	r0, [pc, #112]	; (80008b8 <main+0xfc>)
 8000848:	f003 faea 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800084c:	2014      	movs	r0, #20
 800084e:	f003 f845 	bl	80038dc <HAL_Delay>


	tofInit(1); // set long range mode (up to 2m)
 8000852:	2001      	movs	r0, #1
 8000854:	f001 fcf0 	bl	8002238 <tofInit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000858:	f005 fedc 	bl	8006614 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 800085c:	4a17      	ldr	r2, [pc, #92]	; (80008bc <main+0x100>)
 800085e:	2100      	movs	r1, #0
 8000860:	4817      	ldr	r0, [pc, #92]	; (80008c0 <main+0x104>)
 8000862:	f005 ff21 	bl	80066a8 <osThreadNew>
 8000866:	4603      	mov	r3, r0
 8000868:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <main+0x108>)
 800086a:	6013      	str	r3, [r2, #0]

  /* creation of debouncingTask */
  debouncingTaskHandle = osThreadNew(StartDebouncingTask, NULL, &debouncingTask_attributes);
 800086c:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <main+0x10c>)
 800086e:	2100      	movs	r1, #0
 8000870:	4816      	ldr	r0, [pc, #88]	; (80008cc <main+0x110>)
 8000872:	f005 ff19 	bl	80066a8 <osThreadNew>
 8000876:	4603      	mov	r3, r0
 8000878:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <main+0x114>)
 800087a:	6013      	str	r3, [r2, #0]

  /* creation of pumpTask */
  pumpTaskHandle = osThreadNew(StartPumpTask, NULL, &pumpTask_attributes);
 800087c:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <main+0x118>)
 800087e:	2100      	movs	r1, #0
 8000880:	4815      	ldr	r0, [pc, #84]	; (80008d8 <main+0x11c>)
 8000882:	f005 ff11 	bl	80066a8 <osThreadNew>
 8000886:	4603      	mov	r3, r0
 8000888:	4a14      	ldr	r2, [pc, #80]	; (80008dc <main+0x120>)
 800088a:	6013      	str	r3, [r2, #0]

  /* creation of oledTask */
  oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 800088c:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <main+0x124>)
 800088e:	2100      	movs	r1, #0
 8000890:	4814      	ldr	r0, [pc, #80]	; (80008e4 <main+0x128>)
 8000892:	f005 ff09 	bl	80066a8 <osThreadNew>
 8000896:	4603      	mov	r3, r0
 8000898:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <main+0x12c>)
 800089a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800089c:	f005 fede 	bl	800665c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80008a0:	e7fe      	b.n	80008a0 <main+0xe4>
 80008a2:	bf00      	nop
 80008a4:	20000294 	.word	0x20000294
 80008a8:	2000040e 	.word	0x2000040e
 80008ac:	200002dc 	.word	0x200002dc
 80008b0:	40014400 	.word	0x40014400
 80008b4:	40014800 	.word	0x40014800
 80008b8:	40020400 	.word	0x40020400
 80008bc:	08009970 	.word	0x08009970
 80008c0:	08000e05 	.word	0x08000e05
 80008c4:	200003fc 	.word	0x200003fc
 80008c8:	08009994 	.word	0x08009994
 80008cc:	08000e15 	.word	0x08000e15
 80008d0:	20000400 	.word	0x20000400
 80008d4:	080099b8 	.word	0x080099b8
 80008d8:	08000e79 	.word	0x08000e79
 80008dc:	20000404 	.word	0x20000404
 80008e0:	080099dc 	.word	0x080099dc
 80008e4:	08000e89 	.word	0x08000e89
 80008e8:	20000408 	.word	0x20000408

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	; 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0320 	add.w	r3, r7, #32
 80008f6:	2230      	movs	r2, #48	; 0x30
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f008 fc3a 	bl	8009174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <SystemClock_Config+0xcc>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	4a27      	ldr	r2, [pc, #156]	; (80009b8 <SystemClock_Config+0xcc>)
 800091a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091e:	6413      	str	r3, [r2, #64]	; 0x40
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <SystemClock_Config+0xcc>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <SystemClock_Config+0xd0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000938:	4a20      	ldr	r2, [pc, #128]	; (80009bc <SystemClock_Config+0xd0>)
 800093a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800093e:	6013      	str	r3, [r2, #0]
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <SystemClock_Config+0xd0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800094c:	2302      	movs	r3, #2
 800094e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000950:	2301      	movs	r3, #1
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000954:	2310      	movs	r3, #16
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000958:	2302      	movs	r3, #2
 800095a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800095c:	2300      	movs	r3, #0
 800095e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000960:	2308      	movs	r3, #8
 8000962:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000964:	2348      	movs	r3, #72	; 0x48
 8000966:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000968:	2302      	movs	r3, #2
 800096a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	4618      	mov	r0, r3
 8000976:	f004 fb4b 	bl	8005010 <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000980:	f000 fd08 	bl	8001394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	230f      	movs	r3, #15
 8000986:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2302      	movs	r3, #2
 800098a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000994:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	2102      	movs	r1, #2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f004 fdad 	bl	8005500 <HAL_RCC_ClockConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009ac:	f000 fcf2 	bl	8001394 <Error_Handler>
  }
}
 80009b0:	bf00      	nop
 80009b2:	3750      	adds	r7, #80	; 0x50
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40007000 	.word	0x40007000

080009c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009c6:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <MX_I2C1_Init+0x54>)
 80009c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009cc:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_I2C1_Init+0x58>)
 80009ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009fe:	f003 fa43 	bl	8003e88 <HAL_I2C_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a08:	f000 fcc4 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200001ec 	.word	0x200001ec
 8000a14:	40005400 	.word	0x40005400
 8000a18:	00061a80 	.word	0x00061a80

08000a1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_I2C2_Init+0x50>)
 8000a22:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <MX_I2C2_Init+0x54>)
 8000a24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_I2C2_Init+0x50>)
 8000a28:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <MX_I2C2_Init+0x58>)
 8000a2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_I2C2_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_I2C2_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_I2C2_Init+0x50>)
 8000a3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a3e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MX_I2C2_Init+0x50>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_I2C2_Init+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <MX_I2C2_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_I2C2_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_I2C2_Init+0x50>)
 8000a5a:	f003 fa15 	bl	8003e88 <HAL_I2C_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a64:	f000 fc96 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000240 	.word	0x20000240
 8000a70:	40005800 	.word	0x40005800
 8000a74:	00061a80 	.word	0x00061a80

08000a78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_TIM2_Init+0x94>)
 8000a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_TIM2_Init+0x94>)
 8000a9e:	2247      	movs	r2, #71	; 0x47
 8000aa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_TIM2_Init+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_TIM2_Init+0x94>)
 8000aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_TIM2_Init+0x94>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_TIM2_Init+0x94>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000abc:	4813      	ldr	r0, [pc, #76]	; (8000b0c <MX_TIM2_Init+0x94>)
 8000abe:	f004 ff31 	bl	8005924 <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ac8:	f000 fc64 	bl	8001394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <MX_TIM2_Init+0x94>)
 8000ada:	f005 fab0 	bl	800603e <HAL_TIM_ConfigClockSource>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ae4:	f000 fc56 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000af0:	463b      	mov	r3, r7
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_TIM2_Init+0x94>)
 8000af6:	f005 fcc7 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b00:	f000 fc48 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000294 	.word	0x20000294

08000b10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2224      	movs	r2, #36	; 0x24
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f008 fb28 	bl	8009174 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <MX_TIM3_Init+0xa0>)
 8000b2e:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <MX_TIM3_Init+0xa4>)
 8000b30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_TIM3_Init+0xa0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_TIM3_Init+0xa0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_TIM3_Init+0xa0>)
 8000b40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_TIM3_Init+0xa0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_TIM3_Init+0xa0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b52:	2303      	movs	r3, #3
 8000b54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000b56:	2302      	movs	r3, #2
 8000b58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000b66:	2302      	movs	r3, #2
 8000b68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_TIM3_Init+0xa0>)
 8000b7e:	f005 f802 	bl	8005b86 <HAL_TIM_Encoder_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b88:	f000 fc04 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_TIM3_Init+0xa0>)
 8000b9a:	f005 fc75 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000ba4:	f000 fbf6 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3730      	adds	r7, #48	; 0x30
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200002dc 	.word	0x200002dc
 8000bb4:	40000400 	.word	0x40000400

08000bb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_TIM4_Init+0x6c>)
 8000bc8:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <MX_TIM4_Init+0x70>)
 8000bca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_TIM4_Init+0x6c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_TIM4_Init+0x6c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_TIM4_Init+0x6c>)
 8000bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bde:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_TIM4_Init+0x6c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_TIM4_Init+0x6c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8000bec:	2108      	movs	r1, #8
 8000bee:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_TIM4_Init+0x6c>)
 8000bf0:	f004 ff79 	bl	8005ae6 <HAL_TIM_OnePulse_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0x46>
  {
    Error_Handler();
 8000bfa:	f000 fbcb 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c06:	463b      	mov	r3, r7
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4806      	ldr	r0, [pc, #24]	; (8000c24 <MX_TIM4_Init+0x6c>)
 8000c0c:	f005 fc3c 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000c16:	f000 fbbd 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000324 	.word	0x20000324
 8000c28:	40000800 	.word	0x40000800

08000c2c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_TIM10_Init+0x40>)
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <MX_TIM10_Init+0x44>)
 8000c34:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 19999;
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <MX_TIM10_Init+0x40>)
 8000c38:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000c3c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_TIM10_Init+0x40>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 3599;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_TIM10_Init+0x40>)
 8000c46:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000c4a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <MX_TIM10_Init+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_TIM10_Init+0x40>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_TIM10_Init+0x40>)
 8000c5a:	f004 fe63 	bl	8005924 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000c64:	f000 fb96 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2000036c 	.word	0x2000036c
 8000c70:	40014400 	.word	0x40014400

08000c74 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_TIM11_Init+0x40>)
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	; (8000cb8 <MX_TIM11_Init+0x44>)
 8000c7c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 499;
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <MX_TIM11_Init+0x40>)
 8000c80:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000c84:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_TIM11_Init+0x40>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 35999;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_TIM11_Init+0x40>)
 8000c8e:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000c92:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_TIM11_Init+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_TIM11_Init+0x40>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_TIM11_Init+0x40>)
 8000ca2:	f004 fe3f 	bl	8005924 <HAL_TIM_Base_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000cac:	f000 fb72 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200003b4 	.word	0x200003b4
 8000cb8:	40014800 	.word	0x40014800

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b47      	ldr	r3, [pc, #284]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a46      	ldr	r2, [pc, #280]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b40      	ldr	r3, [pc, #256]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a3f      	ldr	r2, [pc, #252]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b3d      	ldr	r3, [pc, #244]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b39      	ldr	r3, [pc, #228]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a38      	ldr	r2, [pc, #224]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b32      	ldr	r3, [pc, #200]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a31      	ldr	r2, [pc, #196]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <MX_GPIO_Init+0x138>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d48:	482b      	ldr	r0, [pc, #172]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000d4a:	f003 f869 	bl	8003e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEPIN1_Pin|STEPIN2_Pin|STEPIN3_Pin|STEPIN4_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	211e      	movs	r1, #30
 8000d52:	482a      	ldr	r0, [pc, #168]	; (8000dfc <MX_GPIO_Init+0x140>)
 8000d54:	f003 f864 	bl	8003e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOF_XSHUT_Pin|PUMPIN1_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2122      	movs	r1, #34	; 0x22
 8000d5c:	4828      	ldr	r0, [pc, #160]	; (8000e00 <MX_GPIO_Init+0x144>)
 8000d5e:	f003 f85f 	bl	8003e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	481f      	ldr	r0, [pc, #124]	; (8000df8 <MX_GPIO_Init+0x13c>)
 8000d7c:	f002 feb4 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_Pin PA5 */
  GPIO_InitStruct.Pin = KEY_Pin|GPIO_PIN_5;
 8000d80:	2321      	movs	r3, #33	; 0x21
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	481a      	ldr	r0, [pc, #104]	; (8000dfc <MX_GPIO_Init+0x140>)
 8000d94:	f002 fea8 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPIN1_Pin STEPIN2_Pin STEPIN3_Pin STEPIN4_Pin */
  GPIO_InitStruct.Pin = STEPIN1_Pin|STEPIN2_Pin|STEPIN3_Pin|STEPIN4_Pin;
 8000d98:	231e      	movs	r3, #30
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4813      	ldr	r0, [pc, #76]	; (8000dfc <MX_GPIO_Init+0x140>)
 8000db0:	f002 fe9a 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_XSHUT_Pin PUMPIN1_Pin */
  GPIO_InitStruct.Pin = TOF_XSHUT_Pin|PUMPIN1_Pin;
 8000db4:	2322      	movs	r3, #34	; 0x22
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_GPIO_Init+0x144>)
 8000dcc:	f002 fe8c 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8000dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_GPIO_Init+0x140>)
 8000de6:	f002 fe7f 	bl	8003ae8 <HAL_GPIO_Init>

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	; 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400

08000e04 <StartMainTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	for (;;) {
		/*if (distance < 100)
		{
			//stepper_step_angle(45, 13);
		}*/
		osDelay(40 / portTICK_PERIOD_MS);
 8000e0c:	2028      	movs	r0, #40	; 0x28
 8000e0e:	f005 fcdd 	bl	80067cc <osDelay>
 8000e12:	e7fb      	b.n	8000e0c <StartMainTask+0x8>

08000e14 <StartDebouncingTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDebouncingTask */
void StartDebouncingTask(void *argument)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebouncingTask */

	/* Infinite loop */
	for (;;) {
		GPIO_PinState new_state = HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin);
 8000e1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e20:	4811      	ldr	r0, [pc, #68]	; (8000e68 <StartDebouncingTask+0x54>)
 8000e22:	f002 ffe5 	bl	8003df0 <HAL_GPIO_ReadPin>
 8000e26:	4603      	mov	r3, r0
 8000e28:	73fb      	strb	r3, [r7, #15]

		if (new_state != key_state && new_state == GPIO_PIN_RESET) {
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <StartDebouncingTask+0x58>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d00f      	beq.n	8000e56 <StartDebouncingTask+0x42>
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10c      	bne.n	8000e56 <StartDebouncingTask+0x42>
			STEPPER_Stop(0);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f000 fed9 	bl	8001bf4 <STEPPER_Stop>
			//STEPPER_Step_NonBlocking(0, 2000, Steppers_Dir);
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e46:	480a      	ldr	r0, [pc, #40]	; (8000e70 <StartDebouncingTask+0x5c>)
 8000e48:	f003 f803 	bl	8003e52 <HAL_GPIO_TogglePin>
			ResetPosition();
 8000e4c:	f7ff fb7a 	bl	8000544 <ResetPosition>
			press = 1;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <StartDebouncingTask+0x60>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	601a      	str	r2, [r3, #0]
		}
		key_state = new_state;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <StartDebouncingTask+0x58>)
 8000e5c:	801a      	strh	r2, [r3, #0]

		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, new_state);
		osDelay(30 / portTICK_PERIOD_MS);
 8000e5e:	201e      	movs	r0, #30
 8000e60:	f005 fcb4 	bl	80067cc <osDelay>
	for (;;) {
 8000e64:	e7da      	b.n	8000e1c <StartDebouncingTask+0x8>
 8000e66:	bf00      	nop
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	20000004 	.word	0x20000004
 8000e70:	40020800 	.word	0x40020800
 8000e74:	20000418 	.word	0x20000418

08000e78 <StartPumpTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPumpTask */
void StartPumpTask(void *argument)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
//			StartPump();
//		} else {
//}
//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		//distance = (uint16_t)tofReadDistance();
		osDelay(200 / portTICK_PERIOD_MS);
 8000e80:	20c8      	movs	r0, #200	; 0xc8
 8000e82:	f005 fca3 	bl	80067cc <osDelay>
 8000e86:	e7fb      	b.n	8000e80 <StartPumpTask+0x8>

08000e88 <StartOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af02      	add	r7, sp, #8
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
	GuiState old = StartLayer;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;) {

		if(old != statusOled) //TODO: Fix this shit
 8000e94:	4ba3      	ldr	r3, [pc, #652]	; (8001124 <StartOledTask+0x29c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	7bfa      	ldrb	r2, [r7, #15]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d001      	beq.n	8000ea2 <StartOledTask+0x1a>
		{
			SSD1306_Clear();
 8000e9e:	f002 fc38 	bl	8003712 <SSD1306_Clear>
		}
		old = statusOled;
 8000ea2:	4ba0      	ldr	r3, [pc, #640]	; (8001124 <StartOledTask+0x29c>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	73fb      	strb	r3, [r7, #15]
		SetAnimationTime();
 8000ea8:	f7ff fb5a 	bl	8000560 <SetAnimationTime>
		switch (statusOled) {
 8000eac:	4b9d      	ldr	r3, [pc, #628]	; (8001124 <StartOledTask+0x29c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	f200 822d 	bhi.w	8001310 <StartOledTask+0x488>
 8000eb6:	a201      	add	r2, pc, #4	; (adr r2, 8000ebc <StartOledTask+0x34>)
 8000eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ebc:	08000ed1 	.word	0x08000ed1
 8000ec0:	08001269 	.word	0x08001269
 8000ec4:	08001169 	.word	0x08001169
 8000ec8:	08000ff5 	.word	0x08000ff5
 8000ecc:	08001231 	.word	0x08001231
		case StartLayer:
			if(press == 1) statusOled = MenuLayer;
 8000ed0:	4b95      	ldr	r3, [pc, #596]	; (8001128 <StartOledTask+0x2a0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d102      	bne.n	8000ede <StartOledTask+0x56>
 8000ed8:	4b92      	ldr	r3, [pc, #584]	; (8001124 <StartOledTask+0x29c>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
			SSD1306_GotoXY(0, 52);
 8000ede:	2134      	movs	r1, #52	; 0x34
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f002 f9a9 	bl	8003238 <SSD1306_GotoXY>
			distancemm[0] = '0' + ((int)distance % 10000/1000);
 8000ee6:	4b91      	ldr	r3, [pc, #580]	; (800112c <StartOledTask+0x2a4>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	4a91      	ldr	r2, [pc, #580]	; (8001130 <StartOledTask+0x2a8>)
 8000eec:	fba2 1203 	umull	r1, r2, r2, r3
 8000ef0:	0b52      	lsrs	r2, r2, #13
 8000ef2:	f242 7110 	movw	r1, #10000	; 0x2710
 8000ef6:	fb01 f202 	mul.w	r2, r1, r2
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	4a8d      	ldr	r2, [pc, #564]	; (8001134 <StartOledTask+0x2ac>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	099b      	lsrs	r3, r3, #6
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	3330      	adds	r3, #48	; 0x30
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b8a      	ldr	r3, [pc, #552]	; (8001138 <StartOledTask+0x2b0>)
 8000f10:	701a      	strb	r2, [r3, #0]
			distancemm[1] = '0' + ((int)distance % 1000/100);
 8000f12:	4b86      	ldr	r3, [pc, #536]	; (800112c <StartOledTask+0x2a4>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	4a87      	ldr	r2, [pc, #540]	; (8001134 <StartOledTask+0x2ac>)
 8000f18:	fba2 1203 	umull	r1, r2, r2, r3
 8000f1c:	0992      	lsrs	r2, r2, #6
 8000f1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f22:	fb01 f202 	mul.w	r2, r1, r2
 8000f26:	1a9b      	subs	r3, r3, r2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	4a84      	ldr	r2, [pc, #528]	; (800113c <StartOledTask+0x2b4>)
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	095b      	lsrs	r3, r3, #5
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	3330      	adds	r3, #48	; 0x30
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b7f      	ldr	r3, [pc, #508]	; (8001138 <StartOledTask+0x2b0>)
 8000f3c:	705a      	strb	r2, [r3, #1]
			distancemm[2] = '0' + ((int)distance % 100/10);
 8000f3e:	4b7b      	ldr	r3, [pc, #492]	; (800112c <StartOledTask+0x2a4>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	4a7e      	ldr	r2, [pc, #504]	; (800113c <StartOledTask+0x2b4>)
 8000f44:	fba2 1203 	umull	r1, r2, r2, r3
 8000f48:	0952      	lsrs	r2, r2, #5
 8000f4a:	2164      	movs	r1, #100	; 0x64
 8000f4c:	fb01 f202 	mul.w	r2, r1, r2
 8000f50:	1a9b      	subs	r3, r3, r2
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	4a7a      	ldr	r2, [pc, #488]	; (8001140 <StartOledTask+0x2b8>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	08db      	lsrs	r3, r3, #3
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	3330      	adds	r3, #48	; 0x30
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b74      	ldr	r3, [pc, #464]	; (8001138 <StartOledTask+0x2b0>)
 8000f66:	709a      	strb	r2, [r3, #2]
			distancemm[3] = '0' + ((int)distance % 10);
 8000f68:	4b70      	ldr	r3, [pc, #448]	; (800112c <StartOledTask+0x2a4>)
 8000f6a:	881a      	ldrh	r2, [r3, #0]
 8000f6c:	4b74      	ldr	r3, [pc, #464]	; (8001140 <StartOledTask+0x2b8>)
 8000f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f72:	08d9      	lsrs	r1, r3, #3
 8000f74:	460b      	mov	r3, r1
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	3330      	adds	r3, #48	; 0x30
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b6c      	ldr	r3, [pc, #432]	; (8001138 <StartOledTask+0x2b0>)
 8000f88:	70da      	strb	r2, [r3, #3]
			SSD1306_Puts("Distance:    mm", &Font_7x10, 1);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	496d      	ldr	r1, [pc, #436]	; (8001144 <StartOledTask+0x2bc>)
 8000f8e:	486e      	ldr	r0, [pc, #440]	; (8001148 <StartOledTask+0x2c0>)
 8000f90:	f002 f9e8 	bl	8003364 <SSD1306_Puts>
			SSD1306_GotoXY(62, 52);
 8000f94:	2134      	movs	r1, #52	; 0x34
 8000f96:	203e      	movs	r0, #62	; 0x3e
 8000f98:	f002 f94e 	bl	8003238 <SSD1306_GotoXY>
			SSD1306_Putc(distancemm[0], &Font_7x10, 1);
 8000f9c:	4b66      	ldr	r3, [pc, #408]	; (8001138 <StartOledTask+0x2b0>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4968      	ldr	r1, [pc, #416]	; (8001144 <StartOledTask+0x2bc>)
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 f95d 	bl	8003264 <SSD1306_Putc>
			SSD1306_GotoXY(69, 52);
 8000faa:	2134      	movs	r1, #52	; 0x34
 8000fac:	2045      	movs	r0, #69	; 0x45
 8000fae:	f002 f943 	bl	8003238 <SSD1306_GotoXY>
			SSD1306_Putc(distancemm[1], &Font_7x10, 1);
 8000fb2:	4b61      	ldr	r3, [pc, #388]	; (8001138 <StartOledTask+0x2b0>)
 8000fb4:	785b      	ldrb	r3, [r3, #1]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4962      	ldr	r1, [pc, #392]	; (8001144 <StartOledTask+0x2bc>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 f952 	bl	8003264 <SSD1306_Putc>
			SSD1306_GotoXY(76, 52);
 8000fc0:	2134      	movs	r1, #52	; 0x34
 8000fc2:	204c      	movs	r0, #76	; 0x4c
 8000fc4:	f002 f938 	bl	8003238 <SSD1306_GotoXY>
			SSD1306_Putc(distancemm[2], &Font_7x10, 1);
 8000fc8:	4b5b      	ldr	r3, [pc, #364]	; (8001138 <StartOledTask+0x2b0>)
 8000fca:	789b      	ldrb	r3, [r3, #2]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	495d      	ldr	r1, [pc, #372]	; (8001144 <StartOledTask+0x2bc>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 f947 	bl	8003264 <SSD1306_Putc>
			SSD1306_GotoXY(83, 52);
 8000fd6:	2134      	movs	r1, #52	; 0x34
 8000fd8:	2053      	movs	r0, #83	; 0x53
 8000fda:	f002 f92d 	bl	8003238 <SSD1306_GotoXY>
			SSD1306_Putc(distancemm[3], &Font_7x10, 1);
 8000fde:	4b56      	ldr	r3, [pc, #344]	; (8001138 <StartOledTask+0x2b0>)
 8000fe0:	78db      	ldrb	r3, [r3, #3]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4957      	ldr	r1, [pc, #348]	; (8001144 <StartOledTask+0x2bc>)
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 f93c 	bl	8003264 <SSD1306_Putc>
			Print(StartLayer);
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff fbb3 	bl	8000758 <Print>
			break;
 8000ff2:	e18d      	b.n	8001310 <StartOledTask+0x488>
		case SettingsLayer:
			if(press == 1) statusOled = MenuLayer;
 8000ff4:	4b4c      	ldr	r3, [pc, #304]	; (8001128 <StartOledTask+0x2a0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d102      	bne.n	8001002 <StartOledTask+0x17a>
 8000ffc:	4b49      	ldr	r3, [pc, #292]	; (8001124 <StartOledTask+0x29c>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
			liquidVolume = encoderPosition%50;
 8001002:	4b52      	ldr	r3, [pc, #328]	; (800114c <StartOledTask+0x2c4>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b4d      	ldr	r3, [pc, #308]	; (800113c <StartOledTask+0x2b4>)
 8001008:	fba3 1302 	umull	r1, r3, r3, r2
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	2132      	movs	r1, #50	; 0x32
 8001010:	fb01 f303 	mul.w	r3, r1, r3
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	461a      	mov	r2, r3
 8001018:	4b4d      	ldr	r3, [pc, #308]	; (8001150 <StartOledTask+0x2c8>)
 800101a:	601a      	str	r2, [r3, #0]
			SSD1306_GotoXY(10, 0);
 800101c:	2100      	movs	r1, #0
 800101e:	200a      	movs	r0, #10
 8001020:	f002 f90a 	bl	8003238 <SSD1306_GotoXY>
			SSD1306_Puts(" SETTINGS ", &Font_11x18, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	494b      	ldr	r1, [pc, #300]	; (8001154 <StartOledTask+0x2cc>)
 8001028:	484b      	ldr	r0, [pc, #300]	; (8001158 <StartOledTask+0x2d0>)
 800102a:	f002 f99b 	bl	8003364 <SSD1306_Puts>
			SSD1306_GotoXY(0, 52);
 800102e:	2134      	movs	r1, #52	; 0x34
 8001030:	2000      	movs	r0, #0
 8001032:	f002 f901 	bl	8003238 <SSD1306_GotoXY>
			volume[0] = '0' + ((int)liquidVolume % 100 / 10);
 8001036:	4b46      	ldr	r3, [pc, #280]	; (8001150 <StartOledTask+0x2c8>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b40      	ldr	r3, [pc, #256]	; (800113c <StartOledTask+0x2b4>)
 800103c:	fb83 1302 	smull	r1, r3, r3, r2
 8001040:	1159      	asrs	r1, r3, #5
 8001042:	17d3      	asrs	r3, r2, #31
 8001044:	1acb      	subs	r3, r1, r3
 8001046:	2164      	movs	r1, #100	; 0x64
 8001048:	fb01 f303 	mul.w	r3, r1, r3
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	4a43      	ldr	r2, [pc, #268]	; (800115c <StartOledTask+0x2d4>)
 8001050:	fb82 1203 	smull	r1, r2, r2, r3
 8001054:	1092      	asrs	r2, r2, #2
 8001056:	17db      	asrs	r3, r3, #31
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	3330      	adds	r3, #48	; 0x30
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <StartOledTask+0x2d8>)
 8001062:	701a      	strb	r2, [r3, #0]
			volume[1] = '0' + ((int)liquidVolume % 10);
 8001064:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <StartOledTask+0x2c8>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b3c      	ldr	r3, [pc, #240]	; (800115c <StartOledTask+0x2d4>)
 800106a:	fb83 1302 	smull	r1, r3, r3, r2
 800106e:	1099      	asrs	r1, r3, #2
 8001070:	17d3      	asrs	r3, r2, #31
 8001072:	1ac9      	subs	r1, r1, r3
 8001074:	460b      	mov	r3, r1
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	1ad1      	subs	r1, r2, r3
 800107e:	b2cb      	uxtb	r3, r1
 8001080:	3330      	adds	r3, #48	; 0x30
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b36      	ldr	r3, [pc, #216]	; (8001160 <StartOledTask+0x2d8>)
 8001086:	705a      	strb	r2, [r3, #1]
			SSD1306_Puts("Liquid volume:  ml", &Font_7x10, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	492e      	ldr	r1, [pc, #184]	; (8001144 <StartOledTask+0x2bc>)
 800108c:	4835      	ldr	r0, [pc, #212]	; (8001164 <StartOledTask+0x2dc>)
 800108e:	f002 f969 	bl	8003364 <SSD1306_Puts>
			SSD1306_GotoXY(98, 52);
 8001092:	2134      	movs	r1, #52	; 0x34
 8001094:	2062      	movs	r0, #98	; 0x62
 8001096:	f002 f8cf 	bl	8003238 <SSD1306_GotoXY>
			SSD1306_Putc(volume[0], &Font_7x10, 1);
 800109a:	4b31      	ldr	r3, [pc, #196]	; (8001160 <StartOledTask+0x2d8>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2201      	movs	r2, #1
 80010a0:	4928      	ldr	r1, [pc, #160]	; (8001144 <StartOledTask+0x2bc>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 f8de 	bl	8003264 <SSD1306_Putc>
			SSD1306_GotoXY(105, 52);
 80010a8:	2134      	movs	r1, #52	; 0x34
 80010aa:	2069      	movs	r0, #105	; 0x69
 80010ac:	f002 f8c4 	bl	8003238 <SSD1306_GotoXY>
			SSD1306_Putc(volume[1], &Font_7x10, 1);
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <StartOledTask+0x2d8>)
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4923      	ldr	r1, [pc, #140]	; (8001144 <StartOledTask+0x2bc>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 f8d3 	bl	8003264 <SSD1306_Putc>
			SSD1306_DrawFilledRectangle(13, 29, liquidVolume*2, 12, 1);
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <StartOledTask+0x2c8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	2301      	movs	r3, #1
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	230c      	movs	r3, #12
 80010ce:	211d      	movs	r1, #29
 80010d0:	200d      	movs	r0, #13
 80010d2:	f002 fad1 	bl	8003678 <SSD1306_DrawFilledRectangle>
			SSD1306_DrawFilledRectangle(14+liquidVolume*2, 29, 100-liquidVolume*2, 12, 0);
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <StartOledTask+0x2c8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3307      	adds	r3, #7
 80010dc:	b29b      	uxth	r3, r3
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	b298      	uxth	r0, r3
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <StartOledTask+0x2c8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	2300      	movs	r3, #0
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	230c      	movs	r3, #12
 80010f6:	211d      	movs	r1, #29
 80010f8:	f002 fabe 	bl	8003678 <SSD1306_DrawFilledRectangle>
			SSD1306_DrawRectangle(13, 28, 102, 14, 1);
 80010fc:	2301      	movs	r3, #1
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	230e      	movs	r3, #14
 8001102:	2266      	movs	r2, #102	; 0x66
 8001104:	211c      	movs	r1, #28
 8001106:	200d      	movs	r0, #13
 8001108:	f002 fa4c 	bl	80035a4 <SSD1306_DrawRectangle>
			SSD1306_DrawRectangle(14, 29, 100, 12, 1);
 800110c:	2301      	movs	r3, #1
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	230c      	movs	r3, #12
 8001112:	2264      	movs	r2, #100	; 0x64
 8001114:	211d      	movs	r1, #29
 8001116:	200e      	movs	r0, #14
 8001118:	f002 fa44 	bl	80035a4 <SSD1306_DrawRectangle>
			SSD1306_UpdateScreen();
 800111c:	f001 ffe6 	bl	80030ec <SSD1306_UpdateScreen>
			break;
 8001120:	e0f6      	b.n	8001310 <StartOledTask+0x488>
 8001122:	bf00      	nop
 8001124:	20000415 	.word	0x20000415
 8001128:	20000418 	.word	0x20000418
 800112c:	2000040c 	.word	0x2000040c
 8001130:	d1b71759 	.word	0xd1b71759
 8001134:	10624dd3 	.word	0x10624dd3
 8001138:	20000010 	.word	0x20000010
 800113c:	51eb851f 	.word	0x51eb851f
 8001140:	cccccccd 	.word	0xcccccccd
 8001144:	20000144 	.word	0x20000144
 8001148:	08009368 	.word	0x08009368
 800114c:	20000410 	.word	0x20000410
 8001150:	20000008 	.word	0x20000008
 8001154:	2000014c 	.word	0x2000014c
 8001158:	08009378 	.word	0x08009378
 800115c:	66666667 	.word	0x66666667
 8001160:	2000000c 	.word	0x2000000c
 8001164:	08009384 	.word	0x08009384
		case PutShot:
			if(press == 1) statusOled = Searching;
 8001168:	4b6d      	ldr	r3, [pc, #436]	; (8001320 <StartOledTask+0x498>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d102      	bne.n	8001176 <StartOledTask+0x2ee>
 8001170:	4b6c      	ldr	r3, [pc, #432]	; (8001324 <StartOledTask+0x49c>)
 8001172:	2204      	movs	r2, #4
 8001174:	701a      	strb	r2, [r3, #0]
			SSD1306_GotoXY(0, 53);
 8001176:	2135      	movs	r1, #53	; 0x35
 8001178:	2000      	movs	r0, #0
 800117a:	f002 f85d 	bl	8003238 <SSD1306_GotoXY>
			SSD1306_Puts("Put shot to feeder", &Font_7x10, 1);
 800117e:	2201      	movs	r2, #1
 8001180:	4969      	ldr	r1, [pc, #420]	; (8001328 <StartOledTask+0x4a0>)
 8001182:	486a      	ldr	r0, [pc, #424]	; (800132c <StartOledTask+0x4a4>)
 8001184:	f002 f8ee 	bl	8003364 <SSD1306_Puts>
			if (flagDirectionPut == 1)
 8001188:	4b69      	ldr	r3, [pc, #420]	; (8001330 <StartOledTask+0x4a8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d12b      	bne.n	80011e8 <StartOledTask+0x360>
			{
				SSD1306_DrawFilledRectangle(20, 0, 75, 50, 0);
 8001190:	2300      	movs	r3, #0
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2332      	movs	r3, #50	; 0x32
 8001196:	224b      	movs	r2, #75	; 0x4b
 8001198:	2100      	movs	r1, #0
 800119a:	2014      	movs	r0, #20
 800119c:	f002 fa6c 	bl	8003678 <SSD1306_DrawFilledRectangle>
				SSD1306_DrawBitmap(25, -animation-12, put, 68, 50, 1);
 80011a0:	4b64      	ldr	r3, [pc, #400]	; (8001334 <StartOledTask+0x4ac>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	f06f 030b 	mvn.w	r3, #11
 80011aa:	1a9b      	subs	r3, r3, r2
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b219      	sxth	r1, r3
 80011b0:	2301      	movs	r3, #1
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	2332      	movs	r3, #50	; 0x32
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2344      	movs	r3, #68	; 0x44
 80011ba:	4a5f      	ldr	r2, [pc, #380]	; (8001338 <StartOledTask+0x4b0>)
 80011bc:	2019      	movs	r0, #25
 80011be:	f001 fe68 	bl	8002e92 <SSD1306_DrawBitmap>
				SSD1306_DrawBitmap(58, -animation+27, put2, 14, 20, 1);
 80011c2:	4b5c      	ldr	r3, [pc, #368]	; (8001334 <StartOledTask+0x4ac>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f1c3 031b 	rsb	r3, r3, #27
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b219      	sxth	r1, r3
 80011d0:	2301      	movs	r3, #1
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	2314      	movs	r3, #20
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	230e      	movs	r3, #14
 80011da:	4a58      	ldr	r2, [pc, #352]	; (800133c <StartOledTask+0x4b4>)
 80011dc:	203a      	movs	r0, #58	; 0x3a
 80011de:	f001 fe58 	bl	8002e92 <SSD1306_DrawBitmap>
				SSD1306_UpdateScreen();
 80011e2:	f001 ff83 	bl	80030ec <SSD1306_UpdateScreen>
				SSD1306_DrawFilledRectangle(20, 0, 75, 50, 0);
				SSD1306_DrawBitmap(25, animation-32, put, 68, 50, 1);
				SSD1306_DrawBitmap(58, 27, put2, 14, 20, 1);
				SSD1306_UpdateScreen();
			}
			break;
 80011e6:	e093      	b.n	8001310 <StartOledTask+0x488>
				SSD1306_DrawFilledRectangle(20, 0, 75, 50, 0);
 80011e8:	2300      	movs	r3, #0
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2332      	movs	r3, #50	; 0x32
 80011ee:	224b      	movs	r2, #75	; 0x4b
 80011f0:	2100      	movs	r1, #0
 80011f2:	2014      	movs	r0, #20
 80011f4:	f002 fa40 	bl	8003678 <SSD1306_DrawFilledRectangle>
				SSD1306_DrawBitmap(25, animation-32, put, 68, 50, 1);
 80011f8:	4b4e      	ldr	r3, [pc, #312]	; (8001334 <StartOledTask+0x4ac>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	3b20      	subs	r3, #32
 8001200:	b29b      	uxth	r3, r3
 8001202:	b219      	sxth	r1, r3
 8001204:	2301      	movs	r3, #1
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	2332      	movs	r3, #50	; 0x32
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2344      	movs	r3, #68	; 0x44
 800120e:	4a4a      	ldr	r2, [pc, #296]	; (8001338 <StartOledTask+0x4b0>)
 8001210:	2019      	movs	r0, #25
 8001212:	f001 fe3e 	bl	8002e92 <SSD1306_DrawBitmap>
				SSD1306_DrawBitmap(58, 27, put2, 14, 20, 1);
 8001216:	2301      	movs	r3, #1
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	2314      	movs	r3, #20
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	230e      	movs	r3, #14
 8001220:	4a46      	ldr	r2, [pc, #280]	; (800133c <StartOledTask+0x4b4>)
 8001222:	211b      	movs	r1, #27
 8001224:	203a      	movs	r0, #58	; 0x3a
 8001226:	f001 fe34 	bl	8002e92 <SSD1306_DrawBitmap>
				SSD1306_UpdateScreen();
 800122a:	f001 ff5f 	bl	80030ec <SSD1306_UpdateScreen>
			break;
 800122e:	e06f      	b.n	8001310 <StartOledTask+0x488>
		case Searching:
			switch(status)
 8001230:	4b43      	ldr	r3, [pc, #268]	; (8001340 <StartOledTask+0x4b8>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <StartOledTask+0x3b6>
 8001238:	2b01      	cmp	r3, #1
 800123a:	d00a      	beq.n	8001252 <StartOledTask+0x3ca>
			case Pouring:
				if(press == 1) statusOled = MenuLayer;
				DrawShotFill();
				break;
			}
			break;
 800123c:	e068      	b.n	8001310 <StartOledTask+0x488>
				if(press == 1) status = Pouring;
 800123e:	4b38      	ldr	r3, [pc, #224]	; (8001320 <StartOledTask+0x498>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d102      	bne.n	800124c <StartOledTask+0x3c4>
 8001246:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <StartOledTask+0x4b8>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
				DrawShotSearching();
 800124c:	f7ff f9d4 	bl	80005f8 <DrawShotSearching>
				break;
 8001250:	e009      	b.n	8001266 <StartOledTask+0x3de>
				if(press == 1) statusOled = MenuLayer;
 8001252:	4b33      	ldr	r3, [pc, #204]	; (8001320 <StartOledTask+0x498>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d102      	bne.n	8001260 <StartOledTask+0x3d8>
 800125a:	4b32      	ldr	r3, [pc, #200]	; (8001324 <StartOledTask+0x49c>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
				DrawShotFill();
 8001260:	f7ff fa0e 	bl	8000680 <DrawShotFill>
				break;
 8001264:	bf00      	nop
			break;
 8001266:	e053      	b.n	8001310 <StartOledTask+0x488>
		case MenuLayer:
			switch(encoderPosition%2)
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <StartOledTask+0x4bc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <StartOledTask+0x3f2>
 8001274:	2b01      	cmp	r3, #1
 8001276:	d025      	beq.n	80012c4 <StartOledTask+0x43c>
				SSD1306_GotoXY(19, 39);
				SSD1306_Puts("Settings", &Font_11x18, 0);
				SSD1306_UpdateScreen();
				break;
			}
			break;
 8001278:	e049      	b.n	800130e <StartOledTask+0x486>
				if(press == 1) statusOled = PutShot;
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <StartOledTask+0x498>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d102      	bne.n	8001288 <StartOledTask+0x400>
 8001282:	4b28      	ldr	r3, [pc, #160]	; (8001324 <StartOledTask+0x49c>)
 8001284:	2202      	movs	r2, #2
 8001286:	701a      	strb	r2, [r3, #0]
				SSD1306_GotoXY(8, 0);
 8001288:	2100      	movs	r1, #0
 800128a:	2008      	movs	r0, #8
 800128c:	f001 ffd4 	bl	8003238 <SSD1306_GotoXY>
				SSD1306_Puts("   MENU   ", &Font_11x18, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	492d      	ldr	r1, [pc, #180]	; (8001348 <StartOledTask+0x4c0>)
 8001294:	482d      	ldr	r0, [pc, #180]	; (800134c <StartOledTask+0x4c4>)
 8001296:	f002 f865 	bl	8003364 <SSD1306_Puts>
				SSD1306_GotoXY(35, 20);
 800129a:	2114      	movs	r1, #20
 800129c:	2023      	movs	r0, #35	; 0x23
 800129e:	f001 ffcb 	bl	8003238 <SSD1306_GotoXY>
				SSD1306_Puts("Start", &Font_11x18, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	4928      	ldr	r1, [pc, #160]	; (8001348 <StartOledTask+0x4c0>)
 80012a6:	482a      	ldr	r0, [pc, #168]	; (8001350 <StartOledTask+0x4c8>)
 80012a8:	f002 f85c 	bl	8003364 <SSD1306_Puts>
				SSD1306_GotoXY(19, 39);
 80012ac:	2127      	movs	r1, #39	; 0x27
 80012ae:	2013      	movs	r0, #19
 80012b0:	f001 ffc2 	bl	8003238 <SSD1306_GotoXY>
				SSD1306_Puts("Settings", &Font_11x18, 1);
 80012b4:	2201      	movs	r2, #1
 80012b6:	4924      	ldr	r1, [pc, #144]	; (8001348 <StartOledTask+0x4c0>)
 80012b8:	4826      	ldr	r0, [pc, #152]	; (8001354 <StartOledTask+0x4cc>)
 80012ba:	f002 f853 	bl	8003364 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 80012be:	f001 ff15 	bl	80030ec <SSD1306_UpdateScreen>
				break;
 80012c2:	e024      	b.n	800130e <StartOledTask+0x486>
				if(press == 1) statusOled = SettingsLayer;
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <StartOledTask+0x498>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d102      	bne.n	80012d2 <StartOledTask+0x44a>
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <StartOledTask+0x49c>)
 80012ce:	2203      	movs	r2, #3
 80012d0:	701a      	strb	r2, [r3, #0]
				SSD1306_GotoXY(8, 0);
 80012d2:	2100      	movs	r1, #0
 80012d4:	2008      	movs	r0, #8
 80012d6:	f001 ffaf 	bl	8003238 <SSD1306_GotoXY>
				SSD1306_Puts("   MENU   ", &Font_11x18, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	491a      	ldr	r1, [pc, #104]	; (8001348 <StartOledTask+0x4c0>)
 80012de:	481b      	ldr	r0, [pc, #108]	; (800134c <StartOledTask+0x4c4>)
 80012e0:	f002 f840 	bl	8003364 <SSD1306_Puts>
				SSD1306_GotoXY(35, 20);
 80012e4:	2114      	movs	r1, #20
 80012e6:	2023      	movs	r0, #35	; 0x23
 80012e8:	f001 ffa6 	bl	8003238 <SSD1306_GotoXY>
				SSD1306_Puts("Start", &Font_11x18, 1);
 80012ec:	2201      	movs	r2, #1
 80012ee:	4916      	ldr	r1, [pc, #88]	; (8001348 <StartOledTask+0x4c0>)
 80012f0:	4817      	ldr	r0, [pc, #92]	; (8001350 <StartOledTask+0x4c8>)
 80012f2:	f002 f837 	bl	8003364 <SSD1306_Puts>
				SSD1306_GotoXY(19, 39);
 80012f6:	2127      	movs	r1, #39	; 0x27
 80012f8:	2013      	movs	r0, #19
 80012fa:	f001 ff9d 	bl	8003238 <SSD1306_GotoXY>
				SSD1306_Puts("Settings", &Font_11x18, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	4911      	ldr	r1, [pc, #68]	; (8001348 <StartOledTask+0x4c0>)
 8001302:	4814      	ldr	r0, [pc, #80]	; (8001354 <StartOledTask+0x4cc>)
 8001304:	f002 f82e 	bl	8003364 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8001308:	f001 fef0 	bl	80030ec <SSD1306_UpdateScreen>
				break;
 800130c:	bf00      	nop
			break;
 800130e:	bf00      	nop
		}

			press = 0;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <StartOledTask+0x498>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
		osDelay(40 / portTICK_PERIOD_MS);
 8001316:	2028      	movs	r0, #40	; 0x28
 8001318:	f005 fa58 	bl	80067cc <osDelay>
		if(old != statusOled) //TODO: Fix this shit
 800131c:	e5ba      	b.n	8000e94 <StartOledTask+0xc>
 800131e:	bf00      	nop
 8001320:	20000418 	.word	0x20000418
 8001324:	20000415 	.word	0x20000415
 8001328:	20000144 	.word	0x20000144
 800132c:	08009398 	.word	0x08009398
 8001330:	200001e0 	.word	0x200001e0
 8001334:	200001e4 	.word	0x200001e4
 8001338:	08009784 	.word	0x08009784
 800133c:	08009948 	.word	0x08009948
 8001340:	20000414 	.word	0x20000414
 8001344:	20000410 	.word	0x20000410
 8001348:	2000014c 	.word	0x2000014c
 800134c:	080093ac 	.word	0x080093ac
 8001350:	080093b8 	.word	0x080093b8
 8001354:	080093c0 	.word	0x080093c0

08001358 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a09      	ldr	r2, [pc, #36]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800136a:	f002 fa97 	bl	800389c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM10) {
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d101      	bne.n	800137c <HAL_TIM_PeriodElapsedCallback+0x24>
		StopPump();
 8001378:	f000 f812 	bl	80013a0 <StopPump>

	}
//	if(htim->Instance == TIM2){
//		StepperCallback();
//	}
	STEPPER_TMR_OVF_ISR(htim);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fca7 	bl	8001cd0 <STEPPER_TMR_OVF_ISR>
  /* USER CODE END Callback 1 */
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40010000 	.word	0x40010000
 8001390:	40014400 	.word	0x40014400

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800139c:	e7fe      	b.n	800139c <Error_Handler+0x8>
	...

080013a0 <StopPump>:
	HAL_GPIO_WritePin(PUMPIN1_GPIO_Port, PUMPIN1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); //TODO: Remove this after tests
	HAL_TIM_Base_Start_IT(&htim10);
}

void StopPump(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	//status = Idle; //TODO: Add status
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //TODO: Remove this after tests
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <StopPump+0x24>)
 80013ac:	f002 fd38 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PUMPIN1_GPIO_Port, PUMPIN1_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2120      	movs	r1, #32
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <StopPump+0x28>)
 80013b6:	f002 fd33 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim10);
 80013ba:	4804      	ldr	r0, [pc, #16]	; (80013cc <StopPump+0x2c>)
 80013bc:	f004 fb64 	bl	8005a88 <HAL_TIM_Base_Stop_IT>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020400 	.word	0x40020400
 80013cc:	2000036c 	.word	0x2000036c

080013d0 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 80013f2:	f7ff f877 	bl	80004e4 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013fc:	e109      	b.n	8001612 <STEPPERS_Init+0x242>
    {
    	for(j=0; j<4; j++)
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001404:	e07f      	b.n	8001506 <STEPPERS_Init+0x136>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 8001406:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800140a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800140e:	488c      	ldr	r0, [pc, #560]	; (8001640 <STEPPERS_Init+0x270>)
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	1a9b      	subs	r3, r3, r2
 8001416:	440b      	add	r3, r1
 8001418:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800141c:	4a89      	ldr	r2, [pc, #548]	; (8001644 <STEPPERS_Init+0x274>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10e      	bne.n	8001440 <STEPPERS_Init+0x70>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b88      	ldr	r3, [pc, #544]	; (8001648 <STEPPERS_Init+0x278>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a87      	ldr	r2, [pc, #540]	; (8001648 <STEPPERS_Init+0x278>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b85      	ldr	r3, [pc, #532]	; (8001648 <STEPPERS_Init+0x278>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	e038      	b.n	80014b2 <STEPPERS_Init+0xe2>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8001440:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001444:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001448:	487d      	ldr	r0, [pc, #500]	; (8001640 <STEPPERS_Init+0x270>)
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	1a9b      	subs	r3, r3, r2
 8001450:	440b      	add	r3, r1
 8001452:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001456:	4a7d      	ldr	r2, [pc, #500]	; (800164c <STEPPERS_Init+0x27c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d10e      	bne.n	800147a <STEPPERS_Init+0xaa>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	4b79      	ldr	r3, [pc, #484]	; (8001648 <STEPPERS_Init+0x278>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4a78      	ldr	r2, [pc, #480]	; (8001648 <STEPPERS_Init+0x278>)
 8001466:	f043 0302 	orr.w	r3, r3, #2
 800146a:	6313      	str	r3, [r2, #48]	; 0x30
 800146c:	4b76      	ldr	r3, [pc, #472]	; (8001648 <STEPPERS_Init+0x278>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	e01b      	b.n	80014b2 <STEPPERS_Init+0xe2>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 800147a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800147e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001482:	486f      	ldr	r0, [pc, #444]	; (8001640 <STEPPERS_Init+0x270>)
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	440b      	add	r3, r1
 800148c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001490:	4a6f      	ldr	r2, [pc, #444]	; (8001650 <STEPPERS_Init+0x280>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10d      	bne.n	80014b2 <STEPPERS_Init+0xe2>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <STEPPERS_Init+0x278>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a6a      	ldr	r2, [pc, #424]	; (8001648 <STEPPERS_Init+0x278>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b68      	ldr	r3, [pc, #416]	; (8001648 <STEPPERS_Init+0x278>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 80014b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80014b6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80014ba:	4861      	ldr	r0, [pc, #388]	; (8001640 <STEPPERS_Init+0x270>)
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	440b      	add	r3, r1
 80014c6:	3308      	adds	r3, #8
 80014c8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80014cc:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 80014da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80014de:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80014e2:	4857      	ldr	r0, [pc, #348]	; (8001640 <STEPPERS_Init+0x270>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80014f0:	f107 0210 	add.w	r2, r7, #16
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f002 faf6 	bl	8003ae8 <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 80014fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001500:	3301      	adds	r3, #1
 8001502:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001506:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800150a:	2b03      	cmp	r3, #3
 800150c:	f67f af7b 	bls.w	8001406 <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8001510:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001514:	494f      	ldr	r1, [pc, #316]	; (8001654 <STEPPERS_Init+0x284>)
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	3311      	adds	r3, #17
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 8001526:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800152a:	494a      	ldr	r1, [pc, #296]	; (8001654 <STEPPERS_Init+0x284>)
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	330f      	adds	r3, #15
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 800153c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001540:	4944      	ldr	r1, [pc, #272]	; (8001654 <STEPPERS_Init+0x284>)
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8001550:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001554:	493f      	ldr	r1, [pc, #252]	; (8001654 <STEPPERS_Init+0x284>)
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	3304      	adds	r3, #4
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8001566:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800156a:	493a      	ldr	r1, [pc, #232]	; (8001654 <STEPPERS_Init+0x284>)
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	3308      	adds	r3, #8
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 800157c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001580:	4934      	ldr	r1, [pc, #208]	; (8001654 <STEPPERS_Init+0x284>)
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	330e      	adds	r3, #14
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8001592:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001596:	492a      	ldr	r1, [pc, #168]	; (8001640 <STEPPERS_Init+0x270>)
 8001598:	4613      	mov	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	1a9b      	subs	r3, r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	331b      	adds	r3, #27
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d00b      	beq.n	80015c2 <STEPPERS_Init+0x1f2>
 80015aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015ae:	4924      	ldr	r1, [pc, #144]	; (8001640 <STEPPERS_Init+0x270>)
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	331b      	adds	r3, #27
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10b      	bne.n	80015da <STEPPERS_Init+0x20a>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 80015c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015c6:	4923      	ldr	r1, [pc, #140]	; (8001654 <STEPPERS_Init+0x284>)
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	3310      	adds	r3, #16
 80015d4:	2204      	movs	r2, #4
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e016      	b.n	8001608 <STEPPERS_Init+0x238>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 80015da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015de:	4918      	ldr	r1, [pc, #96]	; (8001640 <STEPPERS_Init+0x270>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	331b      	adds	r3, #27
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d10a      	bne.n	8001608 <STEPPERS_Init+0x238>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 80015f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015f6:	4917      	ldr	r1, [pc, #92]	; (8001654 <STEPPERS_Init+0x284>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	3310      	adds	r3, #16
 8001604:	2208      	movs	r2, #8
 8001606:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 8001608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800160c:	3301      	adds	r3, #1
 800160e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001616:	2b00      	cmp	r3, #0
 8001618:	f43f aef1 	beq.w	80013fe <STEPPERS_Init+0x2e>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800161c:	2301      	movs	r3, #1
 800161e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <STEPPERS_Init+0x27c>)
 8001634:	f002 fa58 	bl	8003ae8 <HAL_GPIO_Init>
}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	08009a00 	.word	0x08009a00
 8001644:	40020000 	.word	0x40020000
 8001648:	40023800 	.word	0x40023800
 800164c:	40020400 	.word	0x40020400
 8001650:	40020800 	.word	0x40020800
 8001654:	2000041c 	.word	0x2000041c

08001658 <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
    uint32_t ARR_Value = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 800167c:	f7ff fea8 	bl	80013d0 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 8001680:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168c:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2263      	movs	r2, #99	; 0x63
 8001692:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	1e5a      	subs	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2280      	movs	r2, #128	; 0x80
 80016ac:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f004 f938 	bl	8005924 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b8:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f004 fcbc 	bl	800603e <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	4619      	mov	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f004 fed7 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f004 f972 	bl	80059c4 <HAL_TIM_Base_Start_IT>
    }
}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	; 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <STEPPER_One_Step>:
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
}

static void STEPPER_One_Step(uint8_t i)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 80016f2:	79fa      	ldrb	r2, [r7, #7]
 80016f4:	4999      	ldr	r1, [pc, #612]	; (800195c <STEPPER_One_Step+0x274>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	1a9b      	subs	r3, r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	331a      	adds	r3, #26
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	f040 81c4 	bne.w	8001a92 <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	4993      	ldr	r1, [pc, #588]	; (800195c <STEPPER_One_Step+0x274>)
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	1a9b      	subs	r3, r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	331b      	adds	r3, #27
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	f040 8088 	bne.w	8001832 <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8001722:	79fa      	ldrb	r2, [r7, #7]
 8001724:	498d      	ldr	r1, [pc, #564]	; (800195c <STEPPER_One_Step+0x274>)
 8001726:	4613      	mov	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	79fa      	ldrb	r2, [r7, #7]
 8001734:	4989      	ldr	r1, [pc, #548]	; (800195c <STEPPER_One_Step+0x274>)
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	3310      	adds	r3, #16
 8001742:	8819      	ldrh	r1, [r3, #0]
 8001744:	79fa      	ldrb	r2, [r7, #7]
 8001746:	4c86      	ldr	r4, [pc, #536]	; (8001960 <STEPPER_One_Step+0x278>)
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4423      	add	r3, r4
 8001752:	330f      	adds	r3, #15
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	4b82      	ldr	r3, [pc, #520]	; (8001964 <STEPPER_One_Step+0x27c>)
 800175a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800175e:	461a      	mov	r2, r3
 8001760:	f002 fb5e 	bl	8003e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8001764:	79fa      	ldrb	r2, [r7, #7]
 8001766:	497d      	ldr	r1, [pc, #500]	; (800195c <STEPPER_One_Step+0x274>)
 8001768:	4613      	mov	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	1a9b      	subs	r3, r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	3304      	adds	r3, #4
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	79fa      	ldrb	r2, [r7, #7]
 8001778:	4978      	ldr	r1, [pc, #480]	; (800195c <STEPPER_One_Step+0x274>)
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	3312      	adds	r3, #18
 8001786:	8819      	ldrh	r1, [r3, #0]
 8001788:	79fa      	ldrb	r2, [r7, #7]
 800178a:	4c75      	ldr	r4, [pc, #468]	; (8001960 <STEPPER_One_Step+0x278>)
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4423      	add	r3, r4
 8001796:	330f      	adds	r3, #15
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	4a72      	ldr	r2, [pc, #456]	; (8001964 <STEPPER_One_Step+0x27c>)
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	785b      	ldrb	r3, [r3, #1]
 80017a2:	461a      	mov	r2, r3
 80017a4:	f002 fb3c 	bl	8003e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80017a8:	79fa      	ldrb	r2, [r7, #7]
 80017aa:	496c      	ldr	r1, [pc, #432]	; (800195c <STEPPER_One_Step+0x274>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	3308      	adds	r3, #8
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	79fa      	ldrb	r2, [r7, #7]
 80017bc:	4967      	ldr	r1, [pc, #412]	; (800195c <STEPPER_One_Step+0x274>)
 80017be:	4613      	mov	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	3314      	adds	r3, #20
 80017ca:	8819      	ldrh	r1, [r3, #0]
 80017cc:	79fa      	ldrb	r2, [r7, #7]
 80017ce:	4c64      	ldr	r4, [pc, #400]	; (8001960 <STEPPER_One_Step+0x278>)
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4423      	add	r3, r4
 80017da:	330f      	adds	r3, #15
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	4a61      	ldr	r2, [pc, #388]	; (8001964 <STEPPER_One_Step+0x27c>)
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	789b      	ldrb	r3, [r3, #2]
 80017e6:	461a      	mov	r2, r3
 80017e8:	f002 fb1a 	bl	8003e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80017ec:	79fa      	ldrb	r2, [r7, #7]
 80017ee:	495b      	ldr	r1, [pc, #364]	; (800195c <STEPPER_One_Step+0x274>)
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	330c      	adds	r3, #12
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	79fa      	ldrb	r2, [r7, #7]
 8001800:	4956      	ldr	r1, [pc, #344]	; (800195c <STEPPER_One_Step+0x274>)
 8001802:	4613      	mov	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	3316      	adds	r3, #22
 800180e:	8819      	ldrh	r1, [r3, #0]
 8001810:	79fa      	ldrb	r2, [r7, #7]
 8001812:	4c53      	ldr	r4, [pc, #332]	; (8001960 <STEPPER_One_Step+0x278>)
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4423      	add	r3, r4
 800181e:	330f      	adds	r3, #15
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4a50      	ldr	r2, [pc, #320]	; (8001964 <STEPPER_One_Step+0x27c>)
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	78db      	ldrb	r3, [r3, #3]
 800182a:	461a      	mov	r2, r3
 800182c:	f002 faf8 	bl	8003e20 <HAL_GPIO_WritePin>
 8001830:	e12f      	b.n	8001a92 <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 8001832:	79fa      	ldrb	r2, [r7, #7]
 8001834:	4949      	ldr	r1, [pc, #292]	; (800195c <STEPPER_One_Step+0x274>)
 8001836:	4613      	mov	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	331b      	adds	r3, #27
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	f040 8091 	bne.w	800196c <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 800184a:	79fa      	ldrb	r2, [r7, #7]
 800184c:	4943      	ldr	r1, [pc, #268]	; (800195c <STEPPER_One_Step+0x274>)
 800184e:	4613      	mov	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	79fa      	ldrb	r2, [r7, #7]
 800185c:	493f      	ldr	r1, [pc, #252]	; (800195c <STEPPER_One_Step+0x274>)
 800185e:	4613      	mov	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	1a9b      	subs	r3, r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	440b      	add	r3, r1
 8001868:	3310      	adds	r3, #16
 800186a:	8819      	ldrh	r1, [r3, #0]
 800186c:	79fa      	ldrb	r2, [r7, #7]
 800186e:	4c3c      	ldr	r4, [pc, #240]	; (8001960 <STEPPER_One_Step+0x278>)
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4423      	add	r3, r4
 800187a:	330f      	adds	r3, #15
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <STEPPER_One_Step+0x280>)
 8001882:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001886:	461a      	mov	r2, r3
 8001888:	f002 faca 	bl	8003e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 800188c:	79fa      	ldrb	r2, [r7, #7]
 800188e:	4933      	ldr	r1, [pc, #204]	; (800195c <STEPPER_One_Step+0x274>)
 8001890:	4613      	mov	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	3304      	adds	r3, #4
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	79fa      	ldrb	r2, [r7, #7]
 80018a0:	492e      	ldr	r1, [pc, #184]	; (800195c <STEPPER_One_Step+0x274>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	3312      	adds	r3, #18
 80018ae:	8819      	ldrh	r1, [r3, #0]
 80018b0:	79fa      	ldrb	r2, [r7, #7]
 80018b2:	4c2b      	ldr	r4, [pc, #172]	; (8001960 <STEPPER_One_Step+0x278>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4423      	add	r3, r4
 80018be:	330f      	adds	r3, #15
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	4a29      	ldr	r2, [pc, #164]	; (8001968 <STEPPER_One_Step+0x280>)
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	785b      	ldrb	r3, [r3, #1]
 80018ca:	461a      	mov	r2, r3
 80018cc:	f002 faa8 	bl	8003e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80018d0:	79fa      	ldrb	r2, [r7, #7]
 80018d2:	4922      	ldr	r1, [pc, #136]	; (800195c <STEPPER_One_Step+0x274>)
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	3308      	adds	r3, #8
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	79fa      	ldrb	r2, [r7, #7]
 80018e4:	491d      	ldr	r1, [pc, #116]	; (800195c <STEPPER_One_Step+0x274>)
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	3314      	adds	r3, #20
 80018f2:	8819      	ldrh	r1, [r3, #0]
 80018f4:	79fa      	ldrb	r2, [r7, #7]
 80018f6:	4c1a      	ldr	r4, [pc, #104]	; (8001960 <STEPPER_One_Step+0x278>)
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4423      	add	r3, r4
 8001902:	330f      	adds	r3, #15
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	4a18      	ldr	r2, [pc, #96]	; (8001968 <STEPPER_One_Step+0x280>)
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	789b      	ldrb	r3, [r3, #2]
 800190e:	461a      	mov	r2, r3
 8001910:	f002 fa86 	bl	8003e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	4911      	ldr	r1, [pc, #68]	; (800195c <STEPPER_One_Step+0x274>)
 8001918:	4613      	mov	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	330c      	adds	r3, #12
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	79fa      	ldrb	r2, [r7, #7]
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <STEPPER_One_Step+0x274>)
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	1a9b      	subs	r3, r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	3316      	adds	r3, #22
 8001936:	8819      	ldrh	r1, [r3, #0]
 8001938:	79fa      	ldrb	r2, [r7, #7]
 800193a:	4c09      	ldr	r4, [pc, #36]	; (8001960 <STEPPER_One_Step+0x278>)
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4423      	add	r3, r4
 8001946:	330f      	adds	r3, #15
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	4a07      	ldr	r2, [pc, #28]	; (8001968 <STEPPER_One_Step+0x280>)
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	78db      	ldrb	r3, [r3, #3]
 8001952:	461a      	mov	r2, r3
 8001954:	f002 fa64 	bl	8003e20 <HAL_GPIO_WritePin>
 8001958:	e09b      	b.n	8001a92 <STEPPER_One_Step+0x3aa>
 800195a:	bf00      	nop
 800195c:	08009a00 	.word	0x08009a00
 8001960:	2000041c 	.word	0x2000041c
 8001964:	20000018 	.word	0x20000018
 8001968:	20000028 	.word	0x20000028
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 800196c:	79fa      	ldrb	r2, [r7, #7]
 800196e:	4988      	ldr	r1, [pc, #544]	; (8001b90 <STEPPER_One_Step+0x4a8>)
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	331b      	adds	r3, #27
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b02      	cmp	r3, #2
 8001980:	f040 8087 	bne.w	8001a92 <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8001984:	79fa      	ldrb	r2, [r7, #7]
 8001986:	4982      	ldr	r1, [pc, #520]	; (8001b90 <STEPPER_One_Step+0x4a8>)
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	1a9b      	subs	r3, r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	79fa      	ldrb	r2, [r7, #7]
 8001996:	497e      	ldr	r1, [pc, #504]	; (8001b90 <STEPPER_One_Step+0x4a8>)
 8001998:	4613      	mov	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	3310      	adds	r3, #16
 80019a4:	8819      	ldrh	r1, [r3, #0]
 80019a6:	79fa      	ldrb	r2, [r7, #7]
 80019a8:	4c7a      	ldr	r4, [pc, #488]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4423      	add	r3, r4
 80019b4:	330f      	adds	r3, #15
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b77      	ldr	r3, [pc, #476]	; (8001b98 <STEPPER_One_Step+0x4b0>)
 80019bc:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80019c0:	461a      	mov	r2, r3
 80019c2:	f002 fa2d 	bl	8003e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80019c6:	79fa      	ldrb	r2, [r7, #7]
 80019c8:	4971      	ldr	r1, [pc, #452]	; (8001b90 <STEPPER_One_Step+0x4a8>)
 80019ca:	4613      	mov	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	1a9b      	subs	r3, r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	3304      	adds	r3, #4
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	79fa      	ldrb	r2, [r7, #7]
 80019da:	496d      	ldr	r1, [pc, #436]	; (8001b90 <STEPPER_One_Step+0x4a8>)
 80019dc:	4613      	mov	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	3312      	adds	r3, #18
 80019e8:	8819      	ldrh	r1, [r3, #0]
 80019ea:	79fa      	ldrb	r2, [r7, #7]
 80019ec:	4c69      	ldr	r4, [pc, #420]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4423      	add	r3, r4
 80019f8:	330f      	adds	r3, #15
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4a66      	ldr	r2, [pc, #408]	; (8001b98 <STEPPER_One_Step+0x4b0>)
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	785b      	ldrb	r3, [r3, #1]
 8001a04:	461a      	mov	r2, r3
 8001a06:	f002 fa0b 	bl	8003e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8001a0a:	79fa      	ldrb	r2, [r7, #7]
 8001a0c:	4960      	ldr	r1, [pc, #384]	; (8001b90 <STEPPER_One_Step+0x4a8>)
 8001a0e:	4613      	mov	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	1a9b      	subs	r3, r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	3308      	adds	r3, #8
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	79fa      	ldrb	r2, [r7, #7]
 8001a1e:	495c      	ldr	r1, [pc, #368]	; (8001b90 <STEPPER_One_Step+0x4a8>)
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	3314      	adds	r3, #20
 8001a2c:	8819      	ldrh	r1, [r3, #0]
 8001a2e:	79fa      	ldrb	r2, [r7, #7]
 8001a30:	4c58      	ldr	r4, [pc, #352]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4423      	add	r3, r4
 8001a3c:	330f      	adds	r3, #15
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4a55      	ldr	r2, [pc, #340]	; (8001b98 <STEPPER_One_Step+0x4b0>)
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	789b      	ldrb	r3, [r3, #2]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f002 f9e9 	bl	8003e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8001a4e:	79fa      	ldrb	r2, [r7, #7]
 8001a50:	494f      	ldr	r1, [pc, #316]	; (8001b90 <STEPPER_One_Step+0x4a8>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	330c      	adds	r3, #12
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	79fa      	ldrb	r2, [r7, #7]
 8001a62:	494b      	ldr	r1, [pc, #300]	; (8001b90 <STEPPER_One_Step+0x4a8>)
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3316      	adds	r3, #22
 8001a70:	8819      	ldrh	r1, [r3, #0]
 8001a72:	79fa      	ldrb	r2, [r7, #7]
 8001a74:	4c47      	ldr	r4, [pc, #284]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4423      	add	r3, r4
 8001a80:	330f      	adds	r3, #15
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4a44      	ldr	r2, [pc, #272]	; (8001b98 <STEPPER_One_Step+0x4b0>)
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	78db      	ldrb	r3, [r3, #3]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f002 f9c7 	bl	8003e20 <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 8001a92:	79fa      	ldrb	r2, [r7, #7]
 8001a94:	493f      	ldr	r1, [pc, #252]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3311      	adds	r3, #17
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d132      	bne.n	8001b0e <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8001aa8:	79fa      	ldrb	r2, [r7, #7]
 8001aaa:	493a      	ldr	r1, [pc, #232]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	330f      	adds	r3, #15
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d112      	bne.n	8001ae4 <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 8001abe:	79f9      	ldrb	r1, [r7, #7]
 8001ac0:	79fa      	ldrb	r2, [r7, #7]
 8001ac2:	4834      	ldr	r0, [pc, #208]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4403      	add	r3, r0
 8001ace:	3310      	adds	r3, #16
 8001ad0:	7818      	ldrb	r0, [r3, #0]
 8001ad2:	4930      	ldr	r1, [pc, #192]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	330f      	adds	r3, #15
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8001ae4:	79fa      	ldrb	r2, [r7, #7]
 8001ae6:	492b      	ldr	r1, [pc, #172]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	330f      	adds	r3, #15
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b2d8      	uxtb	r0, r3
 8001afa:	4926      	ldr	r1, [pc, #152]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	330f      	adds	r3, #15
 8001b08:	4602      	mov	r2, r0
 8001b0a:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 8001b0c:	e03c      	b.n	8001b88 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 8001b0e:	79fa      	ldrb	r2, [r7, #7]
 8001b10:	4920      	ldr	r1, [pc, #128]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3311      	adds	r3, #17
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d131      	bne.n	8001b88 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 8001b24:	79fa      	ldrb	r2, [r7, #7]
 8001b26:	491b      	ldr	r1, [pc, #108]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	330f      	adds	r3, #15
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	b2d8      	uxtb	r0, r3
 8001b3a:	4916      	ldr	r1, [pc, #88]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	330f      	adds	r3, #15
 8001b48:	4602      	mov	r2, r0
 8001b4a:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 8001b4c:	79fa      	ldrb	r2, [r7, #7]
 8001b4e:	4911      	ldr	r1, [pc, #68]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	330f      	adds	r3, #15
 8001b5c:	7819      	ldrb	r1, [r3, #0]
 8001b5e:	79fa      	ldrb	r2, [r7, #7]
 8001b60:	480c      	ldr	r0, [pc, #48]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4403      	add	r3, r0
 8001b6c:	3310      	adds	r3, #16
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4299      	cmp	r1, r3
 8001b72:	d109      	bne.n	8001b88 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 8001b74:	79fa      	ldrb	r2, [r7, #7]
 8001b76:	4907      	ldr	r1, [pc, #28]	; (8001b94 <STEPPER_One_Step+0x4ac>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	330f      	adds	r3, #15
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}
 8001b90:	08009a00 	.word	0x08009a00
 8001b94:	2000041c 	.word	0x2000041c
 8001b98:	20000038 	.word	0x20000038

08001b9c <STEPPER_Step_NonBlocking>:
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
}

void STEPPER_Step_NonBlocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	71bb      	strb	r3, [r7, #6]
	gs_STEPPER_info[au8_STEPPER_Instance].Steps += au32_Steps;
 8001bac:	79fa      	ldrb	r2, [r7, #7]
 8001bae:	4910      	ldr	r1, [pc, #64]	; (8001bf0 <STEPPER_Step_NonBlocking+0x54>)
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	6819      	ldr	r1, [r3, #0]
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	4419      	add	r1, r3
 8001bc2:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <STEPPER_Step_NonBlocking+0x54>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4403      	add	r3, r0
 8001bce:	6019      	str	r1, [r3, #0]
	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 8001bd0:	79fa      	ldrb	r2, [r7, #7]
 8001bd2:	4907      	ldr	r1, [pc, #28]	; (8001bf0 <STEPPER_Step_NonBlocking+0x54>)
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	3311      	adds	r3, #17
 8001be0:	79ba      	ldrb	r2, [r7, #6]
 8001be2:	701a      	strb	r2, [r3, #0]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	2000041c 	.word	0x2000041c

08001bf4 <STEPPER_Stop>:

void STEPPER_Stop(uint8_t au8_STEPPER_Instance)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
	gs_STEPPER_info[au8_STEPPER_Instance].Steps = 0;
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	4931      	ldr	r1, [pc, #196]	; (8001cc8 <STEPPER_Stop+0xd4>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(STEPPER_CfgParam[au8_STEPPER_Instance].IN_GPIO[0], STEPPER_CfgParam[au8_STEPPER_Instance].IN_PIN[0], GPIO_PIN_RESET);
 8001c10:	79fa      	ldrb	r2, [r7, #7]
 8001c12:	492e      	ldr	r1, [pc, #184]	; (8001ccc <STEPPER_Stop+0xd8>)
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	79fa      	ldrb	r2, [r7, #7]
 8001c22:	492a      	ldr	r1, [pc, #168]	; (8001ccc <STEPPER_Stop+0xd8>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3310      	adds	r3, #16
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	2200      	movs	r2, #0
 8001c34:	4619      	mov	r1, r3
 8001c36:	f002 f8f3 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEPPER_CfgParam[au8_STEPPER_Instance].IN_GPIO[1], STEPPER_CfgParam[au8_STEPPER_Instance].IN_PIN[1], GPIO_PIN_RESET);
 8001c3a:	79fa      	ldrb	r2, [r7, #7]
 8001c3c:	4923      	ldr	r1, [pc, #140]	; (8001ccc <STEPPER_Stop+0xd8>)
 8001c3e:	4613      	mov	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	3304      	adds	r3, #4
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	79fa      	ldrb	r2, [r7, #7]
 8001c4e:	491f      	ldr	r1, [pc, #124]	; (8001ccc <STEPPER_Stop+0xd8>)
 8001c50:	4613      	mov	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	1a9b      	subs	r3, r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	3312      	adds	r3, #18
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4619      	mov	r1, r3
 8001c62:	f002 f8dd 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEPPER_CfgParam[au8_STEPPER_Instance].IN_GPIO[2], STEPPER_CfgParam[au8_STEPPER_Instance].IN_PIN[2], GPIO_PIN_RESET);
 8001c66:	79fa      	ldrb	r2, [r7, #7]
 8001c68:	4918      	ldr	r1, [pc, #96]	; (8001ccc <STEPPER_Stop+0xd8>)
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	3308      	adds	r3, #8
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	79fa      	ldrb	r2, [r7, #7]
 8001c7a:	4914      	ldr	r1, [pc, #80]	; (8001ccc <STEPPER_Stop+0xd8>)
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	3314      	adds	r3, #20
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f002 f8c7 	bl	8003e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEPPER_CfgParam[au8_STEPPER_Instance].IN_GPIO[3], STEPPER_CfgParam[au8_STEPPER_Instance].IN_PIN[3], GPIO_PIN_RESET);
 8001c92:	79fa      	ldrb	r2, [r7, #7]
 8001c94:	490d      	ldr	r1, [pc, #52]	; (8001ccc <STEPPER_Stop+0xd8>)
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	1a9b      	subs	r3, r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	330c      	adds	r3, #12
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	79fa      	ldrb	r2, [r7, #7]
 8001ca6:	4909      	ldr	r1, [pc, #36]	; (8001ccc <STEPPER_Stop+0xd8>)
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3316      	adds	r3, #22
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f002 f8b1 	bl	8003e20 <HAL_GPIO_WritePin>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000041c 	.word	0x2000041c
 8001ccc:	08009a00 	.word	0x08009a00

08001cd0 <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d162      	bne.n	8001dac <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73fb      	strb	r3, [r7, #15]
 8001cea:	e05c      	b.n	8001da6 <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 8001cec:	7bfa      	ldrb	r2, [r7, #15]
 8001cee:	4931      	ldr	r1, [pc, #196]	; (8001db4 <STEPPER_TMR_OVF_ISR+0xe4>)
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	6819      	ldr	r1, [r3, #0]
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	482c      	ldr	r0, [pc, #176]	; (8001db4 <STEPPER_TMR_OVF_ISR+0xe4>)
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4403      	add	r3, r0
 8001d0c:	3308      	adds	r3, #8
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4299      	cmp	r1, r3
 8001d12:	d333      	bcc.n	8001d7c <STEPPER_TMR_OVF_ISR+0xac>
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	4927      	ldr	r1, [pc, #156]	; (8001db4 <STEPPER_TMR_OVF_ISR+0xe4>)
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	330e      	adds	r3, #14
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d028      	beq.n	8001d7c <STEPPER_TMR_OVF_ISR+0xac>
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	4921      	ldr	r1, [pc, #132]	; (8001db4 <STEPPER_TMR_OVF_ISR+0xe4>)
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d01e      	beq.n	8001d7c <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fcd1 	bl	80016e8 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	491a      	ldr	r1, [pc, #104]	; (8001db4 <STEPPER_TMR_OVF_ISR+0xe4>)
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	1e59      	subs	r1, r3, #1
 8001d58:	4816      	ldr	r0, [pc, #88]	; (8001db4 <STEPPER_TMR_OVF_ISR+0xe4>)
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4403      	add	r3, r0
 8001d64:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	4912      	ldr	r1, [pc, #72]	; (8001db4 <STEPPER_TMR_OVF_ISR+0xe4>)
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	3304      	adds	r3, #4
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e011      	b.n	8001da0 <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	490d      	ldr	r1, [pc, #52]	; (8001db4 <STEPPER_TMR_OVF_ISR+0xe4>)
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	1c59      	adds	r1, r3, #1
 8001d90:	4808      	ldr	r0, [pc, #32]	; (8001db4 <STEPPER_TMR_OVF_ISR+0xe4>)
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4403      	add	r3, r0
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	3301      	adds	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d09f      	beq.n	8001cec <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 8001dac:	bf00      	nop
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000041c 	.word	0x2000041c

08001db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_MspInit+0x54>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a11      	ldr	r2, [pc, #68]	; (8001e0c <HAL_MspInit+0x54>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_MspInit+0x54>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_MspInit+0x54>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_MspInit+0x54>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_MspInit+0x54>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	210f      	movs	r1, #15
 8001dfa:	f06f 0001 	mvn.w	r0, #1
 8001dfe:	f001 fe49 	bl	8003a94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800

08001e10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08c      	sub	sp, #48	; 0x30
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a3a      	ldr	r2, [pc, #232]	; (8001f18 <HAL_I2C_MspInit+0x108>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d12c      	bne.n	8001e8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <HAL_I2C_MspInit+0x10c>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a38      	ldr	r2, [pc, #224]	; (8001f1c <HAL_I2C_MspInit+0x10c>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b36      	ldr	r3, [pc, #216]	; (8001f1c <HAL_I2C_MspInit+0x10c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e4e:	23c0      	movs	r3, #192	; 0xc0
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e52:	2312      	movs	r3, #18
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	482d      	ldr	r0, [pc, #180]	; (8001f20 <HAL_I2C_MspInit+0x110>)
 8001e6a:	f001 fe3d 	bl	8003ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <HAL_I2C_MspInit+0x10c>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a29      	ldr	r2, [pc, #164]	; (8001f1c <HAL_I2C_MspInit+0x10c>)
 8001e78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_I2C_MspInit+0x10c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e8a:	e041      	b.n	8001f10 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a24      	ldr	r2, [pc, #144]	; (8001f24 <HAL_I2C_MspInit+0x114>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d13c      	bne.n	8001f10 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_I2C_MspInit+0x10c>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <HAL_I2C_MspInit+0x10c>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_I2C_MspInit+0x10c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb8:	2312      	movs	r3, #18
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4814      	ldr	r0, [pc, #80]	; (8001f20 <HAL_I2C_MspInit+0x110>)
 8001ed0:	f001 fe0a 	bl	8003ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ed4:	2308      	movs	r3, #8
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed8:	2312      	movs	r3, #18
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001ee4:	2309      	movs	r3, #9
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	480c      	ldr	r0, [pc, #48]	; (8001f20 <HAL_I2C_MspInit+0x110>)
 8001ef0:	f001 fdfa 	bl	8003ae8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_I2C_MspInit+0x10c>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_I2C_MspInit+0x10c>)
 8001efe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f02:	6413      	str	r3, [r2, #64]	; 0x40
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_I2C_MspInit+0x10c>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	bf00      	nop
 8001f12:	3730      	adds	r7, #48	; 0x30
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40005400 	.word	0x40005400
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40005800 	.word	0x40005800

08001f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d116      	bne.n	8001f68 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa8>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a23      	ldr	r2, [pc, #140]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa8>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa8>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2105      	movs	r1, #5
 8001f5a:	201c      	movs	r0, #28
 8001f5c:	f001 fd9a 	bl	8003a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f60:	201c      	movs	r0, #28
 8001f62:	f001 fdb3 	bl	8003acc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001f66:	e02e      	b.n	8001fc6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <HAL_TIM_Base_MspInit+0xac>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d116      	bne.n	8001fa0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa8>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	4a15      	ldr	r2, [pc, #84]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa8>)
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f80:	6453      	str	r3, [r2, #68]	; 0x44
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa8>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	210f      	movs	r1, #15
 8001f92:	2019      	movs	r0, #25
 8001f94:	f001 fd7e 	bl	8003a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f98:	2019      	movs	r0, #25
 8001f9a:	f001 fd97 	bl	8003acc <HAL_NVIC_EnableIRQ>
}
 8001f9e:	e012      	b.n	8001fc6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <HAL_TIM_Base_MspInit+0xb0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d10d      	bne.n	8001fc6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa8>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa8>)
 8001fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa8>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
}
 8001fc6:	bf00      	nop
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	40014800 	.word	0x40014800

08001fdc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_TIM_Encoder_MspInit+0x94>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d133      	bne.n	8002066 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <HAL_TIM_Encoder_MspInit+0x98>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <HAL_TIM_Encoder_MspInit+0x98>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_TIM_Encoder_MspInit+0x98>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_TIM_Encoder_MspInit+0x98>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a14      	ldr	r2, [pc, #80]	; (8002074 <HAL_TIM_Encoder_MspInit+0x98>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_TIM_Encoder_MspInit+0x98>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002036:	23c0      	movs	r3, #192	; 0xc0
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800203e:	2301      	movs	r3, #1
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002046:	2302      	movs	r3, #2
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	4809      	ldr	r0, [pc, #36]	; (8002078 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002052:	f001 fd49 	bl	8003ae8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2105      	movs	r1, #5
 800205a:	201d      	movs	r0, #29
 800205c:	f001 fd1a 	bl	8003a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002060:	201d      	movs	r0, #29
 8002062:	f001 fd33 	bl	8003acc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	; 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40000400 	.word	0x40000400
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000

0800207c <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM4)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <HAL_TIM_OnePulse_MspInit+0x3c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10d      	bne.n	80020aa <HAL_TIM_OnePulse_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_TIM_OnePulse_MspInit+0x40>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_TIM_OnePulse_MspInit+0x40>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <HAL_TIM_OnePulse_MspInit+0x40>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08c      	sub	sp, #48	; 0x30
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	4b2e      	ldr	r3, [pc, #184]	; (8002190 <HAL_InitTick+0xd0>)
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	4a2d      	ldr	r2, [pc, #180]	; (8002190 <HAL_InitTick+0xd0>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6453      	str	r3, [r2, #68]	; 0x44
 80020e0:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <HAL_InitTick+0xd0>)
 80020e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020ec:	f107 020c 	add.w	r2, r7, #12
 80020f0:	f107 0310 	add.w	r3, r7, #16
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f003 fbe2 	bl	80058c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020fc:	f003 fbcc 	bl	8005898 <HAL_RCC_GetPCLK2Freq>
 8002100:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	4a23      	ldr	r2, [pc, #140]	; (8002194 <HAL_InitTick+0xd4>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0c9b      	lsrs	r3, r3, #18
 800210c:	3b01      	subs	r3, #1
 800210e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_InitTick+0xd8>)
 8002112:	4a22      	ldr	r2, [pc, #136]	; (800219c <HAL_InitTick+0xdc>)
 8002114:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_InitTick+0xd8>)
 8002118:	f240 32e7 	movw	r2, #999	; 0x3e7
 800211c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800211e:	4a1e      	ldr	r2, [pc, #120]	; (8002198 <HAL_InitTick+0xd8>)
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002124:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <HAL_InitTick+0xd8>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_InitTick+0xd8>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_InitTick+0xd8>)
 8002132:	2200      	movs	r2, #0
 8002134:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002136:	4818      	ldr	r0, [pc, #96]	; (8002198 <HAL_InitTick+0xd8>)
 8002138:	f003 fbf4 	bl	8005924 <HAL_TIM_Base_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002146:	2b00      	cmp	r3, #0
 8002148:	d11b      	bne.n	8002182 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800214a:	4813      	ldr	r0, [pc, #76]	; (8002198 <HAL_InitTick+0xd8>)
 800214c:	f003 fc3a 	bl	80059c4 <HAL_TIM_Base_Start_IT>
 8002150:	4603      	mov	r3, r0
 8002152:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800215a:	2b00      	cmp	r3, #0
 800215c:	d111      	bne.n	8002182 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800215e:	2019      	movs	r0, #25
 8002160:	f001 fcb4 	bl	8003acc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b0f      	cmp	r3, #15
 8002168:	d808      	bhi.n	800217c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800216a:	2200      	movs	r2, #0
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	2019      	movs	r0, #25
 8002170:	f001 fc90 	bl	8003a94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002174:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_InitTick+0xe0>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e002      	b.n	8002182 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002182:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002186:	4618      	mov	r0, r3
 8002188:	3730      	adds	r7, #48	; 0x30
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	431bde83 	.word	0x431bde83
 8002198:	20000430 	.word	0x20000430
 800219c:	40010000 	.word	0x40010000
 80021a0:	20000154 	.word	0x20000154

080021a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <NMI_Handler+0x4>

080021aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <HardFault_Handler+0x4>

080021b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <MemManage_Handler+0x4>

080021b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ba:	e7fe      	b.n	80021ba <BusFault_Handler+0x4>

080021bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <UsageFault_Handler+0x4>

080021c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021d4:	4803      	ldr	r0, [pc, #12]	; (80021e4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80021d6:	f003 fe2a 	bl	8005e2e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80021da:	4803      	ldr	r0, [pc, #12]	; (80021e8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80021dc:	f003 fe27 	bl	8005e2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000430 	.word	0x20000430
 80021e8:	2000036c 	.word	0x2000036c

080021ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <TIM2_IRQHandler+0x10>)
 80021f2:	f003 fe1c 	bl	8005e2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000294 	.word	0x20000294

08002200 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <TIM3_IRQHandler+0x10>)
 8002206:	f003 fe12 	bl	8005e2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200002dc 	.word	0x200002dc

08002214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <SystemInit+0x20>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <SystemInit+0x20>)
 8002220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <tofInit>:
// Opens a file system handle to the I2C device
// reads the calibration data and sets the device
// into auto sensing mode
//
int tofInit(int bLongRange)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	return initSensor(bLongRange); // finally, initialize the magic numbers in the sensor
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fd09 	bl	8002c58 <initSensor>
 8002246:	4603      	mov	r3, r0

} /* tofInit() */
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <readReg16>:

//
// Read a pair of registers as a 16-bit value
//
static unsigned short readReg16(uint8_t ucAddr)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af02      	add	r7, sp, #8
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp[2];

	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 800225a:	1dfa      	adds	r2, r7, #7
 800225c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2301      	movs	r3, #1
 8002264:	2152      	movs	r1, #82	; 0x52
 8002266:	480c      	ldr	r0, [pc, #48]	; (8002298 <readReg16+0x48>)
 8002268:	f001 ff52 	bl	8004110 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, ucTemp, 2, 1000);
 800226c:	f107 020c 	add.w	r2, r7, #12
 8002270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2302      	movs	r3, #2
 8002278:	2153      	movs	r1, #83	; 0x53
 800227a:	4807      	ldr	r0, [pc, #28]	; (8002298 <readReg16+0x48>)
 800227c:	f002 f846 	bl	800430c <HAL_I2C_Master_Receive>

	return (unsigned short)((ucTemp[0]<<8) + ucTemp[1]);
 8002280:	7b3b      	ldrb	r3, [r7, #12]
 8002282:	b29b      	uxth	r3, r3
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	b29a      	uxth	r2, r3
 8002288:	7b7b      	ldrb	r3, [r7, #13]
 800228a:	b29b      	uxth	r3, r3
 800228c:	4413      	add	r3, r2
 800228e:	b29b      	uxth	r3, r3
} /* readReg16() */
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000240 	.word	0x20000240

0800229c <readReg>:

//
// Read a single register value from I2C device
//
static unsigned char readReg(uint8_t ucAddr)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp;

	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 80022a6:	1dfa      	adds	r2, r7, #7
 80022a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2301      	movs	r3, #1
 80022b0:	2152      	movs	r1, #82	; 0x52
 80022b2:	4809      	ldr	r0, [pc, #36]	; (80022d8 <readReg+0x3c>)
 80022b4:	f001 ff2c 	bl	8004110 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 80022b8:	f107 020f 	add.w	r2, r7, #15
 80022bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2301      	movs	r3, #1
 80022c4:	2153      	movs	r1, #83	; 0x53
 80022c6:	4804      	ldr	r0, [pc, #16]	; (80022d8 <readReg+0x3c>)
 80022c8:	f002 f820 	bl	800430c <HAL_I2C_Master_Receive>

	return ucTemp;
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
} /* ReadReg() */
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000240 	.word	0x20000240

080022dc <readMulti>:

static void readMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	4613      	mov	r3, r2
 80022ea:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 80022ec:	1dfa      	adds	r2, r7, #7
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2301      	movs	r3, #1
 80022f6:	2152      	movs	r1, #82	; 0x52
 80022f8:	4807      	ldr	r0, [pc, #28]	; (8002318 <readMulti+0x3c>)
 80022fa:	f001 ff09 	bl	8004110 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, pBuf, iCount, 1000);
 80022fe:	88bb      	ldrh	r3, [r7, #4]
 8002300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002304:	9200      	str	r2, [sp, #0]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	2153      	movs	r1, #83	; 0x53
 800230a:	4803      	ldr	r0, [pc, #12]	; (8002318 <readMulti+0x3c>)
 800230c:	f001 fffe 	bl	800430c <HAL_I2C_Master_Receive>
} /* readMulti() */
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000240 	.word	0x20000240

0800231c <writeMulti>:

static void writeMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 800231c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002320:	b087      	sub	sp, #28
 8002322:	af02      	add	r7, sp, #8
 8002324:	4603      	mov	r3, r0
 8002326:	6039      	str	r1, [r7, #0]
 8002328:	71fb      	strb	r3, [r7, #7]
 800232a:	4613      	mov	r3, r2
 800232c:	80bb      	strh	r3, [r7, #4]
 800232e:	466b      	mov	r3, sp
 8002330:	461e      	mov	r6, r3
	uint8_t ucTemp[iCount+1];
 8002332:	88bb      	ldrh	r3, [r7, #4]
 8002334:	1c59      	adds	r1, r3, #1
 8002336:	1e4b      	subs	r3, r1, #1
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	460a      	mov	r2, r1
 800233c:	2300      	movs	r3, #0
 800233e:	4690      	mov	r8, r2
 8002340:	4699      	mov	r9, r3
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800234e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002356:	460a      	mov	r2, r1
 8002358:	2300      	movs	r3, #0
 800235a:	4614      	mov	r4, r2
 800235c:	461d      	mov	r5, r3
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	00eb      	lsls	r3, r5, #3
 8002368:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800236c:	00e2      	lsls	r2, r4, #3
 800236e:	460b      	mov	r3, r1
 8002370:	3307      	adds	r3, #7
 8002372:	08db      	lsrs	r3, r3, #3
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	ebad 0d03 	sub.w	sp, sp, r3
 800237a:	ab02      	add	r3, sp, #8
 800237c:	3300      	adds	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]

	ucTemp[0] = ucAddr;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	79fa      	ldrb	r2, [r7, #7]
 8002384:	701a      	strb	r2, [r3, #0]
	memcpy(&ucTemp[1], pBuf, iCount);
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	3301      	adds	r3, #1
 800238a:	88ba      	ldrh	r2, [r7, #4]
 800238c:	6839      	ldr	r1, [r7, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f006 fee2 	bl	8009158 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, iCount+1, 1000);
 8002394:	88bb      	ldrh	r3, [r7, #4]
 8002396:	3301      	adds	r3, #1
 8002398:	b29b      	uxth	r3, r3
 800239a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800239e:	9200      	str	r2, [sp, #0]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	2152      	movs	r1, #82	; 0x52
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <writeMulti+0x9c>)
 80023a6:	f001 feb3 	bl	8004110 <HAL_I2C_Master_Transmit>
 80023aa:	46b5      	mov	sp, r6
} /* writeMulti() */
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023b6:	bf00      	nop
 80023b8:	20000240 	.word	0x20000240

080023bc <writeReg16>:
//
// Write a 16-bit value to a register
//
static void writeReg16(uint8_t ucAddr, uint16_t usValue)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	4603      	mov	r3, r0
 80023c4:	460a      	mov	r2, r1
 80023c6:	71fb      	strb	r3, [r7, #7]
 80023c8:	4613      	mov	r3, r2
 80023ca:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp[4];

	ucTemp[0] = ucAddr;
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = (uint8_t)(usValue >> 8); // MSB first
 80023d0:	88bb      	ldrh	r3, [r7, #4]
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	737b      	strb	r3, [r7, #13]
	ucTemp[2] = (uint8_t)usValue;
 80023da:	88bb      	ldrh	r3, [r7, #4]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 3, 1000);
 80023e0:	f107 020c 	add.w	r2, r7, #12
 80023e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2303      	movs	r3, #3
 80023ec:	2152      	movs	r1, #82	; 0x52
 80023ee:	4803      	ldr	r0, [pc, #12]	; (80023fc <writeReg16+0x40>)
 80023f0:	f001 fe8e 	bl	8004110 <HAL_I2C_Master_Transmit>
} /* writeReg16() */
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000240 	.word	0x20000240

08002400 <writeReg>:
//
// Write a single register/value pair
//
static void writeReg(uint8_t ucAddr, uint8_t ucValue)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af02      	add	r7, sp, #8
 8002406:	4603      	mov	r3, r0
 8002408:	460a      	mov	r2, r1
 800240a:	71fb      	strb	r3, [r7, #7]
 800240c:	4613      	mov	r3, r2
 800240e:	71bb      	strb	r3, [r7, #6]
	uint8_t ucTemp[2];

	ucTemp[0] = ucAddr;
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = ucValue;
 8002414:	79bb      	ldrb	r3, [r7, #6]
 8002416:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 2, 1000);
 8002418:	f107 020c 	add.w	r2, r7, #12
 800241c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2302      	movs	r3, #2
 8002424:	2152      	movs	r1, #82	; 0x52
 8002426:	4803      	ldr	r0, [pc, #12]	; (8002434 <writeReg+0x34>)
 8002428:	f001 fe72 	bl	8004110 <HAL_I2C_Master_Transmit>
} /* writeReg() */
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000240 	.word	0x20000240

08002438 <writeRegList>:

//
// Write a list of register/value pairs to the I2C device
//
static void writeRegList(uint8_t *ucList)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af02      	add	r7, sp, #8
 800243e:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = *ucList++; // count is the first element in the list
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	73fb      	strb	r3, [r7, #15]


	while (ucCount)
 800244a:	e00e      	b.n	800246a <writeRegList+0x32>
	{
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucList, 2, 1000);
 800244c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2302      	movs	r3, #2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	2152      	movs	r1, #82	; 0x52
 8002458:	4808      	ldr	r0, [pc, #32]	; (800247c <writeRegList+0x44>)
 800245a:	f001 fe59 	bl	8004110 <HAL_I2C_Master_Transmit>
		ucList += 2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3302      	adds	r3, #2
 8002462:	607b      	str	r3, [r7, #4]
		ucCount--;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	3b01      	subs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
	while (ucCount)
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ed      	bne.n	800244c <writeRegList+0x14>
	}
} /* writeRegList() */
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000240 	.word	0x20000240

08002480 <getSpadInfo>:
0x44,0x00, 0x45,0x20, 0x47,0x08, 0x48,0x28, 0x67,0x00, 0x70,0x04, 0x71,0x01,
0x72,0xfe, 0x76,0x00, 0x77,0x00, 0xff,0x01, 0x0d,0x01, 0xff,0x00, 0x80,0x01,
0x01,0xf8, 0xff,0x01, 0x8e,0x01, 0x00,0x01, 0xff,0x00, 0x80,0x00};

static int getSpadInfo(uint8_t *pCount, uint8_t *pTypeIsAperture)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
int iTimeout;
uint8_t ucTemp;
#define MAX_TIMEOUT 50

  writeRegList(ucSPAD0);
 800248a:	482d      	ldr	r0, [pc, #180]	; (8002540 <getSpadInfo+0xc0>)
 800248c:	f7ff ffd4 	bl	8002438 <writeRegList>
  writeReg(0x83, readReg(0x83) | 0x04);
 8002490:	2083      	movs	r0, #131	; 0x83
 8002492:	f7ff ff03 	bl	800229c <readReg>
 8002496:	4603      	mov	r3, r0
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	b2db      	uxtb	r3, r3
 800249e:	4619      	mov	r1, r3
 80024a0:	2083      	movs	r0, #131	; 0x83
 80024a2:	f7ff ffad 	bl	8002400 <writeReg>
  writeRegList(ucSPAD1);
 80024a6:	4827      	ldr	r0, [pc, #156]	; (8002544 <getSpadInfo+0xc4>)
 80024a8:	f7ff ffc6 	bl	8002438 <writeRegList>
  iTimeout = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
  while(iTimeout < MAX_TIMEOUT)
 80024b0:	e00b      	b.n	80024ca <getSpadInfo+0x4a>
  {
    if (readReg(0x83) != 0x00) break;
 80024b2:	2083      	movs	r0, #131	; 0x83
 80024b4:	f7ff fef2 	bl	800229c <readReg>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <getSpadInfo+0x52>
    iTimeout++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3301      	adds	r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 80024c4:	2005      	movs	r0, #5
 80024c6:	f001 fa09 	bl	80038dc <HAL_Delay>
  while(iTimeout < MAX_TIMEOUT)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b31      	cmp	r3, #49	; 0x31
 80024ce:	ddf0      	ble.n	80024b2 <getSpadInfo+0x32>
 80024d0:	e000      	b.n	80024d4 <getSpadInfo+0x54>
    if (readReg(0x83) != 0x00) break;
 80024d2:	bf00      	nop
  }
  if (iTimeout == MAX_TIMEOUT)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b32      	cmp	r3, #50	; 0x32
 80024d8:	d101      	bne.n	80024de <getSpadInfo+0x5e>
  {
    //fprintf(stderr, "Timeout while waiting for SPAD info\n");
    return 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	e02b      	b.n	8002536 <getSpadInfo+0xb6>
  }
  writeReg(0x83,0x01);
 80024de:	2101      	movs	r1, #1
 80024e0:	2083      	movs	r0, #131	; 0x83
 80024e2:	f7ff ff8d 	bl	8002400 <writeReg>
  ucTemp = readReg(0x92);
 80024e6:	2092      	movs	r0, #146	; 0x92
 80024e8:	f7ff fed8 	bl	800229c <readReg>
 80024ec:	4603      	mov	r3, r0
 80024ee:	72fb      	strb	r3, [r7, #11]
  *pCount = (ucTemp & 0x7f);
 80024f0:	7afb      	ldrb	r3, [r7, #11]
 80024f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	701a      	strb	r2, [r3, #0]
  *pTypeIsAperture = (ucTemp & 0x80);
 80024fc:	7afb      	ldrb	r3, [r7, #11]
 80024fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002502:	b2da      	uxtb	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	701a      	strb	r2, [r3, #0]
  writeReg(0x81,0x00);
 8002508:	2100      	movs	r1, #0
 800250a:	2081      	movs	r0, #129	; 0x81
 800250c:	f7ff ff78 	bl	8002400 <writeReg>
  writeReg(0xff,0x06);
 8002510:	2106      	movs	r1, #6
 8002512:	20ff      	movs	r0, #255	; 0xff
 8002514:	f7ff ff74 	bl	8002400 <writeReg>
  writeReg(0x83, readReg(0x83) & ~0x04);
 8002518:	2083      	movs	r0, #131	; 0x83
 800251a:	f7ff febf 	bl	800229c <readReg>
 800251e:	4603      	mov	r3, r0
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	b2db      	uxtb	r3, r3
 8002526:	4619      	mov	r1, r3
 8002528:	2083      	movs	r0, #131	; 0x83
 800252a:	f7ff ff69 	bl	8002400 <writeReg>
  writeRegList(ucSPAD2);
 800252e:	4806      	ldr	r0, [pc, #24]	; (8002548 <getSpadInfo+0xc8>)
 8002530:	f7ff ff82 	bl	8002438 <writeRegList>

  return 1;
 8002534:	2301      	movs	r3, #1
} /* getSpadInfo() */
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000070 	.word	0x20000070
 8002544:	2000007c 	.word	0x2000007c
 8002548:	20000088 	.word	0x20000088

0800254c <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
static uint16_t decodeTimeout(uint16_t reg_val)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800255a:	88fa      	ldrh	r2, [r7, #6]
 800255c:	0a12      	lsrs	r2, r2, #8
 800255e:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8002560:	4093      	lsls	r3, r2
 8002562:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002564:	3301      	adds	r3, #1
 8002566:	b29b      	uxth	r3, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
static uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	460a      	mov	r2, r1
 800257e:	80fb      	strh	r3, [r7, #6]
 8002580:	4613      	mov	r3, r2
 8002582:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002584:	797b      	ldrb	r3, [r7, #5]
 8002586:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <timeoutMclksToMicroseconds+0x48>)
 8002588:	fb02 f303 	mul.w	r3, r2, r3
 800258c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002590:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <timeoutMclksToMicroseconds+0x4c>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	fb03 f202 	mul.w	r2, r3, r2
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <timeoutMclksToMicroseconds+0x4c>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	099b      	lsrs	r3, r3, #6
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	003a2f00 	.word	0x003a2f00
 80025c0:	10624dd3 	.word	0x10624dd3

080025c4 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	4a0d      	ldr	r2, [pc, #52]	; (8002608 <timeoutMicrosecondsToMclks+0x44>)
 80025d4:	fb02 f303 	mul.w	r3, r2, r3
 80025d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80025dc:	4a0b      	ldr	r2, [pc, #44]	; (800260c <timeoutMicrosecondsToMclks+0x48>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	099b      	lsrs	r3, r3, #6
 80025e4:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025ec:	fb03 f202 	mul.w	r2, r3, r2
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	441a      	add	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	003a2f00 	.word	0x003a2f00
 800260c:	10624dd3 	.word	0x10624dd3

08002610 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
static uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d018      	beq.n	800265a <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	3b01      	subs	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 800262e:	e005      	b.n	800263c <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	085b      	lsrs	r3, r3, #1
 8002634:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8002636:	897b      	ldrh	r3, [r7, #10]
 8002638:	3301      	adds	r3, #1
 800263a:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f4      	bne.n	8002630 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8002646:	897b      	ldrh	r3, [r7, #10]
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	b29b      	uxth	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	b29b      	uxth	r3, r3
 8002654:	4313      	orrs	r3, r2
 8002656:	b29b      	uxth	r3, r3
 8002658:	e000      	b.n	800265c <encodeTimeout+0x4c>
  }
  else { return 0; }
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <getSequenceStepTimeouts>:

static void getSequenceStepTimeouts(uint8_t enables, SequenceStepTimeouts * timeouts)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	71fb      	strb	r3, [r7, #7]
  timeouts->pre_range_vcsel_period_pclks = ((readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8002674:	2050      	movs	r0, #80	; 0x50
 8002676:	f7ff fe11 	bl	800229c <readReg>
 800267a:	4603      	mov	r3, r0
 800267c:	b29b      	uxth	r3, r3
 800267e:	3301      	adds	r3, #1
 8002680:	b29b      	uxth	r3, r3
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 800268a:	2046      	movs	r0, #70	; 0x46
 800268c:	f7ff fe06 	bl	800229c <readReg>
 8002690:	4603      	mov	r3, r0
 8002692:	b29b      	uxth	r3, r3
 8002694:	3301      	adds	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	4619      	mov	r1, r3
 80026a8:	4610      	mov	r0, r2
 80026aa:	f7ff ff63 	bl	8002574 <timeoutMclksToMicroseconds>
 80026ae:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80026b4:	2051      	movs	r0, #81	; 0x51
 80026b6:	f7ff fdcb 	bl	8002250 <readReg16>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff45 	bl	800254c <decodeTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4619      	mov	r1, r3
 80026d6:	4610      	mov	r0, r2
 80026d8:	f7ff ff4c 	bl	8002574 <timeoutMclksToMicroseconds>
 80026dc:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = ((readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 80026e2:	2070      	movs	r0, #112	; 0x70
 80026e4:	f7ff fdda 	bl	800229c <readReg>
 80026e8:	4603      	mov	r3, r0
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80026f8:	2071      	movs	r0, #113	; 0x71
 80026fa:	f7ff fda9 	bl	8002250 <readReg16>
 80026fe:	4603      	mov	r3, r0
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff23 	bl	800254c <decodeTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	811a      	strh	r2, [r3, #8]

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	d007      	beq.n	8002728 <getSequenceStepTimeouts+0xc0>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	891a      	ldrh	r2, [r3, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	88db      	ldrh	r3, [r3, #6]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	b29a      	uxth	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8002730:	b2db      	uxtb	r3, r3
 8002732:	4619      	mov	r1, r3
 8002734:	4610      	mov	r0, r2
 8002736:	f7ff ff1d 	bl	8002574 <timeoutMclksToMicroseconds>
 800273a:	4602      	mov	r2, r0
  timeouts->final_range_us =
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	615a      	str	r2, [r3, #20]
} /* getSequenceStepTimeouts() */
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
static int setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08c      	sub	sp, #48	; 0x30
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	460a      	mov	r2, r1
 8002752:	71fb      	strb	r3, [r7, #7]
 8002754:	4613      	mov	r3, r2
 8002756:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8002758:	79bb      	ldrb	r3, [r7, #6]
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8002764:	2001      	movs	r0, #1
 8002766:	f7ff fd99 	bl	800229c <readReg>
 800276a:	4603      	mov	r3, r0
 800276c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  getSequenceStepTimeouts(enables, &timeouts);
 8002770:	f107 020c 	add.w	r2, r7, #12
 8002774:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff74 	bl	8002668 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d15c      	bne.n	8002840 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8002786:	79bb      	ldrb	r3, [r7, #6]
 8002788:	3b0c      	subs	r3, #12
 800278a:	2b06      	cmp	r3, #6
 800278c:	d824      	bhi.n	80027d8 <setVcselPulsePeriod+0x90>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <setVcselPulsePeriod+0x4c>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027b1 	.word	0x080027b1
 8002798:	080027d9 	.word	0x080027d9
 800279c:	080027bb 	.word	0x080027bb
 80027a0:	080027d9 	.word	0x080027d9
 80027a4:	080027c5 	.word	0x080027c5
 80027a8:	080027d9 	.word	0x080027d9
 80027ac:	080027cf 	.word	0x080027cf
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 80027b0:	2118      	movs	r1, #24
 80027b2:	2057      	movs	r0, #87	; 0x57
 80027b4:	f7ff fe24 	bl	8002400 <writeReg>
        break;
 80027b8:	e010      	b.n	80027dc <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 80027ba:	2130      	movs	r1, #48	; 0x30
 80027bc:	2057      	movs	r0, #87	; 0x57
 80027be:	f7ff fe1f 	bl	8002400 <writeReg>
        break;
 80027c2:	e00b      	b.n	80027dc <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 80027c4:	2140      	movs	r1, #64	; 0x40
 80027c6:	2057      	movs	r0, #87	; 0x57
 80027c8:	f7ff fe1a 	bl	8002400 <writeReg>
        break;
 80027cc:	e006      	b.n	80027dc <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 80027ce:	2150      	movs	r1, #80	; 0x50
 80027d0:	2057      	movs	r0, #87	; 0x57
 80027d2:	f7ff fe15 	bl	8002400 <writeReg>
        break;
 80027d6:	e001      	b.n	80027dc <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	e0fe      	b.n	80029da <setVcselPulsePeriod+0x292>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 80027dc:	2108      	movs	r1, #8
 80027de:	2056      	movs	r0, #86	; 0x56
 80027e0:	f7ff fe0e 	bl	8002400 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80027e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027e8:	4619      	mov	r1, r3
 80027ea:	2050      	movs	r0, #80	; 0x50
 80027ec:	f7ff fe08 	bl	8002400 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	79ba      	ldrb	r2, [r7, #6]
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fee4 	bl	80025c4 <timeoutMicrosecondsToMclks>
 80027fc:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 80027fe:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002800:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff04 	bl	8002610 <encodeTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	4619      	mov	r1, r3
 800280c:	2051      	movs	r0, #81	; 0x51
 800280e:	f7ff fdd5 	bl	80023bc <writeReg16>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	79ba      	ldrb	r2, [r7, #6]
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fed3 	bl	80025c4 <timeoutMicrosecondsToMclks>
 800281e:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8002820:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8002822:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002828:	d804      	bhi.n	8002834 <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 800282a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800282c:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 800282e:	3b01      	subs	r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e000      	b.n	8002836 <setVcselPulsePeriod+0xee>
 8002834:	23ff      	movs	r3, #255	; 0xff
 8002836:	4619      	mov	r1, r3
 8002838:	2046      	movs	r0, #70	; 0x46
 800283a:	f7ff fde1 	bl	8002400 <writeReg>
 800283e:	e0b3      	b.n	80029a8 <setVcselPulsePeriod+0x260>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	2b01      	cmp	r3, #1
 8002844:	f040 80ae 	bne.w	80029a4 <setVcselPulsePeriod+0x25c>
  {
    switch (period_pclks)
 8002848:	79bb      	ldrb	r3, [r7, #6]
 800284a:	3b08      	subs	r3, #8
 800284c:	2b06      	cmp	r3, #6
 800284e:	f200 8085 	bhi.w	800295c <setVcselPulsePeriod+0x214>
 8002852:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <setVcselPulsePeriod+0x110>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	08002875 	.word	0x08002875
 800285c:	0800295d 	.word	0x0800295d
 8002860:	080028af 	.word	0x080028af
 8002864:	0800295d 	.word	0x0800295d
 8002868:	080028e9 	.word	0x080028e9
 800286c:	0800295d 	.word	0x0800295d
 8002870:	08002923 	.word	0x08002923
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8002874:	2110      	movs	r1, #16
 8002876:	2048      	movs	r0, #72	; 0x48
 8002878:	f7ff fdc2 	bl	8002400 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800287c:	2108      	movs	r1, #8
 800287e:	2047      	movs	r0, #71	; 0x47
 8002880:	f7ff fdbe 	bl	8002400 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8002884:	2102      	movs	r1, #2
 8002886:	2032      	movs	r0, #50	; 0x32
 8002888:	f7ff fdba 	bl	8002400 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 800288c:	210c      	movs	r1, #12
 800288e:	2030      	movs	r0, #48	; 0x30
 8002890:	f7ff fdb6 	bl	8002400 <writeReg>
        writeReg(0xFF, 0x01);
 8002894:	2101      	movs	r1, #1
 8002896:	20ff      	movs	r0, #255	; 0xff
 8002898:	f7ff fdb2 	bl	8002400 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 800289c:	2130      	movs	r1, #48	; 0x30
 800289e:	2030      	movs	r0, #48	; 0x30
 80028a0:	f7ff fdae 	bl	8002400 <writeReg>
        writeReg(0xFF, 0x00);
 80028a4:	2100      	movs	r1, #0
 80028a6:	20ff      	movs	r0, #255	; 0xff
 80028a8:	f7ff fdaa 	bl	8002400 <writeReg>
        break;
 80028ac:	e058      	b.n	8002960 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 80028ae:	2128      	movs	r1, #40	; 0x28
 80028b0:	2048      	movs	r0, #72	; 0x48
 80028b2:	f7ff fda5 	bl	8002400 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80028b6:	2108      	movs	r1, #8
 80028b8:	2047      	movs	r0, #71	; 0x47
 80028ba:	f7ff fda1 	bl	8002400 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80028be:	2103      	movs	r1, #3
 80028c0:	2032      	movs	r0, #50	; 0x32
 80028c2:	f7ff fd9d 	bl	8002400 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 80028c6:	2109      	movs	r1, #9
 80028c8:	2030      	movs	r0, #48	; 0x30
 80028ca:	f7ff fd99 	bl	8002400 <writeReg>
        writeReg(0xFF, 0x01);
 80028ce:	2101      	movs	r1, #1
 80028d0:	20ff      	movs	r0, #255	; 0xff
 80028d2:	f7ff fd95 	bl	8002400 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80028d6:	2120      	movs	r1, #32
 80028d8:	2030      	movs	r0, #48	; 0x30
 80028da:	f7ff fd91 	bl	8002400 <writeReg>
        writeReg(0xFF, 0x00);
 80028de:	2100      	movs	r1, #0
 80028e0:	20ff      	movs	r0, #255	; 0xff
 80028e2:	f7ff fd8d 	bl	8002400 <writeReg>
        break;
 80028e6:	e03b      	b.n	8002960 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 80028e8:	2138      	movs	r1, #56	; 0x38
 80028ea:	2048      	movs	r0, #72	; 0x48
 80028ec:	f7ff fd88 	bl	8002400 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80028f0:	2108      	movs	r1, #8
 80028f2:	2047      	movs	r0, #71	; 0x47
 80028f4:	f7ff fd84 	bl	8002400 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80028f8:	2103      	movs	r1, #3
 80028fa:	2032      	movs	r0, #50	; 0x32
 80028fc:	f7ff fd80 	bl	8002400 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8002900:	2108      	movs	r1, #8
 8002902:	2030      	movs	r0, #48	; 0x30
 8002904:	f7ff fd7c 	bl	8002400 <writeReg>
        writeReg(0xFF, 0x01);
 8002908:	2101      	movs	r1, #1
 800290a:	20ff      	movs	r0, #255	; 0xff
 800290c:	f7ff fd78 	bl	8002400 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8002910:	2120      	movs	r1, #32
 8002912:	2030      	movs	r0, #48	; 0x30
 8002914:	f7ff fd74 	bl	8002400 <writeReg>
        writeReg(0xFF, 0x00);
 8002918:	2100      	movs	r1, #0
 800291a:	20ff      	movs	r0, #255	; 0xff
 800291c:	f7ff fd70 	bl	8002400 <writeReg>
        break;
 8002920:	e01e      	b.n	8002960 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8002922:	2148      	movs	r1, #72	; 0x48
 8002924:	2048      	movs	r0, #72	; 0x48
 8002926:	f7ff fd6b 	bl	8002400 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800292a:	2108      	movs	r1, #8
 800292c:	2047      	movs	r0, #71	; 0x47
 800292e:	f7ff fd67 	bl	8002400 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8002932:	2103      	movs	r1, #3
 8002934:	2032      	movs	r0, #50	; 0x32
 8002936:	f7ff fd63 	bl	8002400 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 800293a:	2107      	movs	r1, #7
 800293c:	2030      	movs	r0, #48	; 0x30
 800293e:	f7ff fd5f 	bl	8002400 <writeReg>
        writeReg(0xFF, 0x01);
 8002942:	2101      	movs	r1, #1
 8002944:	20ff      	movs	r0, #255	; 0xff
 8002946:	f7ff fd5b 	bl	8002400 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 800294a:	2120      	movs	r1, #32
 800294c:	2030      	movs	r0, #48	; 0x30
 800294e:	f7ff fd57 	bl	8002400 <writeReg>
        writeReg(0xFF, 0x00);
 8002952:	2100      	movs	r1, #0
 8002954:	20ff      	movs	r0, #255	; 0xff
 8002956:	f7ff fd53 	bl	8002400 <writeReg>
        break;
 800295a:	e001      	b.n	8002960 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return 0;
 800295c:	2300      	movs	r3, #0
 800295e:	e03c      	b.n	80029da <setVcselPulsePeriod+0x292>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8002960:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002964:	4619      	mov	r1, r3
 8002966:	2070      	movs	r0, #112	; 0x70
 8002968:	f7ff fd4a 	bl	8002400 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	79ba      	ldrb	r2, [r7, #6]
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fe26 	bl	80025c4 <timeoutMicrosecondsToMclks>
 8002978:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 800297a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 800297c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <setVcselPulsePeriod+0x248>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8002988:	8a7a      	ldrh	r2, [r7, #18]
 800298a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800298c:	4413      	add	r3, r2
 800298e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002990:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fe3c 	bl	8002610 <encodeTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	4619      	mov	r1, r3
 800299c:	2071      	movs	r0, #113	; 0x71
 800299e:	f7ff fd0d 	bl	80023bc <writeReg16>
 80029a2:	e001      	b.n	80029a8 <setVcselPulsePeriod+0x260>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e018      	b.n	80029da <setVcselPulsePeriod+0x292>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(measurement_timing_budget_us);
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <setVcselPulsePeriod+0x29c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 f81b 	bl	80029e8 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80029b2:	2001      	movs	r0, #1
 80029b4:	f7ff fc72 	bl	800229c <readReg>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80029be:	2102      	movs	r1, #2
 80029c0:	2001      	movs	r0, #1
 80029c2:	f7ff fd1d 	bl	8002400 <writeReg>
  performSingleRefCalibration(0x0);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f000 f916 	bl	8002bf8 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 80029cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029d0:	4619      	mov	r1, r3
 80029d2:	2001      	movs	r0, #1
 80029d4:	f7ff fd14 	bl	8002400 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return 1;
 80029d8:	2301      	movs	r3, #1
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3730      	adds	r7, #48	; 0x30
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	2000047c 	.word	0x2000047c

080029e8 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
static int setMeasurementTimingBudget(uint32_t budget_us)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b090      	sub	sp, #64	; 0x40
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
uint16_t final_range_timeout_mclks;

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 80029f0:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80029f4:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const EndOverhead        = 960;
 80029f6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80029fa:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const MsrcOverhead       = 660;
 80029fc:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002a00:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t const TccOverhead        = 590;
 8002a02:	f240 234e 	movw	r3, #590	; 0x24e
 8002a06:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const DssOverhead        = 690;
 8002a08:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002a0c:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const PreRangeOverhead   = 660;
 8002a0e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002a12:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const FinalRangeOverhead = 550;
 8002a14:	f240 2326 	movw	r3, #550	; 0x226
 8002a18:	85bb      	strh	r3, [r7, #44]	; 0x2c

  uint32_t const MinTimingBudget = 20000;
 8002a1a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28

  if (budget_us < MinTimingBudget) { return 0; }
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d201      	bcs.n	8002a2c <setMeasurementTimingBudget+0x44>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e074      	b.n	8002b16 <setMeasurementTimingBudget+0x12e>

  used_budget_us = StartOverhead + EndOverhead;
 8002a2c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002a2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a30:	4413      	add	r3, r2
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8002a34:	2001      	movs	r0, #1
 8002a36:	f7ff fc31 	bl	800229c <readReg>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  getSequenceStepTimeouts(enables, &timeouts);
 8002a40:	f107 0208 	add.w	r2, r7, #8
 8002a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fe0c 	bl	8002668 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8002a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <setMeasurementTimingBudget+0x80>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002a60:	4413      	add	r3, r2
 8002a62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a64:	4413      	add	r3, r2
 8002a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 8002a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <setMeasurementTimingBudget+0x9c>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002a78:	4413      	add	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a7e:	4413      	add	r3, r2
 8002a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a82:	e00b      	b.n	8002a9c <setMeasurementTimingBudget+0xb4>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8002a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <setMeasurementTimingBudget+0xb4>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002a94:	4413      	add	r3, r2
 8002a96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a98:	4413      	add	r3, r2
 8002a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <setMeasurementTimingBudget+0xcc>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002aac:	4413      	add	r3, r2
 8002aae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ab0:	4413      	add	r3, r2
 8002ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8002ab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	da2b      	bge.n	8002b14 <setMeasurementTimingBudget+0x12c>
  {
    used_budget_us += FinalRangeOverhead;
 8002abc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002abe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ac0:	4413      	add	r3, r2
 8002ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8002ac4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d901      	bls.n	8002ad0 <setMeasurementTimingBudget+0xe8>
    {
      // "Requested timeout too big."
      return 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e022      	b.n	8002b16 <setMeasurementTimingBudget+0x12e>
    }

    final_range_timeout_us = budget_us - used_budget_us;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	623b      	str	r3, [r7, #32]
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8002ad8:	897b      	ldrh	r3, [r7, #10]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	4619      	mov	r1, r3
 8002ade:	6a38      	ldr	r0, [r7, #32]
 8002ae0:	f7ff fd70 	bl	80025c4 <timeoutMicrosecondsToMclks>
 8002ae4:	4603      	mov	r3, r0
    final_range_timeout_mclks =
 8002ae6:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <setMeasurementTimingBudget+0x114>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8002af4:	89fa      	ldrh	r2, [r7, #14]
 8002af6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002af8:	4413      	add	r3, r2
 8002afa:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002afc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fd86 	bl	8002610 <encodeTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4619      	mov	r1, r3
 8002b08:	2071      	movs	r0, #113	; 0x71
 8002b0a:	f7ff fc57 	bl	80023bc <writeReg16>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 8002b0e:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <setMeasurementTimingBudget+0x138>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6013      	str	r3, [r2, #0]
  }
  return 1;
 8002b14:	2301      	movs	r3, #1
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3740      	adds	r7, #64	; 0x40
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	2000047c 	.word	0x2000047c

08002b24 <getMeasurementTimingBudget>:

static uint32_t getMeasurementTimingBudget(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08c      	sub	sp, #48	; 0x30
 8002b28:	af00      	add	r7, sp, #0
  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8002b2a:	f240 7376 	movw	r3, #1910	; 0x776
 8002b2e:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 8002b30:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002b34:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 8002b36:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002b3a:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 8002b3c:	f240 234e 	movw	r3, #590	; 0x24e
 8002b40:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 8002b42:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002b46:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 8002b48:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002b4c:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 8002b4e:	f240 2326 	movw	r3, #550	; 0x226
 8002b52:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8002b54:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002b56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b58:	4413      	add	r3, r2
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f7ff fb9d 	bl	800229c <readReg>
 8002b62:	4603      	mov	r3, r0
 8002b64:	777b      	strb	r3, [r7, #29]
  getSequenceStepTimeouts(enables, &timeouts);
 8002b66:	1d3a      	adds	r2, r7, #4
 8002b68:	7f7b      	ldrb	r3, [r7, #29]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fd7b 	bl	8002668 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8002b72:	7f7b      	ldrb	r3, [r7, #29]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <getMeasurementTimingBudget+0x64>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b80:	4413      	add	r3, r2
 8002b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b84:	4413      	add	r3, r2
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 8002b88:	7f7b      	ldrb	r3, [r7, #29]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <getMeasurementTimingBudget+0x7e>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b96:	4413      	add	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9c:	4413      	add	r3, r2
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba0:	e00a      	b.n	8002bb8 <getMeasurementTimingBudget+0x94>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8002ba2:	7f7b      	ldrb	r3, [r7, #29]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <getMeasurementTimingBudget+0x94>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002bb0:	4413      	add	r3, r2
 8002bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bb4:	4413      	add	r3, r2
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002bb8:	7f7b      	ldrb	r3, [r7, #29]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	8c3b      	ldrh	r3, [r7, #32]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bca:	4413      	add	r3, r2
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8002bce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da05      	bge.n	8002be2 <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	8bfb      	ldrh	r3, [r7, #30]
 8002bda:	4413      	add	r3, r2
 8002bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bde:	4413      	add	r3, r2
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 8002be2:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <getMeasurementTimingBudget+0xd0>)
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be6:	6013      	str	r3, [r2, #0]
  return budget_us;
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3730      	adds	r7, #48	; 0x30
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	2000047c 	.word	0x2000047c

08002bf8 <performSingleRefCalibration>:

static int performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
int iTimeout;
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7ff fbf7 	bl	8002400 <writeReg>

  iTimeout = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002c16:	e00a      	b.n	8002c2e <performSingleRefCalibration+0x36>
  {
    iTimeout++;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 8002c1e:	2005      	movs	r0, #5
 8002c20:	f000 fe5c 	bl	80038dc <HAL_Delay>
    if (iTimeout > 100) { return 0; }
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	dd01      	ble.n	8002c2e <performSingleRefCalibration+0x36>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e010      	b.n	8002c50 <performSingleRefCalibration+0x58>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002c2e:	2013      	movs	r0, #19
 8002c30:	f7ff fb34 	bl	800229c <readReg>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0ec      	beq.n	8002c18 <performSingleRefCalibration+0x20>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002c3e:	2101      	movs	r1, #1
 8002c40:	200b      	movs	r0, #11
 8002c42:	f7ff fbdd 	bl	8002400 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8002c46:	2100      	movs	r1, #0
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7ff fbd9 	bl	8002400 <writeReg>

  return 1;
 8002c4e:	2301      	movs	r3, #1
} /* performSingleRefCalibration() */
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <initSensor>:

//
// Initialize the vl53l0x
//
static int initSensor(int bLongRangeMode)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
unsigned char spad_count=0, spad_type_is_aperture=0, ref_spad_map[6];
 8002c60:	2300      	movs	r3, #0
 8002c62:	75bb      	strb	r3, [r7, #22]
 8002c64:	2300      	movs	r3, #0
 8002c66:	757b      	strb	r3, [r7, #21]
unsigned char ucFirstSPAD, ucSPADsEnabled;
int i;

// set 2.8V mode
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
  readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8002c68:	2089      	movs	r0, #137	; 0x89
 8002c6a:	f7ff fb17 	bl	800229c <readReg>
 8002c6e:	4603      	mov	r3, r0
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	4619      	mov	r1, r3
 8002c78:	2089      	movs	r0, #137	; 0x89
 8002c7a:	f7ff fbc1 	bl	8002400 <writeReg>
// Set I2C standard mode
  writeRegList(ucI2CMode);
 8002c7e:	486a      	ldr	r0, [pc, #424]	; (8002e28 <initSensor+0x1d0>)
 8002c80:	f7ff fbda 	bl	8002438 <writeRegList>
  stop_variable = readReg(0x91);
 8002c84:	2091      	movs	r0, #145	; 0x91
 8002c86:	f7ff fb09 	bl	800229c <readReg>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b67      	ldr	r3, [pc, #412]	; (8002e2c <initSensor+0x1d4>)
 8002c90:	701a      	strb	r2, [r3, #0]
  writeRegList(ucI2CMode2);
 8002c92:	4867      	ldr	r0, [pc, #412]	; (8002e30 <initSensor+0x1d8>)
 8002c94:	f7ff fbd0 	bl	8002438 <writeRegList>
// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(REG_MSRC_CONFIG_CONTROL, readReg(REG_MSRC_CONFIG_CONTROL) | 0x12);
 8002c98:	2060      	movs	r0, #96	; 0x60
 8002c9a:	f7ff faff 	bl	800229c <readReg>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f043 0312 	orr.w	r3, r3, #18
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	2060      	movs	r0, #96	; 0x60
 8002caa:	f7ff fba9 	bl	8002400 <writeReg>
  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 32); // 0.25
 8002cae:	2120      	movs	r1, #32
 8002cb0:	2044      	movs	r0, #68	; 0x44
 8002cb2:	f7ff fb83 	bl	80023bc <writeReg16>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8002cb6:	21ff      	movs	r1, #255	; 0xff
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f7ff fba1 	bl	8002400 <writeReg>
  getSpadInfo(&spad_count, &spad_type_is_aperture);
 8002cbe:	f107 0215 	add.w	r2, r7, #21
 8002cc2:	f107 0316 	add.w	r3, r7, #22
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fbd9 	bl	8002480 <getSpadInfo>

  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002cce:	f107 030c 	add.w	r3, r7, #12
 8002cd2:	2206      	movs	r2, #6
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	20b0      	movs	r0, #176	; 0xb0
 8002cd8:	f7ff fb00 	bl	80022dc <readMulti>
//printf("initial spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);
  writeRegList(ucSPAD);
 8002cdc:	4855      	ldr	r0, [pc, #340]	; (8002e34 <initSensor+0x1dc>)
 8002cde:	f7ff fbab 	bl	8002438 <writeRegList>
  ucFirstSPAD = (spad_type_is_aperture) ? 12: 0;
 8002ce2:	7d7b      	ldrb	r3, [r7, #21]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <initSensor+0x94>
 8002ce8:	230c      	movs	r3, #12
 8002cea:	e000      	b.n	8002cee <initSensor+0x96>
 8002cec:	2300      	movs	r3, #0
 8002cee:	75fb      	strb	r3, [r7, #23]
  ucSPADsEnabled = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	77fb      	strb	r3, [r7, #31]
// clear bits for unused SPADs
  for (i=0; i<48; i++)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	e037      	b.n	8002d6a <initSensor+0x112>
  {
    if (i < ucFirstSPAD || ucSPADsEnabled == spad_count)
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	db03      	blt.n	8002d0a <initSensor+0xb2>
 8002d02:	7dbb      	ldrb	r3, [r7, #22]
 8002d04:	7ffa      	ldrb	r2, [r7, #31]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d119      	bne.n	8002d3e <initSensor+0xe6>
    {
      ref_spad_map[i>>3] &= ~(1<<(i & 7));
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	10db      	asrs	r3, r3, #3
 8002d0e:	3320      	adds	r3, #32
 8002d10:	443b      	add	r3, r7
 8002d12:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002d16:	b25a      	sxtb	r2, r3
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	b25b      	sxtb	r3, r3
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	b25a      	sxtb	r2, r3
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	10db      	asrs	r3, r3, #3
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	3320      	adds	r3, #32
 8002d36:	443b      	add	r3, r7
 8002d38:	f803 2c14 	strb.w	r2, [r3, #-20]
 8002d3c:	e012      	b.n	8002d64 <initSensor+0x10c>
    }
    else if (ref_spad_map[i>>3] & (1<< (i & 7)))
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	10db      	asrs	r3, r3, #3
 8002d42:	3320      	adds	r3, #32
 8002d44:	443b      	add	r3, r7
 8002d46:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	fa42 f303 	asr.w	r3, r2, r3
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <initSensor+0x10c>
    {
      ucSPADsEnabled++;
 8002d5e:	7ffb      	ldrb	r3, [r7, #31]
 8002d60:	3301      	adds	r3, #1
 8002d62:	77fb      	strb	r3, [r7, #31]
  for (i=0; i<48; i++)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	3301      	adds	r3, #1
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	2b2f      	cmp	r3, #47	; 0x2f
 8002d6e:	ddc4      	ble.n	8002cfa <initSensor+0xa2>
    }
  } // for i
  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002d70:	f107 030c 	add.w	r3, r7, #12
 8002d74:	2206      	movs	r2, #6
 8002d76:	4619      	mov	r1, r3
 8002d78:	20b0      	movs	r0, #176	; 0xb0
 8002d7a:	f7ff facf 	bl	800231c <writeMulti>

// load default tuning settings
  writeRegList(ucDefTuning); // long list of magic numbers
 8002d7e:	482e      	ldr	r0, [pc, #184]	; (8002e38 <initSensor+0x1e0>)
 8002d80:	f7ff fb5a 	bl	8002438 <writeRegList>

// change some settings for long range mode
  if (bLongRangeMode)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <initSensor+0x14a>
  {
	writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 13); // 0.1
 8002d8a:	210d      	movs	r1, #13
 8002d8c:	2044      	movs	r0, #68	; 0x44
 8002d8e:	f7ff fb15 	bl	80023bc <writeReg16>
	setVcselPulsePeriod(VcselPeriodPreRange, 18);
 8002d92:	2112      	movs	r1, #18
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7ff fcd7 	bl	8002748 <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 8002d9a:	210e      	movs	r1, #14
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f7ff fcd3 	bl	8002748 <setVcselPulsePeriod>
  }

// set interrupt configuration to "new sample ready"
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8002da2:	2104      	movs	r1, #4
 8002da4:	200a      	movs	r0, #10
 8002da6:	f7ff fb2b 	bl	8002400 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8002daa:	2084      	movs	r0, #132	; 0x84
 8002dac:	f7ff fa76 	bl	800229c <readReg>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f023 0310 	bic.w	r3, r3, #16
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	4619      	mov	r1, r3
 8002dba:	2084      	movs	r0, #132	; 0x84
 8002dbc:	f7ff fb20 	bl	8002400 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	200b      	movs	r0, #11
 8002dc4:	f7ff fb1c 	bl	8002400 <writeReg>
  measurement_timing_budget_us = getMeasurementTimingBudget();
 8002dc8:	f7ff feac 	bl	8002b24 <getMeasurementTimingBudget>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <initSensor+0x1e4>)
 8002dd0:	6013      	str	r3, [r2, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 8002dd2:	21e8      	movs	r1, #232	; 0xe8
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	f7ff fb13 	bl	8002400 <writeReg>
  setMeasurementTimingBudget(measurement_timing_budget_us);
 8002dda:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <initSensor+0x1e4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fe02 	bl	80029e8 <setMeasurementTimingBudget>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8002de4:	2101      	movs	r1, #1
 8002de6:	2001      	movs	r0, #1
 8002de8:	f7ff fb0a 	bl	8002400 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return 0; }
 8002dec:	2040      	movs	r0, #64	; 0x40
 8002dee:	f7ff ff03 	bl	8002bf8 <performSingleRefCalibration>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <initSensor+0x1a4>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e010      	b.n	8002e1e <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	2001      	movs	r0, #1
 8002e00:	f7ff fafe 	bl	8002400 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return 0; }
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7ff fef7 	bl	8002bf8 <performSingleRefCalibration>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <initSensor+0x1bc>
 8002e10:	2300      	movs	r3, #0
 8002e12:	e004      	b.n	8002e1e <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 8002e14:	21e8      	movs	r1, #232	; 0xe8
 8002e16:	2001      	movs	r0, #1
 8002e18:	f7ff faf2 	bl	8002400 <writeReg>
  return 1;
 8002e1c:	2301      	movs	r3, #1
} /* initSensor() */
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	2000005c 	.word	0x2000005c
 8002e2c:	20000478 	.word	0x20000478
 8002e30:	20000068 	.word	0x20000068
 8002e34:	20000094 	.word	0x20000094
 8002e38:	200000a0 	.word	0x200000a0
 8002e3c:	2000047c 	.word	0x2000047c

08002e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e44:	480d      	ldr	r0, [pc, #52]	; (8002e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e46:	490e      	ldr	r1, [pc, #56]	; (8002e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e48:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e4c:	e002      	b.n	8002e54 <LoopCopyDataInit>

08002e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e52:	3304      	adds	r3, #4

08002e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e58:	d3f9      	bcc.n	8002e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e5a:	4a0b      	ldr	r2, [pc, #44]	; (8002e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e5c:	4c0b      	ldr	r4, [pc, #44]	; (8002e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e60:	e001      	b.n	8002e66 <LoopFillZerobss>

08002e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e64:	3204      	adds	r2, #4

08002e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e68:	d3fb      	bcc.n	8002e62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e6a:	f7ff f9d3 	bl	8002214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e6e:	f006 f94d 	bl	800910c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e72:	f7fd fca3 	bl	80007bc <main>
  bx  lr    
 8002e76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e80:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8002e84:	0800af6c 	.word	0x0800af6c
  ldr r2, =_sbss
 8002e88:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8002e8c:	200052a4 	.word	0x200052a4

08002e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e90:	e7fe      	b.n	8002e90 <ADC_IRQHandler>

08002e92 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60ba      	str	r2, [r7, #8]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	81fb      	strh	r3, [r7, #14]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	81bb      	strh	r3, [r7, #12]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eac:	3307      	adds	r3, #7
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	da00      	bge.n	8002eb4 <SSD1306_DrawBitmap+0x22>
 8002eb2:	3307      	adds	r3, #7
 8002eb4:	10db      	asrs	r3, r3, #3
 8002eb6:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	82bb      	strh	r3, [r7, #20]
 8002ec0:	e044      	b.n	8002f4c <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	827b      	strh	r3, [r7, #18]
 8002ec6:	e02f      	b.n	8002f28 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002ec8:	8a7b      	ldrh	r3, [r7, #18]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	75fb      	strb	r3, [r7, #23]
 8002ed8:	e012      	b.n	8002f00 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002eda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ede:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002ee2:	fb03 f202 	mul.w	r2, r3, r2
 8002ee6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	da00      	bge.n	8002ef0 <SSD1306_DrawBitmap+0x5e>
 8002eee:	3307      	adds	r3, #7
 8002ef0:	10db      	asrs	r3, r3, #3
 8002ef2:	b21b      	sxth	r3, r3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4413      	add	r3, r2
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002f00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	da09      	bge.n	8002f1c <SSD1306_DrawBitmap+0x8a>
 8002f08:	89fa      	ldrh	r2, [r7, #14]
 8002f0a:	8a7b      	ldrh	r3, [r7, #18]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	89b9      	ldrh	r1, [r7, #12]
 8002f12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f92e 	bl	8003178 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002f1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3301      	adds	r3, #1
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	827b      	strh	r3, [r7, #18]
 8002f28:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	dbc9      	blt.n	8002ec8 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002f34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	82bb      	strh	r3, [r7, #20]
 8002f40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	81bb      	strh	r3, [r7, #12]
 8002f4c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002f50:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	dbb4      	blt.n	8002ec2 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002f6a:	f000 fbdb 	bl	8003724 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002f6e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002f72:	2201      	movs	r2, #1
 8002f74:	2178      	movs	r1, #120	; 0x78
 8002f76:	485b      	ldr	r0, [pc, #364]	; (80030e4 <SSD1306_Init+0x180>)
 8002f78:	f001 fbee 	bl	8004758 <HAL_I2C_IsDeviceReady>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e0a9      	b.n	80030da <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002f86:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002f8a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002f8c:	e002      	b.n	8002f94 <SSD1306_Init+0x30>
		p--;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f9      	bne.n	8002f8e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002f9a:	22ae      	movs	r2, #174	; 0xae
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2078      	movs	r0, #120	; 0x78
 8002fa0:	f000 fc3c 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	2078      	movs	r0, #120	; 0x78
 8002faa:	f000 fc37 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002fae:	2210      	movs	r2, #16
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2078      	movs	r0, #120	; 0x78
 8002fb4:	f000 fc32 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002fb8:	22b0      	movs	r2, #176	; 0xb0
 8002fba:	2100      	movs	r1, #0
 8002fbc:	2078      	movs	r0, #120	; 0x78
 8002fbe:	f000 fc2d 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002fc2:	22c8      	movs	r2, #200	; 0xc8
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	2078      	movs	r0, #120	; 0x78
 8002fc8:	f000 fc28 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2100      	movs	r1, #0
 8002fd0:	2078      	movs	r0, #120	; 0x78
 8002fd2:	f000 fc23 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	2100      	movs	r1, #0
 8002fda:	2078      	movs	r0, #120	; 0x78
 8002fdc:	f000 fc1e 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002fe0:	2240      	movs	r2, #64	; 0x40
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	2078      	movs	r0, #120	; 0x78
 8002fe6:	f000 fc19 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002fea:	2281      	movs	r2, #129	; 0x81
 8002fec:	2100      	movs	r1, #0
 8002fee:	2078      	movs	r0, #120	; 0x78
 8002ff0:	f000 fc14 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002ff4:	22ff      	movs	r2, #255	; 0xff
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	2078      	movs	r0, #120	; 0x78
 8002ffa:	f000 fc0f 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002ffe:	22a1      	movs	r2, #161	; 0xa1
 8003000:	2100      	movs	r1, #0
 8003002:	2078      	movs	r0, #120	; 0x78
 8003004:	f000 fc0a 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003008:	22a6      	movs	r2, #166	; 0xa6
 800300a:	2100      	movs	r1, #0
 800300c:	2078      	movs	r0, #120	; 0x78
 800300e:	f000 fc05 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003012:	22a8      	movs	r2, #168	; 0xa8
 8003014:	2100      	movs	r1, #0
 8003016:	2078      	movs	r0, #120	; 0x78
 8003018:	f000 fc00 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800301c:	223f      	movs	r2, #63	; 0x3f
 800301e:	2100      	movs	r1, #0
 8003020:	2078      	movs	r0, #120	; 0x78
 8003022:	f000 fbfb 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003026:	22a4      	movs	r2, #164	; 0xa4
 8003028:	2100      	movs	r1, #0
 800302a:	2078      	movs	r0, #120	; 0x78
 800302c:	f000 fbf6 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003030:	22d3      	movs	r2, #211	; 0xd3
 8003032:	2100      	movs	r1, #0
 8003034:	2078      	movs	r0, #120	; 0x78
 8003036:	f000 fbf1 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800303a:	2200      	movs	r2, #0
 800303c:	2100      	movs	r1, #0
 800303e:	2078      	movs	r0, #120	; 0x78
 8003040:	f000 fbec 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003044:	22d5      	movs	r2, #213	; 0xd5
 8003046:	2100      	movs	r1, #0
 8003048:	2078      	movs	r0, #120	; 0x78
 800304a:	f000 fbe7 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800304e:	22f0      	movs	r2, #240	; 0xf0
 8003050:	2100      	movs	r1, #0
 8003052:	2078      	movs	r0, #120	; 0x78
 8003054:	f000 fbe2 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003058:	22d9      	movs	r2, #217	; 0xd9
 800305a:	2100      	movs	r1, #0
 800305c:	2078      	movs	r0, #120	; 0x78
 800305e:	f000 fbdd 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003062:	2222      	movs	r2, #34	; 0x22
 8003064:	2100      	movs	r1, #0
 8003066:	2078      	movs	r0, #120	; 0x78
 8003068:	f000 fbd8 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800306c:	22da      	movs	r2, #218	; 0xda
 800306e:	2100      	movs	r1, #0
 8003070:	2078      	movs	r0, #120	; 0x78
 8003072:	f000 fbd3 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003076:	2212      	movs	r2, #18
 8003078:	2100      	movs	r1, #0
 800307a:	2078      	movs	r0, #120	; 0x78
 800307c:	f000 fbce 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003080:	22db      	movs	r2, #219	; 0xdb
 8003082:	2100      	movs	r1, #0
 8003084:	2078      	movs	r0, #120	; 0x78
 8003086:	f000 fbc9 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800308a:	2220      	movs	r2, #32
 800308c:	2100      	movs	r1, #0
 800308e:	2078      	movs	r0, #120	; 0x78
 8003090:	f000 fbc4 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003094:	228d      	movs	r2, #141	; 0x8d
 8003096:	2100      	movs	r1, #0
 8003098:	2078      	movs	r0, #120	; 0x78
 800309a:	f000 fbbf 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800309e:	2214      	movs	r2, #20
 80030a0:	2100      	movs	r1, #0
 80030a2:	2078      	movs	r0, #120	; 0x78
 80030a4:	f000 fbba 	bl	800381c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80030a8:	22af      	movs	r2, #175	; 0xaf
 80030aa:	2100      	movs	r1, #0
 80030ac:	2078      	movs	r0, #120	; 0x78
 80030ae:	f000 fbb5 	bl	800381c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80030b2:	222e      	movs	r2, #46	; 0x2e
 80030b4:	2100      	movs	r1, #0
 80030b6:	2078      	movs	r0, #120	; 0x78
 80030b8:	f000 fbb0 	bl	800381c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80030bc:	2000      	movs	r0, #0
 80030be:	f000 f843 	bl	8003148 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80030c2:	f000 f813 	bl	80030ec <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <SSD1306_Init+0x184>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <SSD1306_Init+0x184>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <SSD1306_Init+0x184>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80030d8:	2301      	movs	r3, #1
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200001ec 	.word	0x200001ec
 80030e8:	20000880 	.word	0x20000880

080030ec <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80030f2:	2300      	movs	r3, #0
 80030f4:	71fb      	strb	r3, [r7, #7]
 80030f6:	e01d      	b.n	8003134 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	3b50      	subs	r3, #80	; 0x50
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	2100      	movs	r1, #0
 8003102:	2078      	movs	r0, #120	; 0x78
 8003104:	f000 fb8a 	bl	800381c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003108:	2200      	movs	r2, #0
 800310a:	2100      	movs	r1, #0
 800310c:	2078      	movs	r0, #120	; 0x78
 800310e:	f000 fb85 	bl	800381c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003112:	2210      	movs	r2, #16
 8003114:	2100      	movs	r1, #0
 8003116:	2078      	movs	r0, #120	; 0x78
 8003118:	f000 fb80 	bl	800381c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	01db      	lsls	r3, r3, #7
 8003120:	4a08      	ldr	r2, [pc, #32]	; (8003144 <SSD1306_UpdateScreen+0x58>)
 8003122:	441a      	add	r2, r3
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	2140      	movs	r1, #64	; 0x40
 8003128:	2078      	movs	r0, #120	; 0x78
 800312a:	f000 fb11 	bl	8003750 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	3301      	adds	r3, #1
 8003132:	71fb      	strb	r3, [r7, #7]
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	2b07      	cmp	r3, #7
 8003138:	d9de      	bls.n	80030f8 <SSD1306_UpdateScreen+0xc>
	}
}
 800313a:	bf00      	nop
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20000480 	.word	0x20000480

08003148 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <SSD1306_Fill+0x14>
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <SSD1306_Fill+0x16>
 800315c:	23ff      	movs	r3, #255	; 0xff
 800315e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003162:	4619      	mov	r1, r3
 8003164:	4803      	ldr	r0, [pc, #12]	; (8003174 <SSD1306_Fill+0x2c>)
 8003166:	f006 f805 	bl	8009174 <memset>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000480 	.word	0x20000480

08003178 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	80fb      	strh	r3, [r7, #6]
 8003182:	460b      	mov	r3, r1
 8003184:	80bb      	strh	r3, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	70fb      	strb	r3, [r7, #3]
	if (
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	2b7f      	cmp	r3, #127	; 0x7f
 800318e:	d848      	bhi.n	8003222 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003190:	88bb      	ldrh	r3, [r7, #4]
 8003192:	2b3f      	cmp	r3, #63	; 0x3f
 8003194:	d845      	bhi.n	8003222 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <SSD1306_DrawPixel+0xb8>)
 8003198:	791b      	ldrb	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d11a      	bne.n	80031e8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80031b2:	88fa      	ldrh	r2, [r7, #6]
 80031b4:	88bb      	ldrh	r3, [r7, #4]
 80031b6:	08db      	lsrs	r3, r3, #3
 80031b8:	b298      	uxth	r0, r3
 80031ba:	4603      	mov	r3, r0
 80031bc:	01db      	lsls	r3, r3, #7
 80031be:	4413      	add	r3, r2
 80031c0:	4a1c      	ldr	r2, [pc, #112]	; (8003234 <SSD1306_DrawPixel+0xbc>)
 80031c2:	5cd3      	ldrb	r3, [r2, r3]
 80031c4:	b25a      	sxtb	r2, r3
 80031c6:	88bb      	ldrh	r3, [r7, #4]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	b25b      	sxtb	r3, r3
 80031d4:	4313      	orrs	r3, r2
 80031d6:	b259      	sxtb	r1, r3
 80031d8:	88fa      	ldrh	r2, [r7, #6]
 80031da:	4603      	mov	r3, r0
 80031dc:	01db      	lsls	r3, r3, #7
 80031de:	4413      	add	r3, r2
 80031e0:	b2c9      	uxtb	r1, r1
 80031e2:	4a14      	ldr	r2, [pc, #80]	; (8003234 <SSD1306_DrawPixel+0xbc>)
 80031e4:	54d1      	strb	r1, [r2, r3]
 80031e6:	e01d      	b.n	8003224 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80031e8:	88fa      	ldrh	r2, [r7, #6]
 80031ea:	88bb      	ldrh	r3, [r7, #4]
 80031ec:	08db      	lsrs	r3, r3, #3
 80031ee:	b298      	uxth	r0, r3
 80031f0:	4603      	mov	r3, r0
 80031f2:	01db      	lsls	r3, r3, #7
 80031f4:	4413      	add	r3, r2
 80031f6:	4a0f      	ldr	r2, [pc, #60]	; (8003234 <SSD1306_DrawPixel+0xbc>)
 80031f8:	5cd3      	ldrb	r3, [r2, r3]
 80031fa:	b25a      	sxtb	r2, r3
 80031fc:	88bb      	ldrh	r3, [r7, #4]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	2101      	movs	r1, #1
 8003204:	fa01 f303 	lsl.w	r3, r1, r3
 8003208:	b25b      	sxtb	r3, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	b25b      	sxtb	r3, r3
 800320e:	4013      	ands	r3, r2
 8003210:	b259      	sxtb	r1, r3
 8003212:	88fa      	ldrh	r2, [r7, #6]
 8003214:	4603      	mov	r3, r0
 8003216:	01db      	lsls	r3, r3, #7
 8003218:	4413      	add	r3, r2
 800321a:	b2c9      	uxtb	r1, r1
 800321c:	4a05      	ldr	r2, [pc, #20]	; (8003234 <SSD1306_DrawPixel+0xbc>)
 800321e:	54d1      	strb	r1, [r2, r3]
 8003220:	e000      	b.n	8003224 <SSD1306_DrawPixel+0xac>
		return;
 8003222:	bf00      	nop
	}
}
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000880 	.word	0x20000880
 8003234:	20000480 	.word	0x20000480

08003238 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	460a      	mov	r2, r1
 8003242:	80fb      	strh	r3, [r7, #6]
 8003244:	4613      	mov	r3, r2
 8003246:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003248:	4a05      	ldr	r2, [pc, #20]	; (8003260 <SSD1306_GotoXY+0x28>)
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800324e:	4a04      	ldr	r2, [pc, #16]	; (8003260 <SSD1306_GotoXY+0x28>)
 8003250:	88bb      	ldrh	r3, [r7, #4]
 8003252:	8053      	strh	r3, [r2, #2]
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	20000880 	.word	0x20000880

08003264 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	71fb      	strb	r3, [r7, #7]
 8003270:	4613      	mov	r3, r2
 8003272:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003274:	4b3a      	ldr	r3, [pc, #232]	; (8003360 <SSD1306_Putc+0xfc>)
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	4413      	add	r3, r2
	if (
 8003280:	2b7f      	cmp	r3, #127	; 0x7f
 8003282:	dc07      	bgt.n	8003294 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003284:	4b36      	ldr	r3, [pc, #216]	; (8003360 <SSD1306_Putc+0xfc>)
 8003286:	885b      	ldrh	r3, [r3, #2]
 8003288:	461a      	mov	r2, r3
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	785b      	ldrb	r3, [r3, #1]
 800328e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003290:	2b3f      	cmp	r3, #63	; 0x3f
 8003292:	dd01      	ble.n	8003298 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003294:	2300      	movs	r3, #0
 8003296:	e05e      	b.n	8003356 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	e04b      	b.n	8003336 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	3b20      	subs	r3, #32
 80032a6:	6839      	ldr	r1, [r7, #0]
 80032a8:	7849      	ldrb	r1, [r1, #1]
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4619      	mov	r1, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	440b      	add	r3, r1
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	e030      	b.n	8003324 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d010      	beq.n	80032f4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80032d2:	4b23      	ldr	r3, [pc, #140]	; (8003360 <SSD1306_Putc+0xfc>)
 80032d4:	881a      	ldrh	r2, [r3, #0]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	4413      	add	r3, r2
 80032dc:	b298      	uxth	r0, r3
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <SSD1306_Putc+0xfc>)
 80032e0:	885a      	ldrh	r2, [r3, #2]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	79ba      	ldrb	r2, [r7, #6]
 80032ec:	4619      	mov	r1, r3
 80032ee:	f7ff ff43 	bl	8003178 <SSD1306_DrawPixel>
 80032f2:	e014      	b.n	800331e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80032f4:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <SSD1306_Putc+0xfc>)
 80032f6:	881a      	ldrh	r2, [r3, #0]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	b298      	uxth	r0, r3
 8003300:	4b17      	ldr	r3, [pc, #92]	; (8003360 <SSD1306_Putc+0xfc>)
 8003302:	885a      	ldrh	r2, [r3, #2]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	b29b      	uxth	r3, r3
 8003308:	4413      	add	r3, r2
 800330a:	b299      	uxth	r1, r3
 800330c:	79bb      	ldrb	r3, [r7, #6]
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf0c      	ite	eq
 8003312:	2301      	moveq	r3, #1
 8003314:	2300      	movne	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	f7ff ff2d 	bl	8003178 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	3301      	adds	r3, #1
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4293      	cmp	r3, r2
 800332e:	d3c8      	bcc.n	80032c2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	3301      	adds	r3, #1
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	785b      	ldrb	r3, [r3, #1]
 800333a:	461a      	mov	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	4293      	cmp	r3, r2
 8003340:	d3ad      	bcc.n	800329e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003342:	4b07      	ldr	r3, [pc, #28]	; (8003360 <SSD1306_Putc+0xfc>)
 8003344:	881a      	ldrh	r2, [r3, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	4413      	add	r3, r2
 800334e:	b29a      	uxth	r2, r3
 8003350:	4b03      	ldr	r3, [pc, #12]	; (8003360 <SSD1306_Putc+0xfc>)
 8003352:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8003354:	79fb      	ldrb	r3, [r7, #7]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000880 	.word	0x20000880

08003364 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	4613      	mov	r3, r2
 8003370:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003372:	e012      	b.n	800339a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	79fa      	ldrb	r2, [r7, #7]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff71 	bl	8003264 <SSD1306_Putc>
 8003382:	4603      	mov	r3, r0
 8003384:	461a      	mov	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d002      	beq.n	8003394 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	e008      	b.n	80033a6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3301      	adds	r3, #1
 8003398:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e8      	bne.n	8003374 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	781b      	ldrb	r3, [r3, #0]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80033ae:	b590      	push	{r4, r7, lr}
 80033b0:	b087      	sub	sp, #28
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	4604      	mov	r4, r0
 80033b6:	4608      	mov	r0, r1
 80033b8:	4611      	mov	r1, r2
 80033ba:	461a      	mov	r2, r3
 80033bc:	4623      	mov	r3, r4
 80033be:	80fb      	strh	r3, [r7, #6]
 80033c0:	4603      	mov	r3, r0
 80033c2:	80bb      	strh	r3, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
 80033c8:	4613      	mov	r3, r2
 80033ca:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	2b7f      	cmp	r3, #127	; 0x7f
 80033d0:	d901      	bls.n	80033d6 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80033d2:	237f      	movs	r3, #127	; 0x7f
 80033d4:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80033d6:	887b      	ldrh	r3, [r7, #2]
 80033d8:	2b7f      	cmp	r3, #127	; 0x7f
 80033da:	d901      	bls.n	80033e0 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80033dc:	237f      	movs	r3, #127	; 0x7f
 80033de:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80033e0:	88bb      	ldrh	r3, [r7, #4]
 80033e2:	2b3f      	cmp	r3, #63	; 0x3f
 80033e4:	d901      	bls.n	80033ea <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80033e6:	233f      	movs	r3, #63	; 0x3f
 80033e8:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80033ea:	883b      	ldrh	r3, [r7, #0]
 80033ec:	2b3f      	cmp	r3, #63	; 0x3f
 80033ee:	d901      	bls.n	80033f4 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80033f0:	233f      	movs	r3, #63	; 0x3f
 80033f2:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 80033f4:	88fa      	ldrh	r2, [r7, #6]
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d205      	bcs.n	8003408 <SSD1306_DrawLine+0x5a>
 80033fc:	887a      	ldrh	r2, [r7, #2]
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	b29b      	uxth	r3, r3
 8003404:	b21b      	sxth	r3, r3
 8003406:	e004      	b.n	8003412 <SSD1306_DrawLine+0x64>
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	b29b      	uxth	r3, r3
 8003410:	b21b      	sxth	r3, r3
 8003412:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8003414:	88ba      	ldrh	r2, [r7, #4]
 8003416:	883b      	ldrh	r3, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d205      	bcs.n	8003428 <SSD1306_DrawLine+0x7a>
 800341c:	883a      	ldrh	r2, [r7, #0]
 800341e:	88bb      	ldrh	r3, [r7, #4]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	b29b      	uxth	r3, r3
 8003424:	b21b      	sxth	r3, r3
 8003426:	e004      	b.n	8003432 <SSD1306_DrawLine+0x84>
 8003428:	88ba      	ldrh	r2, [r7, #4]
 800342a:	883b      	ldrh	r3, [r7, #0]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	b29b      	uxth	r3, r3
 8003430:	b21b      	sxth	r3, r3
 8003432:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8003434:	88fa      	ldrh	r2, [r7, #6]
 8003436:	887b      	ldrh	r3, [r7, #2]
 8003438:	429a      	cmp	r2, r3
 800343a:	d201      	bcs.n	8003440 <SSD1306_DrawLine+0x92>
 800343c:	2301      	movs	r3, #1
 800343e:	e001      	b.n	8003444 <SSD1306_DrawLine+0x96>
 8003440:	f04f 33ff 	mov.w	r3, #4294967295
 8003444:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8003446:	88ba      	ldrh	r2, [r7, #4]
 8003448:	883b      	ldrh	r3, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d201      	bcs.n	8003452 <SSD1306_DrawLine+0xa4>
 800344e:	2301      	movs	r3, #1
 8003450:	e001      	b.n	8003456 <SSD1306_DrawLine+0xa8>
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
 8003456:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8003458:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800345c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003460:	429a      	cmp	r2, r3
 8003462:	dd06      	ble.n	8003472 <SSD1306_DrawLine+0xc4>
 8003464:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003468:	0fda      	lsrs	r2, r3, #31
 800346a:	4413      	add	r3, r2
 800346c:	105b      	asrs	r3, r3, #1
 800346e:	b21b      	sxth	r3, r3
 8003470:	e006      	b.n	8003480 <SSD1306_DrawLine+0xd2>
 8003472:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003476:	0fda      	lsrs	r2, r3, #31
 8003478:	4413      	add	r3, r2
 800347a:	105b      	asrs	r3, r3, #1
 800347c:	425b      	negs	r3, r3
 800347e:	b21b      	sxth	r3, r3
 8003480:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8003482:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d129      	bne.n	80034de <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800348a:	883a      	ldrh	r2, [r7, #0]
 800348c:	88bb      	ldrh	r3, [r7, #4]
 800348e:	429a      	cmp	r2, r3
 8003490:	d205      	bcs.n	800349e <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8003492:	883b      	ldrh	r3, [r7, #0]
 8003494:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8003496:	88bb      	ldrh	r3, [r7, #4]
 8003498:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800349a:	893b      	ldrh	r3, [r7, #8]
 800349c:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 800349e:	887a      	ldrh	r2, [r7, #2]
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d205      	bcs.n	80034b2 <SSD1306_DrawLine+0x104>
			tmp = x1;
 80034a6:	887b      	ldrh	r3, [r7, #2]
 80034a8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80034ae:	893b      	ldrh	r3, [r7, #8]
 80034b0:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80034b2:	88bb      	ldrh	r3, [r7, #4]
 80034b4:	82bb      	strh	r3, [r7, #20]
 80034b6:	e00c      	b.n	80034d2 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80034b8:	8ab9      	ldrh	r1, [r7, #20]
 80034ba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fe59 	bl	8003178 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80034c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3301      	adds	r3, #1
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	82bb      	strh	r3, [r7, #20]
 80034d2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80034d6:	883b      	ldrh	r3, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	dded      	ble.n	80034b8 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 80034dc:	e05f      	b.n	800359e <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 80034de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d129      	bne.n	800353a <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80034e6:	883a      	ldrh	r2, [r7, #0]
 80034e8:	88bb      	ldrh	r3, [r7, #4]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d205      	bcs.n	80034fa <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80034ee:	883b      	ldrh	r3, [r7, #0]
 80034f0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80034f2:	88bb      	ldrh	r3, [r7, #4]
 80034f4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80034f6:	893b      	ldrh	r3, [r7, #8]
 80034f8:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d205      	bcs.n	800350e <SSD1306_DrawLine+0x160>
			tmp = x1;
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800350a:	893b      	ldrh	r3, [r7, #8]
 800350c:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	82bb      	strh	r3, [r7, #20]
 8003512:	e00c      	b.n	800352e <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8003514:	8abb      	ldrh	r3, [r7, #20]
 8003516:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800351a:	88b9      	ldrh	r1, [r7, #4]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fe2b 	bl	8003178 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8003522:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003526:	b29b      	uxth	r3, r3
 8003528:	3301      	adds	r3, #1
 800352a:	b29b      	uxth	r3, r3
 800352c:	82bb      	strh	r3, [r7, #20]
 800352e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003532:	887b      	ldrh	r3, [r7, #2]
 8003534:	429a      	cmp	r2, r3
 8003536:	dded      	ble.n	8003514 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8003538:	e031      	b.n	800359e <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800353a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800353e:	88b9      	ldrh	r1, [r7, #4]
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fe18 	bl	8003178 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	887b      	ldrh	r3, [r7, #2]
 800354c:	429a      	cmp	r2, r3
 800354e:	d103      	bne.n	8003558 <SSD1306_DrawLine+0x1aa>
 8003550:	88ba      	ldrh	r2, [r7, #4]
 8003552:	883b      	ldrh	r3, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d021      	beq.n	800359c <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8003558:	8afb      	ldrh	r3, [r7, #22]
 800355a:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 800355c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003560:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003564:	425b      	negs	r3, r3
 8003566:	429a      	cmp	r2, r3
 8003568:	dd08      	ble.n	800357c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800356a:	8afa      	ldrh	r2, [r7, #22]
 800356c:	8a3b      	ldrh	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	b29b      	uxth	r3, r3
 8003572:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8003574:	89fa      	ldrh	r2, [r7, #14]
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	4413      	add	r3, r2
 800357a:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 800357c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003580:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003584:	429a      	cmp	r2, r3
 8003586:	dad8      	bge.n	800353a <SSD1306_DrawLine+0x18c>
			err += dx;
 8003588:	8afa      	ldrh	r2, [r7, #22]
 800358a:	8a7b      	ldrh	r3, [r7, #18]
 800358c:	4413      	add	r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8003592:	89ba      	ldrh	r2, [r7, #12]
 8003594:	88bb      	ldrh	r3, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800359a:	e7ce      	b.n	800353a <SSD1306_DrawLine+0x18c>
			break;
 800359c:	bf00      	nop
		}
	}
}
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd90      	pop	{r4, r7, pc}

080035a4 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	4604      	mov	r4, r0
 80035ac:	4608      	mov	r0, r1
 80035ae:	4611      	mov	r1, r2
 80035b0:	461a      	mov	r2, r3
 80035b2:	4623      	mov	r3, r4
 80035b4:	80fb      	strh	r3, [r7, #6]
 80035b6:	4603      	mov	r3, r0
 80035b8:	80bb      	strh	r3, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	807b      	strh	r3, [r7, #2]
 80035be:	4613      	mov	r3, r2
 80035c0:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	2b7f      	cmp	r3, #127	; 0x7f
 80035c6:	d853      	bhi.n	8003670 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 80035c8:	88bb      	ldrh	r3, [r7, #4]
 80035ca:	2b3f      	cmp	r3, #63	; 0x3f
 80035cc:	d850      	bhi.n	8003670 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80035ce:	88fa      	ldrh	r2, [r7, #6]
 80035d0:	887b      	ldrh	r3, [r7, #2]
 80035d2:	4413      	add	r3, r2
 80035d4:	2b7f      	cmp	r3, #127	; 0x7f
 80035d6:	dd03      	ble.n	80035e0 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80035de:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80035e0:	88ba      	ldrh	r2, [r7, #4]
 80035e2:	883b      	ldrh	r3, [r7, #0]
 80035e4:	4413      	add	r3, r2
 80035e6:	2b3f      	cmp	r3, #63	; 0x3f
 80035e8:	dd03      	ble.n	80035f2 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80035ea:	88bb      	ldrh	r3, [r7, #4]
 80035ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80035f0:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 80035f2:	88fa      	ldrh	r2, [r7, #6]
 80035f4:	887b      	ldrh	r3, [r7, #2]
 80035f6:	4413      	add	r3, r2
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	88bc      	ldrh	r4, [r7, #4]
 80035fc:	88b9      	ldrh	r1, [r7, #4]
 80035fe:	88f8      	ldrh	r0, [r7, #6]
 8003600:	7e3b      	ldrb	r3, [r7, #24]
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	4623      	mov	r3, r4
 8003606:	f7ff fed2 	bl	80033ae <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 800360a:	88ba      	ldrh	r2, [r7, #4]
 800360c:	883b      	ldrh	r3, [r7, #0]
 800360e:	4413      	add	r3, r2
 8003610:	b299      	uxth	r1, r3
 8003612:	88fa      	ldrh	r2, [r7, #6]
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	4413      	add	r3, r2
 8003618:	b29c      	uxth	r4, r3
 800361a:	88ba      	ldrh	r2, [r7, #4]
 800361c:	883b      	ldrh	r3, [r7, #0]
 800361e:	4413      	add	r3, r2
 8003620:	b29a      	uxth	r2, r3
 8003622:	88f8      	ldrh	r0, [r7, #6]
 8003624:	7e3b      	ldrb	r3, [r7, #24]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	4622      	mov	r2, r4
 800362c:	f7ff febf 	bl	80033ae <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8003630:	88ba      	ldrh	r2, [r7, #4]
 8003632:	883b      	ldrh	r3, [r7, #0]
 8003634:	4413      	add	r3, r2
 8003636:	b29c      	uxth	r4, r3
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	88b9      	ldrh	r1, [r7, #4]
 800363c:	88f8      	ldrh	r0, [r7, #6]
 800363e:	7e3b      	ldrb	r3, [r7, #24]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	4623      	mov	r3, r4
 8003644:	f7ff feb3 	bl	80033ae <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8003648:	88fa      	ldrh	r2, [r7, #6]
 800364a:	887b      	ldrh	r3, [r7, #2]
 800364c:	4413      	add	r3, r2
 800364e:	b298      	uxth	r0, r3
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	887b      	ldrh	r3, [r7, #2]
 8003654:	4413      	add	r3, r2
 8003656:	b29c      	uxth	r4, r3
 8003658:	88ba      	ldrh	r2, [r7, #4]
 800365a:	883b      	ldrh	r3, [r7, #0]
 800365c:	4413      	add	r3, r2
 800365e:	b29a      	uxth	r2, r3
 8003660:	88b9      	ldrh	r1, [r7, #4]
 8003662:	7e3b      	ldrb	r3, [r7, #24]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	4613      	mov	r3, r2
 8003668:	4622      	mov	r2, r4
 800366a:	f7ff fea0 	bl	80033ae <SSD1306_DrawLine>
 800366e:	e000      	b.n	8003672 <SSD1306_DrawRectangle+0xce>
		return;
 8003670:	bf00      	nop
}
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bd90      	pop	{r4, r7, pc}

08003678 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b087      	sub	sp, #28
 800367c:	af02      	add	r7, sp, #8
 800367e:	4604      	mov	r4, r0
 8003680:	4608      	mov	r0, r1
 8003682:	4611      	mov	r1, r2
 8003684:	461a      	mov	r2, r3
 8003686:	4623      	mov	r3, r4
 8003688:	80fb      	strh	r3, [r7, #6]
 800368a:	4603      	mov	r3, r0
 800368c:	80bb      	strh	r3, [r7, #4]
 800368e:	460b      	mov	r3, r1
 8003690:	807b      	strh	r3, [r7, #2]
 8003692:	4613      	mov	r3, r2
 8003694:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	2b7f      	cmp	r3, #127	; 0x7f
 800369a:	d836      	bhi.n	800370a <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 800369c:	88bb      	ldrh	r3, [r7, #4]
 800369e:	2b3f      	cmp	r3, #63	; 0x3f
 80036a0:	d833      	bhi.n	800370a <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80036a2:	88fa      	ldrh	r2, [r7, #6]
 80036a4:	887b      	ldrh	r3, [r7, #2]
 80036a6:	4413      	add	r3, r2
 80036a8:	2b7f      	cmp	r3, #127	; 0x7f
 80036aa:	dd03      	ble.n	80036b4 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80036b2:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80036b4:	88ba      	ldrh	r2, [r7, #4]
 80036b6:	883b      	ldrh	r3, [r7, #0]
 80036b8:	4413      	add	r3, r2
 80036ba:	2b3f      	cmp	r3, #63	; 0x3f
 80036bc:	dd03      	ble.n	80036c6 <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80036be:	88bb      	ldrh	r3, [r7, #4]
 80036c0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80036c4:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
 80036ca:	e018      	b.n	80036fe <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	88bb      	ldrh	r3, [r7, #4]
 80036d2:	4413      	add	r3, r2
 80036d4:	b299      	uxth	r1, r3
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	887b      	ldrh	r3, [r7, #2]
 80036da:	4413      	add	r3, r2
 80036dc:	b29c      	uxth	r4, r3
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	88bb      	ldrh	r3, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	88f8      	ldrh	r0, [r7, #6]
 80036ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	4622      	mov	r2, r4
 80036f4:	f7ff fe5b 	bl	80033ae <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	3301      	adds	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	b29b      	uxth	r3, r3
 8003702:	883a      	ldrh	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d2e1      	bcs.n	80036cc <SSD1306_DrawFilledRectangle+0x54>
 8003708:	e000      	b.n	800370c <SSD1306_DrawFilledRectangle+0x94>
		return;
 800370a:	bf00      	nop
	}
}
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	bd90      	pop	{r4, r7, pc}

08003712 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8003716:	2000      	movs	r0, #0
 8003718:	f7ff fd16 	bl	8003148 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800371c:	f7ff fce6 	bl	80030ec <SSD1306_UpdateScreen>
}
 8003720:	bf00      	nop
 8003722:	bd80      	pop	{r7, pc}

08003724 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <ssd1306_I2C_Init+0x28>)
 800372c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800372e:	e002      	b.n	8003736 <ssd1306_I2C_Init+0x12>
		p--;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f9      	bne.n	8003730 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	0003d090 	.word	0x0003d090

08003750 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b0c7      	sub	sp, #284	; 0x11c
 8003754:	af02      	add	r7, sp, #8
 8003756:	4604      	mov	r4, r0
 8003758:	4608      	mov	r0, r1
 800375a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800375e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8003762:	600a      	str	r2, [r1, #0]
 8003764:	4619      	mov	r1, r3
 8003766:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800376a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800376e:	4622      	mov	r2, r4
 8003770:	701a      	strb	r2, [r3, #0]
 8003772:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003776:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800377a:	4602      	mov	r2, r0
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003782:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003786:	460a      	mov	r2, r1
 8003788:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800378a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800378e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003792:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003796:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800379a:	7812      	ldrb	r2, [r2, #0]
 800379c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800379e:	2300      	movs	r3, #0
 80037a0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80037a4:	e015      	b.n	80037d2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80037a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80037aa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80037ae:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	441a      	add	r2, r3
 80037b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80037ba:	3301      	adds	r3, #1
 80037bc:	7811      	ldrb	r1, [r2, #0]
 80037be:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80037c2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80037c6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80037c8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80037cc:	3301      	adds	r3, #1
 80037ce:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80037d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80037dc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80037e0:	8812      	ldrh	r2, [r2, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d8df      	bhi.n	80037a6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80037e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037ea:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	b299      	uxth	r1, r3
 80037f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	3301      	adds	r3, #1
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f107 020c 	add.w	r2, r7, #12
 8003804:	200a      	movs	r0, #10
 8003806:	9000      	str	r0, [sp, #0]
 8003808:	4803      	ldr	r0, [pc, #12]	; (8003818 <ssd1306_I2C_WriteMulti+0xc8>)
 800380a:	f000 fc81 	bl	8004110 <HAL_I2C_Master_Transmit>
}
 800380e:	bf00      	nop
 8003810:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003814:	46bd      	mov	sp, r7
 8003816:	bd90      	pop	{r4, r7, pc}
 8003818:	200001ec 	.word	0x200001ec

0800381c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af02      	add	r7, sp, #8
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
 8003826:	460b      	mov	r3, r1
 8003828:	71bb      	strb	r3, [r7, #6]
 800382a:	4613      	mov	r3, r2
 800382c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800382e:	79bb      	ldrb	r3, [r7, #6]
 8003830:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003832:	797b      	ldrb	r3, [r7, #5]
 8003834:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	b299      	uxth	r1, r3
 800383a:	f107 020c 	add.w	r2, r7, #12
 800383e:	230a      	movs	r3, #10
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2302      	movs	r3, #2
 8003844:	4803      	ldr	r0, [pc, #12]	; (8003854 <ssd1306_I2C_Write+0x38>)
 8003846:	f000 fc63 	bl	8004110 <HAL_I2C_Master_Transmit>
}
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	200001ec 	.word	0x200001ec

08003858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_Init+0x40>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0d      	ldr	r2, [pc, #52]	; (8003898 <HAL_Init+0x40>)
 8003862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_Init+0x40>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <HAL_Init+0x40>)
 800386e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <HAL_Init+0x40>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a07      	ldr	r2, [pc, #28]	; (8003898 <HAL_Init+0x40>)
 800387a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003880:	2003      	movs	r0, #3
 8003882:	f000 f8fc 	bl	8003a7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003886:	200f      	movs	r0, #15
 8003888:	f7fe fc1a 	bl	80020c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800388c:	f7fe fa94 	bl	8001db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023c00 	.word	0x40023c00

0800389c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_IncTick+0x20>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_IncTick+0x24>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4413      	add	r3, r2
 80038ac:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <HAL_IncTick+0x24>)
 80038ae:	6013      	str	r3, [r2, #0]
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20000158 	.word	0x20000158
 80038c0:	20000888 	.word	0x20000888

080038c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return uwTick;
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <HAL_GetTick+0x14>)
 80038ca:	681b      	ldr	r3, [r3, #0]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000888 	.word	0x20000888

080038dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038e4:	f7ff ffee 	bl	80038c4 <HAL_GetTick>
 80038e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d005      	beq.n	8003902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <HAL_Delay+0x44>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003902:	bf00      	nop
 8003904:	f7ff ffde 	bl	80038c4 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	429a      	cmp	r2, r3
 8003912:	d8f7      	bhi.n	8003904 <HAL_Delay+0x28>
  {
  }
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000158 	.word	0x20000158

08003924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <__NVIC_SetPriorityGrouping+0x44>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003940:	4013      	ands	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800394c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003956:	4a04      	ldr	r2, [pc, #16]	; (8003968 <__NVIC_SetPriorityGrouping+0x44>)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	60d3      	str	r3, [r2, #12]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003970:	4b04      	ldr	r3, [pc, #16]	; (8003984 <__NVIC_GetPriorityGrouping+0x18>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	f003 0307 	and.w	r3, r3, #7
}
 800397a:	4618      	mov	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003996:	2b00      	cmp	r3, #0
 8003998:	db0b      	blt.n	80039b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	f003 021f 	and.w	r2, r3, #31
 80039a0:	4907      	ldr	r1, [pc, #28]	; (80039c0 <__NVIC_EnableIRQ+0x38>)
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	2001      	movs	r0, #1
 80039aa:	fa00 f202 	lsl.w	r2, r0, r2
 80039ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	e000e100 	.word	0xe000e100

080039c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	db0a      	blt.n	80039ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	490c      	ldr	r1, [pc, #48]	; (8003a10 <__NVIC_SetPriority+0x4c>)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	0112      	lsls	r2, r2, #4
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	440b      	add	r3, r1
 80039e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039ec:	e00a      	b.n	8003a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4908      	ldr	r1, [pc, #32]	; (8003a14 <__NVIC_SetPriority+0x50>)
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	3b04      	subs	r3, #4
 80039fc:	0112      	lsls	r2, r2, #4
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	440b      	add	r3, r1
 8003a02:	761a      	strb	r2, [r3, #24]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000e100 	.word	0xe000e100
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	; 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f1c3 0307 	rsb	r3, r3, #7
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	bf28      	it	cs
 8003a36:	2304      	movcs	r3, #4
 8003a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	d902      	bls.n	8003a48 <NVIC_EncodePriority+0x30>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3b03      	subs	r3, #3
 8003a46:	e000      	b.n	8003a4a <NVIC_EncodePriority+0x32>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43da      	mvns	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a60:	f04f 31ff 	mov.w	r1, #4294967295
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	43d9      	mvns	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a70:	4313      	orrs	r3, r2
         );
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3724      	adds	r7, #36	; 0x24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff ff4c 	bl	8003924 <__NVIC_SetPriorityGrouping>
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa6:	f7ff ff61 	bl	800396c <__NVIC_GetPriorityGrouping>
 8003aaa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	6978      	ldr	r0, [r7, #20]
 8003ab2:	f7ff ffb1 	bl	8003a18 <NVIC_EncodePriority>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003abc:	4611      	mov	r1, r2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ff80 	bl	80039c4 <__NVIC_SetPriority>
}
 8003ac4:	bf00      	nop
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff ff54 	bl	8003988 <__NVIC_EnableIRQ>
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b089      	sub	sp, #36	; 0x24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	e159      	b.n	8003db8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b04:	2201      	movs	r2, #1
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4013      	ands	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	f040 8148 	bne.w	8003db2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d005      	beq.n	8003b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d130      	bne.n	8003b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	2203      	movs	r2, #3
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b70:	2201      	movs	r2, #1
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 0201 	and.w	r2, r3, #1
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d017      	beq.n	8003bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d123      	bne.n	8003c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	08da      	lsrs	r2, r3, #3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3208      	adds	r2, #8
 8003bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	220f      	movs	r2, #15
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	08da      	lsrs	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3208      	adds	r2, #8
 8003c26:	69b9      	ldr	r1, [r7, #24]
 8003c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	2203      	movs	r2, #3
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 0203 	and.w	r2, r3, #3
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 80a2 	beq.w	8003db2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	4b57      	ldr	r3, [pc, #348]	; (8003dd0 <HAL_GPIO_Init+0x2e8>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	4a56      	ldr	r2, [pc, #344]	; (8003dd0 <HAL_GPIO_Init+0x2e8>)
 8003c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c7e:	4b54      	ldr	r3, [pc, #336]	; (8003dd0 <HAL_GPIO_Init+0x2e8>)
 8003c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c8a:	4a52      	ldr	r2, [pc, #328]	; (8003dd4 <HAL_GPIO_Init+0x2ec>)
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	089b      	lsrs	r3, r3, #2
 8003c90:	3302      	adds	r3, #2
 8003c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	220f      	movs	r2, #15
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4013      	ands	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a49      	ldr	r2, [pc, #292]	; (8003dd8 <HAL_GPIO_Init+0x2f0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d019      	beq.n	8003cea <HAL_GPIO_Init+0x202>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a48      	ldr	r2, [pc, #288]	; (8003ddc <HAL_GPIO_Init+0x2f4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <HAL_GPIO_Init+0x1fe>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a47      	ldr	r2, [pc, #284]	; (8003de0 <HAL_GPIO_Init+0x2f8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00d      	beq.n	8003ce2 <HAL_GPIO_Init+0x1fa>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a46      	ldr	r2, [pc, #280]	; (8003de4 <HAL_GPIO_Init+0x2fc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <HAL_GPIO_Init+0x1f6>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a45      	ldr	r2, [pc, #276]	; (8003de8 <HAL_GPIO_Init+0x300>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_GPIO_Init+0x1f2>
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	e008      	b.n	8003cec <HAL_GPIO_Init+0x204>
 8003cda:	2307      	movs	r3, #7
 8003cdc:	e006      	b.n	8003cec <HAL_GPIO_Init+0x204>
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e004      	b.n	8003cec <HAL_GPIO_Init+0x204>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e002      	b.n	8003cec <HAL_GPIO_Init+0x204>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_GPIO_Init+0x204>
 8003cea:	2300      	movs	r3, #0
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	f002 0203 	and.w	r2, r2, #3
 8003cf2:	0092      	lsls	r2, r2, #2
 8003cf4:	4093      	lsls	r3, r2
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cfc:	4935      	ldr	r1, [pc, #212]	; (8003dd4 <HAL_GPIO_Init+0x2ec>)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	3302      	adds	r3, #2
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d0a:	4b38      	ldr	r3, [pc, #224]	; (8003dec <HAL_GPIO_Init+0x304>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d2e:	4a2f      	ldr	r2, [pc, #188]	; (8003dec <HAL_GPIO_Init+0x304>)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d34:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <HAL_GPIO_Init+0x304>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d58:	4a24      	ldr	r2, [pc, #144]	; (8003dec <HAL_GPIO_Init+0x304>)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d5e:	4b23      	ldr	r3, [pc, #140]	; (8003dec <HAL_GPIO_Init+0x304>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d82:	4a1a      	ldr	r2, [pc, #104]	; (8003dec <HAL_GPIO_Init+0x304>)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d88:	4b18      	ldr	r3, [pc, #96]	; (8003dec <HAL_GPIO_Init+0x304>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dac:	4a0f      	ldr	r2, [pc, #60]	; (8003dec <HAL_GPIO_Init+0x304>)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3301      	adds	r3, #1
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b0f      	cmp	r3, #15
 8003dbc:	f67f aea2 	bls.w	8003b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	3724      	adds	r7, #36	; 0x24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40013800 	.word	0x40013800
 8003dd8:	40020000 	.word	0x40020000
 8003ddc:	40020400 	.word	0x40020400
 8003de0:	40020800 	.word	0x40020800
 8003de4:	40020c00 	.word	0x40020c00
 8003de8:	40021000 	.word	0x40021000
 8003dec:	40013c00 	.word	0x40013c00

08003df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	887b      	ldrh	r3, [r7, #2]
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
 8003e0c:	e001      	b.n	8003e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	807b      	strh	r3, [r7, #2]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e30:	787b      	ldrb	r3, [r7, #1]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e36:	887a      	ldrh	r2, [r7, #2]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e3c:	e003      	b.n	8003e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e3e:	887b      	ldrh	r3, [r7, #2]
 8003e40:	041a      	lsls	r2, r3, #16
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	619a      	str	r2, [r3, #24]
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e64:	887a      	ldrh	r2, [r7, #2]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	041a      	lsls	r2, r3, #16
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	43d9      	mvns	r1, r3
 8003e70:	887b      	ldrh	r3, [r7, #2]
 8003e72:	400b      	ands	r3, r1
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	619a      	str	r2, [r3, #24]
}
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e12b      	b.n	80040f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fd ffae 	bl	8001e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2224      	movs	r2, #36	; 0x24
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003eec:	f001 fcc0 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 8003ef0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4a81      	ldr	r2, [pc, #516]	; (80040fc <HAL_I2C_Init+0x274>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d807      	bhi.n	8003f0c <HAL_I2C_Init+0x84>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a80      	ldr	r2, [pc, #512]	; (8004100 <HAL_I2C_Init+0x278>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	bf94      	ite	ls
 8003f04:	2301      	movls	r3, #1
 8003f06:	2300      	movhi	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	e006      	b.n	8003f1a <HAL_I2C_Init+0x92>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a7d      	ldr	r2, [pc, #500]	; (8004104 <HAL_I2C_Init+0x27c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	bf94      	ite	ls
 8003f14:	2301      	movls	r3, #1
 8003f16:	2300      	movhi	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e0e7      	b.n	80040f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4a78      	ldr	r2, [pc, #480]	; (8004108 <HAL_I2C_Init+0x280>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	0c9b      	lsrs	r3, r3, #18
 8003f2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4a6a      	ldr	r2, [pc, #424]	; (80040fc <HAL_I2C_Init+0x274>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d802      	bhi.n	8003f5c <HAL_I2C_Init+0xd4>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	e009      	b.n	8003f70 <HAL_I2C_Init+0xe8>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	4a69      	ldr	r2, [pc, #420]	; (800410c <HAL_I2C_Init+0x284>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	099b      	lsrs	r3, r3, #6
 8003f6e:	3301      	adds	r3, #1
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	430b      	orrs	r3, r1
 8003f76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	495c      	ldr	r1, [pc, #368]	; (80040fc <HAL_I2C_Init+0x274>)
 8003f8c:	428b      	cmp	r3, r1
 8003f8e:	d819      	bhi.n	8003fc4 <HAL_I2C_Init+0x13c>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1e59      	subs	r1, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f9e:	1c59      	adds	r1, r3, #1
 8003fa0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fa4:	400b      	ands	r3, r1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_I2C_Init+0x138>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1e59      	subs	r1, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fb8:	3301      	adds	r3, #1
 8003fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fbe:	e051      	b.n	8004064 <HAL_I2C_Init+0x1dc>
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	e04f      	b.n	8004064 <HAL_I2C_Init+0x1dc>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d111      	bne.n	8003ff0 <HAL_I2C_Init+0x168>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	1e58      	subs	r0, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6859      	ldr	r1, [r3, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	440b      	add	r3, r1
 8003fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fde:	3301      	adds	r3, #1
 8003fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e012      	b.n	8004016 <HAL_I2C_Init+0x18e>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1e58      	subs	r0, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	0099      	lsls	r1, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	fbb0 f3f3 	udiv	r3, r0, r3
 8004006:	3301      	adds	r3, #1
 8004008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_I2C_Init+0x196>
 800401a:	2301      	movs	r3, #1
 800401c:	e022      	b.n	8004064 <HAL_I2C_Init+0x1dc>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10e      	bne.n	8004044 <HAL_I2C_Init+0x1bc>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1e58      	subs	r0, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6859      	ldr	r1, [r3, #4]
 800402e:	460b      	mov	r3, r1
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	440b      	add	r3, r1
 8004034:	fbb0 f3f3 	udiv	r3, r0, r3
 8004038:	3301      	adds	r3, #1
 800403a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004042:	e00f      	b.n	8004064 <HAL_I2C_Init+0x1dc>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1e58      	subs	r0, r3, #1
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	0099      	lsls	r1, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	fbb0 f3f3 	udiv	r3, r0, r3
 800405a:	3301      	adds	r3, #1
 800405c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	6809      	ldr	r1, [r1, #0]
 8004068:	4313      	orrs	r3, r2
 800406a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6911      	ldr	r1, [r2, #16]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68d2      	ldr	r2, [r2, #12]
 800409e:	4311      	orrs	r1, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	000186a0 	.word	0x000186a0
 8004100:	001e847f 	.word	0x001e847f
 8004104:	003d08ff 	.word	0x003d08ff
 8004108:	431bde83 	.word	0x431bde83
 800410c:	10624dd3 	.word	0x10624dd3

08004110 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	461a      	mov	r2, r3
 800411c:	460b      	mov	r3, r1
 800411e:	817b      	strh	r3, [r7, #10]
 8004120:	4613      	mov	r3, r2
 8004122:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004124:	f7ff fbce 	bl	80038c4 <HAL_GetTick>
 8004128:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b20      	cmp	r3, #32
 8004134:	f040 80e0 	bne.w	80042f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2319      	movs	r3, #25
 800413e:	2201      	movs	r2, #1
 8004140:	4970      	ldr	r1, [pc, #448]	; (8004304 <HAL_I2C_Master_Transmit+0x1f4>)
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 fd86 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800414e:	2302      	movs	r3, #2
 8004150:	e0d3      	b.n	80042fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_I2C_Master_Transmit+0x50>
 800415c:	2302      	movs	r3, #2
 800415e:	e0cc      	b.n	80042fa <HAL_I2C_Master_Transmit+0x1ea>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b01      	cmp	r3, #1
 8004174:	d007      	beq.n	8004186 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0201 	orr.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004194:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2221      	movs	r2, #33	; 0x21
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2210      	movs	r2, #16
 80041a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	893a      	ldrh	r2, [r7, #8]
 80041b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4a50      	ldr	r2, [pc, #320]	; (8004308 <HAL_I2C_Master_Transmit+0x1f8>)
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041c8:	8979      	ldrh	r1, [r7, #10]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	6a3a      	ldr	r2, [r7, #32]
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 fbf0 	bl	80049b4 <I2C_MasterRequestWrite>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e08d      	b.n	80042fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041f4:	e066      	b.n	80042c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	6a39      	ldr	r1, [r7, #32]
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 fe00 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00d      	beq.n	8004222 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	2b04      	cmp	r3, #4
 800420c:	d107      	bne.n	800421e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e06b      	b.n	80042fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	781a      	ldrb	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b04      	cmp	r3, #4
 800425e:	d11b      	bne.n	8004298 <HAL_I2C_Master_Transmit+0x188>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	d017      	beq.n	8004298 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	6a39      	ldr	r1, [r7, #32]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 fdf0 	bl	8004e82 <I2C_WaitOnBTFFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00d      	beq.n	80042c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d107      	bne.n	80042c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e01a      	b.n	80042fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d194      	bne.n	80041f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	e000      	b.n	80042fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042f8:	2302      	movs	r3, #2
  }
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	00100002 	.word	0x00100002
 8004308:	ffff0000 	.word	0xffff0000

0800430c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08c      	sub	sp, #48	; 0x30
 8004310:	af02      	add	r7, sp, #8
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	461a      	mov	r2, r3
 8004318:	460b      	mov	r3, r1
 800431a:	817b      	strh	r3, [r7, #10]
 800431c:	4613      	mov	r3, r2
 800431e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004320:	f7ff fad0 	bl	80038c4 <HAL_GetTick>
 8004324:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b20      	cmp	r3, #32
 8004330:	f040 820b 	bne.w	800474a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	2319      	movs	r3, #25
 800433a:	2201      	movs	r2, #1
 800433c:	497c      	ldr	r1, [pc, #496]	; (8004530 <HAL_I2C_Master_Receive+0x224>)
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fc88 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
 800434c:	e1fe      	b.n	800474c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_I2C_Master_Receive+0x50>
 8004358:	2302      	movs	r3, #2
 800435a:	e1f7      	b.n	800474c <HAL_I2C_Master_Receive+0x440>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b01      	cmp	r3, #1
 8004370:	d007      	beq.n	8004382 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0201 	orr.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004390:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2222      	movs	r2, #34	; 0x22
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2210      	movs	r2, #16
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	893a      	ldrh	r2, [r7, #8]
 80043b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4a5c      	ldr	r2, [pc, #368]	; (8004534 <HAL_I2C_Master_Receive+0x228>)
 80043c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043c4:	8979      	ldrh	r1, [r7, #10]
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fb74 	bl	8004ab8 <I2C_MasterRequestRead>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e1b8      	b.n	800474c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d113      	bne.n	800440a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e2:	2300      	movs	r3, #0
 80043e4:	623b      	str	r3, [r7, #32]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	623b      	str	r3, [r7, #32]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	623b      	str	r3, [r7, #32]
 80043f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	e18c      	b.n	8004724 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440e:	2b01      	cmp	r3, #1
 8004410:	d11b      	bne.n	800444a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004420:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	e16c      	b.n	8004724 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444e:	2b02      	cmp	r3, #2
 8004450:	d11b      	bne.n	800448a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004460:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004470:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	e14c      	b.n	8004724 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044b0:	e138      	b.n	8004724 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	f200 80f1 	bhi.w	800469e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d123      	bne.n	800450c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fd1b 	bl	8004f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e139      	b.n	800474c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	855a      	strh	r2, [r3, #42]	; 0x2a
 800450a:	e10b      	b.n	8004724 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	2b02      	cmp	r3, #2
 8004512:	d14e      	bne.n	80045b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	2200      	movs	r2, #0
 800451c:	4906      	ldr	r1, [pc, #24]	; (8004538 <HAL_I2C_Master_Receive+0x22c>)
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 fb98 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d008      	beq.n	800453c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e10e      	b.n	800474c <HAL_I2C_Master_Receive+0x440>
 800452e:	bf00      	nop
 8004530:	00100002 	.word	0x00100002
 8004534:	ffff0000 	.word	0xffff0000
 8004538:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045b0:	e0b8      	b.n	8004724 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	2200      	movs	r2, #0
 80045ba:	4966      	ldr	r1, [pc, #408]	; (8004754 <HAL_I2C_Master_Receive+0x448>)
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fb49 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0bf      	b.n	800474c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	2200      	movs	r2, #0
 8004616:	494f      	ldr	r1, [pc, #316]	; (8004754 <HAL_I2C_Master_Receive+0x448>)
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 fb1b 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e091      	b.n	800474c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004636:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691a      	ldr	r2, [r3, #16]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800469c:	e042      	b.n	8004724 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800469e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 fc2e 	bl	8004f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e04c      	b.n	800474c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d118      	bne.n	8004724 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004728:	2b00      	cmp	r3, #0
 800472a:	f47f aec2 	bne.w	80044b2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800474a:	2302      	movs	r3, #2
  }
}
 800474c:	4618      	mov	r0, r3
 800474e:	3728      	adds	r7, #40	; 0x28
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	00010004 	.word	0x00010004

08004758 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08a      	sub	sp, #40	; 0x28
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	607a      	str	r2, [r7, #4]
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	460b      	mov	r3, r1
 8004766:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004768:	f7ff f8ac 	bl	80038c4 <HAL_GetTick>
 800476c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b20      	cmp	r3, #32
 800477c:	f040 8111 	bne.w	80049a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2319      	movs	r3, #25
 8004786:	2201      	movs	r2, #1
 8004788:	4988      	ldr	r1, [pc, #544]	; (80049ac <HAL_I2C_IsDeviceReady+0x254>)
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fa62 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
 8004798:	e104      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_I2C_IsDeviceReady+0x50>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e0fd      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x24c>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d007      	beq.n	80047ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2224      	movs	r2, #36	; 0x24
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a70      	ldr	r2, [pc, #448]	; (80049b0 <HAL_I2C_IsDeviceReady+0x258>)
 80047f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004800:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2200      	movs	r2, #0
 800480a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 fa20 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00d      	beq.n	8004836 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004828:	d103      	bne.n	8004832 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e0b6      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004836:	897b      	ldrh	r3, [r7, #10]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004844:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004846:	f7ff f83d 	bl	80038c4 <HAL_GetTick>
 800484a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b02      	cmp	r3, #2
 8004858:	bf0c      	ite	eq
 800485a:	2301      	moveq	r3, #1
 800485c:	2300      	movne	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800487a:	e025      	b.n	80048c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800487c:	f7ff f822 	bl	80038c4 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d302      	bcc.n	8004892 <HAL_I2C_IsDeviceReady+0x13a>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d103      	bne.n	800489a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	22a0      	movs	r2, #160	; 0xa0
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048be:	bf0c      	ite	eq
 80048c0:	2301      	moveq	r3, #1
 80048c2:	2300      	movne	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2ba0      	cmp	r3, #160	; 0xa0
 80048d2:	d005      	beq.n	80048e0 <HAL_I2C_IsDeviceReady+0x188>
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d102      	bne.n	80048e0 <HAL_I2C_IsDeviceReady+0x188>
 80048da:	7dbb      	ldrb	r3, [r7, #22]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0cd      	beq.n	800487c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d129      	bne.n	800494a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004904:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	2319      	movs	r3, #25
 8004922:	2201      	movs	r2, #1
 8004924:	4921      	ldr	r1, [pc, #132]	; (80049ac <HAL_I2C_IsDeviceReady+0x254>)
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f994 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e036      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	e02c      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004958:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004962:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	2319      	movs	r3, #25
 800496a:	2201      	movs	r2, #1
 800496c:	490f      	ldr	r1, [pc, #60]	; (80049ac <HAL_I2C_IsDeviceReady+0x254>)
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f970 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e012      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	3301      	adds	r3, #1
 8004982:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	f4ff af32 	bcc.w	80047f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80049a2:	2302      	movs	r3, #2
  }
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3720      	adds	r7, #32
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	00100002 	.word	0x00100002
 80049b0:	ffff0000 	.word	0xffff0000

080049b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	460b      	mov	r3, r1
 80049c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d006      	beq.n	80049de <I2C_MasterRequestWrite+0x2a>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d003      	beq.n	80049de <I2C_MasterRequestWrite+0x2a>
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049dc:	d108      	bne.n	80049f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	e00b      	b.n	8004a08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	2b12      	cmp	r3, #18
 80049f6:	d107      	bne.n	8004a08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f91d 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00d      	beq.n	8004a3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2e:	d103      	bne.n	8004a38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e035      	b.n	8004aa8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a44:	d108      	bne.n	8004a58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a46:	897b      	ldrh	r3, [r7, #10]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a54:	611a      	str	r2, [r3, #16]
 8004a56:	e01b      	b.n	8004a90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a58:	897b      	ldrh	r3, [r7, #10]
 8004a5a:	11db      	asrs	r3, r3, #7
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f003 0306 	and.w	r3, r3, #6
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f063 030f 	orn	r3, r3, #15
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	490e      	ldr	r1, [pc, #56]	; (8004ab0 <I2C_MasterRequestWrite+0xfc>)
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f943 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e010      	b.n	8004aa8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a86:	897b      	ldrh	r3, [r7, #10]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	4907      	ldr	r1, [pc, #28]	; (8004ab4 <I2C_MasterRequestWrite+0x100>)
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 f933 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	00010008 	.word	0x00010008
 8004ab4:	00010002 	.word	0x00010002

08004ab8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	607a      	str	r2, [r7, #4]
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004adc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d006      	beq.n	8004af2 <I2C_MasterRequestRead+0x3a>
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d003      	beq.n	8004af2 <I2C_MasterRequestRead+0x3a>
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004af0:	d108      	bne.n	8004b04 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	e00b      	b.n	8004b1c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	2b11      	cmp	r3, #17
 8004b0a:	d107      	bne.n	8004b1c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f893 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00d      	beq.n	8004b50 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b42:	d103      	bne.n	8004b4c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e079      	b.n	8004c44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b58:	d108      	bne.n	8004b6c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b5a:	897b      	ldrh	r3, [r7, #10]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	611a      	str	r2, [r3, #16]
 8004b6a:	e05f      	b.n	8004c2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b6c:	897b      	ldrh	r3, [r7, #10]
 8004b6e:	11db      	asrs	r3, r3, #7
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f003 0306 	and.w	r3, r3, #6
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	f063 030f 	orn	r3, r3, #15
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	4930      	ldr	r1, [pc, #192]	; (8004c4c <I2C_MasterRequestRead+0x194>)
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f8b9 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e054      	b.n	8004c44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b9a:	897b      	ldrh	r3, [r7, #10]
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4929      	ldr	r1, [pc, #164]	; (8004c50 <I2C_MasterRequestRead+0x198>)
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f8a9 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e044      	b.n	8004c44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bde:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f831 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00d      	beq.n	8004c14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c06:	d103      	bne.n	8004c10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e017      	b.n	8004c44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c14:	897b      	ldrh	r3, [r7, #10]
 8004c16:	11db      	asrs	r3, r3, #7
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	f003 0306 	and.w	r3, r3, #6
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f063 030e 	orn	r3, r3, #14
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4907      	ldr	r1, [pc, #28]	; (8004c50 <I2C_MasterRequestRead+0x198>)
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f865 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	00010008 	.word	0x00010008
 8004c50:	00010002 	.word	0x00010002

08004c54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c64:	e025      	b.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d021      	beq.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6e:	f7fe fe29 	bl	80038c4 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d302      	bcc.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d116      	bne.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f043 0220 	orr.w	r2, r3, #32
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e023      	b.n	8004cfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d10d      	bne.n	8004cd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf0c      	ite	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	e00c      	b.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	43da      	mvns	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d0b6      	beq.n	8004c66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d10:	e051      	b.n	8004db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d123      	bne.n	8004d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f043 0204 	orr.w	r2, r3, #4
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e046      	b.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d021      	beq.n	8004db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d72:	f7fe fda7 	bl	80038c4 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d302      	bcc.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d116      	bne.n	8004db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f043 0220 	orr.w	r2, r3, #32
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e020      	b.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	0c1b      	lsrs	r3, r3, #16
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d10c      	bne.n	8004dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	43da      	mvns	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bf14      	ite	ne
 8004dd2:	2301      	movne	r3, #1
 8004dd4:	2300      	moveq	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	e00b      	b.n	8004df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	43da      	mvns	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4013      	ands	r3, r2
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d18d      	bne.n	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e0c:	e02d      	b.n	8004e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f8ce 	bl	8004fb0 <I2C_IsAcknowledgeFailed>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e02d      	b.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d021      	beq.n	8004e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e26:	f7fe fd4d 	bl	80038c4 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d302      	bcc.n	8004e3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d116      	bne.n	8004e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e007      	b.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e74:	2b80      	cmp	r3, #128	; 0x80
 8004e76:	d1ca      	bne.n	8004e0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e8e:	e02d      	b.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f88d 	bl	8004fb0 <I2C_IsAcknowledgeFailed>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e02d      	b.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d021      	beq.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea8:	f7fe fd0c 	bl	80038c4 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d302      	bcc.n	8004ebe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d116      	bne.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f043 0220 	orr.w	r2, r3, #32
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e007      	b.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d1ca      	bne.n	8004e90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f10:	e042      	b.n	8004f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d119      	bne.n	8004f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0210 	mvn.w	r2, #16
 8004f28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e029      	b.n	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f54:	f7fe fcb6 	bl	80038c4 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d302      	bcc.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d116      	bne.n	8004f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	f043 0220 	orr.w	r2, r3, #32
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e007      	b.n	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d1b5      	bne.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc6:	d11b      	bne.n	8005000 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	f043 0204 	orr.w	r2, r3, #4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e267      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d075      	beq.n	800511a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800502e:	4b88      	ldr	r3, [pc, #544]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 030c 	and.w	r3, r3, #12
 8005036:	2b04      	cmp	r3, #4
 8005038:	d00c      	beq.n	8005054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800503a:	4b85      	ldr	r3, [pc, #532]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005042:	2b08      	cmp	r3, #8
 8005044:	d112      	bne.n	800506c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005046:	4b82      	ldr	r3, [pc, #520]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005052:	d10b      	bne.n	800506c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005054:	4b7e      	ldr	r3, [pc, #504]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d05b      	beq.n	8005118 <HAL_RCC_OscConfig+0x108>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d157      	bne.n	8005118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e242      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005074:	d106      	bne.n	8005084 <HAL_RCC_OscConfig+0x74>
 8005076:	4b76      	ldr	r3, [pc, #472]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a75      	ldr	r2, [pc, #468]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 800507c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e01d      	b.n	80050c0 <HAL_RCC_OscConfig+0xb0>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800508c:	d10c      	bne.n	80050a8 <HAL_RCC_OscConfig+0x98>
 800508e:	4b70      	ldr	r3, [pc, #448]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a6f      	ldr	r2, [pc, #444]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 8005094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	4b6d      	ldr	r3, [pc, #436]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a6c      	ldr	r2, [pc, #432]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 80050a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	e00b      	b.n	80050c0 <HAL_RCC_OscConfig+0xb0>
 80050a8:	4b69      	ldr	r3, [pc, #420]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a68      	ldr	r2, [pc, #416]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 80050ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	4b66      	ldr	r3, [pc, #408]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a65      	ldr	r2, [pc, #404]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 80050ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d013      	beq.n	80050f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fe fbfc 	bl	80038c4 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050d0:	f7fe fbf8 	bl	80038c4 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	; 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e207      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e2:	4b5b      	ldr	r3, [pc, #364]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f0      	beq.n	80050d0 <HAL_RCC_OscConfig+0xc0>
 80050ee:	e014      	b.n	800511a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f0:	f7fe fbe8 	bl	80038c4 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050f8:	f7fe fbe4 	bl	80038c4 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b64      	cmp	r3, #100	; 0x64
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e1f3      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800510a:	4b51      	ldr	r3, [pc, #324]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f0      	bne.n	80050f8 <HAL_RCC_OscConfig+0xe8>
 8005116:	e000      	b.n	800511a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d063      	beq.n	80051ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005126:	4b4a      	ldr	r3, [pc, #296]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00b      	beq.n	800514a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005132:	4b47      	ldr	r3, [pc, #284]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800513a:	2b08      	cmp	r3, #8
 800513c:	d11c      	bne.n	8005178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513e:	4b44      	ldr	r3, [pc, #272]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d116      	bne.n	8005178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800514a:	4b41      	ldr	r3, [pc, #260]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <HAL_RCC_OscConfig+0x152>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d001      	beq.n	8005162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e1c7      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005162:	4b3b      	ldr	r3, [pc, #236]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4937      	ldr	r1, [pc, #220]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 8005172:	4313      	orrs	r3, r2
 8005174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005176:	e03a      	b.n	80051ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d020      	beq.n	80051c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005180:	4b34      	ldr	r3, [pc, #208]	; (8005254 <HAL_RCC_OscConfig+0x244>)
 8005182:	2201      	movs	r2, #1
 8005184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005186:	f7fe fb9d 	bl	80038c4 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800518e:	f7fe fb99 	bl	80038c4 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e1a8      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a0:	4b2b      	ldr	r3, [pc, #172]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ac:	4b28      	ldr	r3, [pc, #160]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	4925      	ldr	r1, [pc, #148]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	600b      	str	r3, [r1, #0]
 80051c0:	e015      	b.n	80051ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051c2:	4b24      	ldr	r3, [pc, #144]	; (8005254 <HAL_RCC_OscConfig+0x244>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fe fb7c 	bl	80038c4 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051d0:	f7fe fb78 	bl	80038c4 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e187      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051e2:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d036      	beq.n	8005268 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d016      	beq.n	8005230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005202:	4b15      	ldr	r3, [pc, #84]	; (8005258 <HAL_RCC_OscConfig+0x248>)
 8005204:	2201      	movs	r2, #1
 8005206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005208:	f7fe fb5c 	bl	80038c4 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005210:	f7fe fb58 	bl	80038c4 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e167      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005222:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_RCC_OscConfig+0x240>)
 8005224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x200>
 800522e:	e01b      	b.n	8005268 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005230:	4b09      	ldr	r3, [pc, #36]	; (8005258 <HAL_RCC_OscConfig+0x248>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005236:	f7fe fb45 	bl	80038c4 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800523c:	e00e      	b.n	800525c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800523e:	f7fe fb41 	bl	80038c4 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d907      	bls.n	800525c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e150      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
 8005250:	40023800 	.word	0x40023800
 8005254:	42470000 	.word	0x42470000
 8005258:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800525c:	4b88      	ldr	r3, [pc, #544]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 800525e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1ea      	bne.n	800523e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8097 	beq.w	80053a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800527a:	4b81      	ldr	r3, [pc, #516]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10f      	bne.n	80052a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005286:	2300      	movs	r3, #0
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	4b7d      	ldr	r3, [pc, #500]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	4a7c      	ldr	r2, [pc, #496]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 8005290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005294:	6413      	str	r3, [r2, #64]	; 0x40
 8005296:	4b7a      	ldr	r3, [pc, #488]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a2:	2301      	movs	r3, #1
 80052a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a6:	4b77      	ldr	r3, [pc, #476]	; (8005484 <HAL_RCC_OscConfig+0x474>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d118      	bne.n	80052e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052b2:	4b74      	ldr	r3, [pc, #464]	; (8005484 <HAL_RCC_OscConfig+0x474>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a73      	ldr	r2, [pc, #460]	; (8005484 <HAL_RCC_OscConfig+0x474>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052be:	f7fe fb01 	bl	80038c4 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c6:	f7fe fafd 	bl	80038c4 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e10c      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d8:	4b6a      	ldr	r3, [pc, #424]	; (8005484 <HAL_RCC_OscConfig+0x474>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d106      	bne.n	80052fa <HAL_RCC_OscConfig+0x2ea>
 80052ec:	4b64      	ldr	r3, [pc, #400]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 80052ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f0:	4a63      	ldr	r2, [pc, #396]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	6713      	str	r3, [r2, #112]	; 0x70
 80052f8:	e01c      	b.n	8005334 <HAL_RCC_OscConfig+0x324>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b05      	cmp	r3, #5
 8005300:	d10c      	bne.n	800531c <HAL_RCC_OscConfig+0x30c>
 8005302:	4b5f      	ldr	r3, [pc, #380]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 8005304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005306:	4a5e      	ldr	r2, [pc, #376]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 8005308:	f043 0304 	orr.w	r3, r3, #4
 800530c:	6713      	str	r3, [r2, #112]	; 0x70
 800530e:	4b5c      	ldr	r3, [pc, #368]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005312:	4a5b      	ldr	r2, [pc, #364]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	6713      	str	r3, [r2, #112]	; 0x70
 800531a:	e00b      	b.n	8005334 <HAL_RCC_OscConfig+0x324>
 800531c:	4b58      	ldr	r3, [pc, #352]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	4a57      	ldr	r2, [pc, #348]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	6713      	str	r3, [r2, #112]	; 0x70
 8005328:	4b55      	ldr	r3, [pc, #340]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	4a54      	ldr	r2, [pc, #336]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 800532e:	f023 0304 	bic.w	r3, r3, #4
 8005332:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d015      	beq.n	8005368 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533c:	f7fe fac2 	bl	80038c4 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005342:	e00a      	b.n	800535a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005344:	f7fe fabe 	bl	80038c4 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e0cb      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535a:	4b49      	ldr	r3, [pc, #292]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 800535c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0ee      	beq.n	8005344 <HAL_RCC_OscConfig+0x334>
 8005366:	e014      	b.n	8005392 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005368:	f7fe faac 	bl	80038c4 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800536e:	e00a      	b.n	8005386 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005370:	f7fe faa8 	bl	80038c4 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f241 3288 	movw	r2, #5000	; 0x1388
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e0b5      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005386:	4b3e      	ldr	r3, [pc, #248]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 8005388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1ee      	bne.n	8005370 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d105      	bne.n	80053a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005398:	4b39      	ldr	r3, [pc, #228]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	4a38      	ldr	r2, [pc, #224]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 800539e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80a1 	beq.w	80054f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053ae:	4b34      	ldr	r3, [pc, #208]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d05c      	beq.n	8005474 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d141      	bne.n	8005446 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c2:	4b31      	ldr	r3, [pc, #196]	; (8005488 <HAL_RCC_OscConfig+0x478>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c8:	f7fe fa7c 	bl	80038c4 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d0:	f7fe fa78 	bl	80038c4 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e087      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e2:	4b27      	ldr	r3, [pc, #156]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69da      	ldr	r2, [r3, #28]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005404:	085b      	lsrs	r3, r3, #1
 8005406:	3b01      	subs	r3, #1
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	061b      	lsls	r3, r3, #24
 8005412:	491b      	ldr	r1, [pc, #108]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 8005414:	4313      	orrs	r3, r2
 8005416:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005418:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <HAL_RCC_OscConfig+0x478>)
 800541a:	2201      	movs	r2, #1
 800541c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541e:	f7fe fa51 	bl	80038c4 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005426:	f7fe fa4d 	bl	80038c4 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e05c      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005438:	4b11      	ldr	r3, [pc, #68]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0f0      	beq.n	8005426 <HAL_RCC_OscConfig+0x416>
 8005444:	e054      	b.n	80054f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005446:	4b10      	ldr	r3, [pc, #64]	; (8005488 <HAL_RCC_OscConfig+0x478>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544c:	f7fe fa3a 	bl	80038c4 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005454:	f7fe fa36 	bl	80038c4 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e045      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005466:	4b06      	ldr	r3, [pc, #24]	; (8005480 <HAL_RCC_OscConfig+0x470>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f0      	bne.n	8005454 <HAL_RCC_OscConfig+0x444>
 8005472:	e03d      	b.n	80054f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d107      	bne.n	800548c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e038      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
 8005480:	40023800 	.word	0x40023800
 8005484:	40007000 	.word	0x40007000
 8005488:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800548c:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <HAL_RCC_OscConfig+0x4ec>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d028      	beq.n	80054ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d121      	bne.n	80054ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d11a      	bne.n	80054ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054bc:	4013      	ands	r3, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d111      	bne.n	80054ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d2:	085b      	lsrs	r3, r3, #1
 80054d4:	3b01      	subs	r3, #1
 80054d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054d8:	429a      	cmp	r2, r3
 80054da:	d107      	bne.n	80054ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d001      	beq.n	80054f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40023800 	.word	0x40023800

08005500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0cc      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005514:	4b68      	ldr	r3, [pc, #416]	; (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d90c      	bls.n	800553c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005522:	4b65      	ldr	r3, [pc, #404]	; (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800552a:	4b63      	ldr	r3, [pc, #396]	; (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	429a      	cmp	r2, r3
 8005536:	d001      	beq.n	800553c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0b8      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d020      	beq.n	800558a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005554:	4b59      	ldr	r3, [pc, #356]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	4a58      	ldr	r2, [pc, #352]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800555e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800556c:	4b53      	ldr	r3, [pc, #332]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4a52      	ldr	r2, [pc, #328]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005578:	4b50      	ldr	r3, [pc, #320]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	494d      	ldr	r1, [pc, #308]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	4313      	orrs	r3, r2
 8005588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d044      	beq.n	8005620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d107      	bne.n	80055ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559e:	4b47      	ldr	r3, [pc, #284]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d119      	bne.n	80055de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e07f      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d003      	beq.n	80055be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d107      	bne.n	80055ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055be:	4b3f      	ldr	r3, [pc, #252]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d109      	bne.n	80055de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e06f      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ce:	4b3b      	ldr	r3, [pc, #236]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e067      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055de:	4b37      	ldr	r3, [pc, #220]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f023 0203 	bic.w	r2, r3, #3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	4934      	ldr	r1, [pc, #208]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055f0:	f7fe f968 	bl	80038c4 <HAL_GetTick>
 80055f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f6:	e00a      	b.n	800560e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055f8:	f7fe f964 	bl	80038c4 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f241 3288 	movw	r2, #5000	; 0x1388
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e04f      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560e:	4b2b      	ldr	r3, [pc, #172]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 020c 	and.w	r2, r3, #12
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	429a      	cmp	r2, r3
 800561e:	d1eb      	bne.n	80055f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005620:	4b25      	ldr	r3, [pc, #148]	; (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d20c      	bcs.n	8005648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562e:	4b22      	ldr	r3, [pc, #136]	; (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005636:	4b20      	ldr	r3, [pc, #128]	; (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d001      	beq.n	8005648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e032      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d008      	beq.n	8005666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005654:	4b19      	ldr	r3, [pc, #100]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4916      	ldr	r1, [pc, #88]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	4313      	orrs	r3, r2
 8005664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005672:	4b12      	ldr	r3, [pc, #72]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	490e      	ldr	r1, [pc, #56]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005682:	4313      	orrs	r3, r2
 8005684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005686:	f000 f821 	bl	80056cc <HAL_RCC_GetSysClockFreq>
 800568a:	4602      	mov	r2, r0
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	490a      	ldr	r1, [pc, #40]	; (80056c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005698:	5ccb      	ldrb	r3, [r1, r3]
 800569a:	fa22 f303 	lsr.w	r3, r2, r3
 800569e:	4a09      	ldr	r2, [pc, #36]	; (80056c4 <HAL_RCC_ClockConfig+0x1c4>)
 80056a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056a2:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <HAL_RCC_ClockConfig+0x1c8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fc fd0a 	bl	80020c0 <HAL_InitTick>

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	40023c00 	.word	0x40023c00
 80056bc:	40023800 	.word	0x40023800
 80056c0:	08009a1c 	.word	0x08009a1c
 80056c4:	20000058 	.word	0x20000058
 80056c8:	20000154 	.word	0x20000154

080056cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d0:	b090      	sub	sp, #64	; 0x40
 80056d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	637b      	str	r3, [r7, #52]	; 0x34
 80056d8:	2300      	movs	r3, #0
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056dc:	2300      	movs	r3, #0
 80056de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056e4:	4b59      	ldr	r3, [pc, #356]	; (800584c <HAL_RCC_GetSysClockFreq+0x180>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 030c 	and.w	r3, r3, #12
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d00d      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x40>
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	f200 80a1 	bhi.w	8005838 <HAL_RCC_GetSysClockFreq+0x16c>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_RCC_GetSysClockFreq+0x34>
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d003      	beq.n	8005706 <HAL_RCC_GetSysClockFreq+0x3a>
 80056fe:	e09b      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005700:	4b53      	ldr	r3, [pc, #332]	; (8005850 <HAL_RCC_GetSysClockFreq+0x184>)
 8005702:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005704:	e09b      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005706:	4b53      	ldr	r3, [pc, #332]	; (8005854 <HAL_RCC_GetSysClockFreq+0x188>)
 8005708:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800570a:	e098      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800570c:	4b4f      	ldr	r3, [pc, #316]	; (800584c <HAL_RCC_GetSysClockFreq+0x180>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005714:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005716:	4b4d      	ldr	r3, [pc, #308]	; (800584c <HAL_RCC_GetSysClockFreq+0x180>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d028      	beq.n	8005774 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005722:	4b4a      	ldr	r3, [pc, #296]	; (800584c <HAL_RCC_GetSysClockFreq+0x180>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	099b      	lsrs	r3, r3, #6
 8005728:	2200      	movs	r2, #0
 800572a:	623b      	str	r3, [r7, #32]
 800572c:	627a      	str	r2, [r7, #36]	; 0x24
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005734:	2100      	movs	r1, #0
 8005736:	4b47      	ldr	r3, [pc, #284]	; (8005854 <HAL_RCC_GetSysClockFreq+0x188>)
 8005738:	fb03 f201 	mul.w	r2, r3, r1
 800573c:	2300      	movs	r3, #0
 800573e:	fb00 f303 	mul.w	r3, r0, r3
 8005742:	4413      	add	r3, r2
 8005744:	4a43      	ldr	r2, [pc, #268]	; (8005854 <HAL_RCC_GetSysClockFreq+0x188>)
 8005746:	fba0 1202 	umull	r1, r2, r0, r2
 800574a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800574c:	460a      	mov	r2, r1
 800574e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005752:	4413      	add	r3, r2
 8005754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005758:	2200      	movs	r2, #0
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	61fa      	str	r2, [r7, #28]
 800575e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005762:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005766:	f7fa fd3b 	bl	80001e0 <__aeabi_uldivmod>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4613      	mov	r3, r2
 8005770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005772:	e053      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005774:	4b35      	ldr	r3, [pc, #212]	; (800584c <HAL_RCC_GetSysClockFreq+0x180>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	099b      	lsrs	r3, r3, #6
 800577a:	2200      	movs	r2, #0
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	617a      	str	r2, [r7, #20]
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005786:	f04f 0b00 	mov.w	fp, #0
 800578a:	4652      	mov	r2, sl
 800578c:	465b      	mov	r3, fp
 800578e:	f04f 0000 	mov.w	r0, #0
 8005792:	f04f 0100 	mov.w	r1, #0
 8005796:	0159      	lsls	r1, r3, #5
 8005798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800579c:	0150      	lsls	r0, r2, #5
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	ebb2 080a 	subs.w	r8, r2, sl
 80057a6:	eb63 090b 	sbc.w	r9, r3, fp
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057be:	ebb2 0408 	subs.w	r4, r2, r8
 80057c2:	eb63 0509 	sbc.w	r5, r3, r9
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	00eb      	lsls	r3, r5, #3
 80057d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057d4:	00e2      	lsls	r2, r4, #3
 80057d6:	4614      	mov	r4, r2
 80057d8:	461d      	mov	r5, r3
 80057da:	eb14 030a 	adds.w	r3, r4, sl
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	eb45 030b 	adc.w	r3, r5, fp
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057f2:	4629      	mov	r1, r5
 80057f4:	028b      	lsls	r3, r1, #10
 80057f6:	4621      	mov	r1, r4
 80057f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057fc:	4621      	mov	r1, r4
 80057fe:	028a      	lsls	r2, r1, #10
 8005800:	4610      	mov	r0, r2
 8005802:	4619      	mov	r1, r3
 8005804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005806:	2200      	movs	r2, #0
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	60fa      	str	r2, [r7, #12]
 800580c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005810:	f7fa fce6 	bl	80001e0 <__aeabi_uldivmod>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4613      	mov	r3, r2
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800581c:	4b0b      	ldr	r3, [pc, #44]	; (800584c <HAL_RCC_GetSysClockFreq+0x180>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	0c1b      	lsrs	r3, r3, #16
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	3301      	adds	r3, #1
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800582c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	fbb2 f3f3 	udiv	r3, r2, r3
 8005834:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005836:	e002      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <HAL_RCC_GetSysClockFreq+0x184>)
 800583a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800583c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005840:	4618      	mov	r0, r3
 8005842:	3740      	adds	r7, #64	; 0x40
 8005844:	46bd      	mov	sp, r7
 8005846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800584a:	bf00      	nop
 800584c:	40023800 	.word	0x40023800
 8005850:	00f42400 	.word	0x00f42400
 8005854:	017d7840 	.word	0x017d7840

08005858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800585c:	4b03      	ldr	r3, [pc, #12]	; (800586c <HAL_RCC_GetHCLKFreq+0x14>)
 800585e:	681b      	ldr	r3, [r3, #0]
}
 8005860:	4618      	mov	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	20000058 	.word	0x20000058

08005870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005874:	f7ff fff0 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 8005878:	4602      	mov	r2, r0
 800587a:	4b05      	ldr	r3, [pc, #20]	; (8005890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	0a9b      	lsrs	r3, r3, #10
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	4903      	ldr	r1, [pc, #12]	; (8005894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005886:	5ccb      	ldrb	r3, [r1, r3]
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800588c:	4618      	mov	r0, r3
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40023800 	.word	0x40023800
 8005894:	08009a2c 	.word	0x08009a2c

08005898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800589c:	f7ff ffdc 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 80058a0:	4602      	mov	r2, r0
 80058a2:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	0b5b      	lsrs	r3, r3, #13
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	4903      	ldr	r1, [pc, #12]	; (80058bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80058ae:	5ccb      	ldrb	r3, [r1, r3]
 80058b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40023800 	.word	0x40023800
 80058bc:	08009a2c 	.word	0x08009a2c

080058c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	220f      	movs	r2, #15
 80058ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058d0:	4b12      	ldr	r3, [pc, #72]	; (800591c <HAL_RCC_GetClockConfig+0x5c>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 0203 	and.w	r2, r3, #3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80058dc:	4b0f      	ldr	r3, [pc, #60]	; (800591c <HAL_RCC_GetClockConfig+0x5c>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80058e8:	4b0c      	ldr	r3, [pc, #48]	; (800591c <HAL_RCC_GetClockConfig+0x5c>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80058f4:	4b09      	ldr	r3, [pc, #36]	; (800591c <HAL_RCC_GetClockConfig+0x5c>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	08db      	lsrs	r3, r3, #3
 80058fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005902:	4b07      	ldr	r3, [pc, #28]	; (8005920 <HAL_RCC_GetClockConfig+0x60>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0207 	and.w	r2, r3, #7
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	601a      	str	r2, [r3, #0]
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40023800 	.word	0x40023800
 8005920:	40023c00 	.word	0x40023c00

08005924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e041      	b.n	80059ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fc faec 	bl	8001f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3304      	adds	r3, #4
 8005960:	4619      	mov	r1, r3
 8005962:	4610      	mov	r0, r2
 8005964:	f000 fc50 	bl	8006208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d001      	beq.n	80059dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e044      	b.n	8005a66 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1e      	ldr	r2, [pc, #120]	; (8005a74 <HAL_TIM_Base_Start_IT+0xb0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d018      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x6c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a06:	d013      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x6c>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1a      	ldr	r2, [pc, #104]	; (8005a78 <HAL_TIM_Base_Start_IT+0xb4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00e      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x6c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a19      	ldr	r2, [pc, #100]	; (8005a7c <HAL_TIM_Base_Start_IT+0xb8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d009      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x6c>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a17      	ldr	r2, [pc, #92]	; (8005a80 <HAL_TIM_Base_Start_IT+0xbc>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d004      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x6c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a16      	ldr	r2, [pc, #88]	; (8005a84 <HAL_TIM_Base_Start_IT+0xc0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d111      	bne.n	8005a54 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b06      	cmp	r3, #6
 8005a40:	d010      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f042 0201 	orr.w	r2, r2, #1
 8005a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a52:	e007      	b.n	8005a64 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800
 8005a80:	40000c00 	.word	0x40000c00
 8005a84:	40014000 	.word	0x40014000

08005a88 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6a1a      	ldr	r2, [r3, #32]
 8005aa6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10f      	bne.n	8005ad0 <HAL_TIM_Base_Stop_IT+0x48>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6a1a      	ldr	r2, [r3, #32]
 8005ab6:	f240 4344 	movw	r3, #1092	; 0x444
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d107      	bne.n	8005ad0 <HAL_TIM_Base_Stop_IT+0x48>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0201 	bic.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b082      	sub	sp, #8
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e041      	b.n	8005b7e <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fc fab4 	bl	800207c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3304      	adds	r3, #4
 8005b24:	4619      	mov	r1, r3
 8005b26:	4610      	mov	r0, r2
 8005b28:	f000 fb6e 	bl	8006208 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0208 	bic.w	r2, r2, #8
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6819      	ldr	r1, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b086      	sub	sp, #24
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e097      	b.n	8005cca <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fc fa14 	bl	8001fdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bca:	f023 0307 	bic.w	r3, r3, #7
 8005bce:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f000 fb14 	bl	8006208 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c08:	f023 0303 	bic.w	r3, r3, #3
 8005c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c26:	f023 030c 	bic.w	r3, r3, #12
 8005c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	4313      	orrs	r3, r2
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	011a      	lsls	r2, r3, #4
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	031b      	lsls	r3, r3, #12
 8005c56:	4313      	orrs	r3, r2
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c64:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c6c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ce2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cf2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005cfa:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d110      	bne.n	8005d24 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d102      	bne.n	8005d0e <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d08:	7b7b      	ldrb	r3, [r7, #13]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d001      	beq.n	8005d12 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e089      	b.n	8005e26 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d22:	e031      	b.n	8005d88 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d110      	bne.n	8005d4c <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d2a:	7bbb      	ldrb	r3, [r7, #14]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d102      	bne.n	8005d36 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d30:	7b3b      	ldrb	r3, [r7, #12]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d001      	beq.n	8005d3a <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e075      	b.n	8005e26 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2202      	movs	r2, #2
 8005d46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d4a:	e01d      	b.n	8005d88 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d108      	bne.n	8005d64 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d105      	bne.n	8005d64 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d58:	7b7b      	ldrb	r3, [r7, #13]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d102      	bne.n	8005d64 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d5e:	7b3b      	ldrb	r3, [r7, #12]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d001      	beq.n	8005d68 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e05e      	b.n	8005e26 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d010      	beq.n	8005db6 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005d94:	e01f      	b.n	8005dd6 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fb4c 	bl	800643c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0202 	orr.w	r2, r2, #2
 8005db2:	60da      	str	r2, [r3, #12]
      break;
 8005db4:	e02e      	b.n	8005e14 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	2104      	movs	r1, #4
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fb3c 	bl	800643c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0204 	orr.w	r2, r2, #4
 8005dd2:	60da      	str	r2, [r3, #12]
      break;
 8005dd4:	e01e      	b.n	8005e14 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	2100      	movs	r1, #0
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fb2c 	bl	800643c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2201      	movs	r2, #1
 8005dea:	2104      	movs	r1, #4
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fb25 	bl	800643c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0202 	orr.w	r2, r2, #2
 8005e00:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0204 	orr.w	r2, r2, #4
 8005e10:	60da      	str	r2, [r3, #12]
      break;
 8005e12:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d122      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d11b      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f06f 0202 	mvn.w	r2, #2
 8005e5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	f003 0303 	and.w	r3, r3, #3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7fa fc8f 	bl	8000794 <HAL_TIM_IC_CaptureCallback>
 8005e76:	e005      	b.n	8005e84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f9a7 	bl	80061cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f9ae 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d122      	bne.n	8005ede <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d11b      	bne.n	8005ede <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f06f 0204 	mvn.w	r2, #4
 8005eae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7fa fc65 	bl	8000794 <HAL_TIM_IC_CaptureCallback>
 8005eca:	e005      	b.n	8005ed8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f97d 	bl	80061cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f984 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d122      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d11b      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f06f 0208 	mvn.w	r2, #8
 8005f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2204      	movs	r2, #4
 8005f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7fa fc3b 	bl	8000794 <HAL_TIM_IC_CaptureCallback>
 8005f1e:	e005      	b.n	8005f2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f953 	bl	80061cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f95a 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	f003 0310 	and.w	r3, r3, #16
 8005f3c:	2b10      	cmp	r3, #16
 8005f3e:	d122      	bne.n	8005f86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2b10      	cmp	r3, #16
 8005f4c:	d11b      	bne.n	8005f86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f06f 0210 	mvn.w	r2, #16
 8005f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2208      	movs	r2, #8
 8005f5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7fa fc11 	bl	8000794 <HAL_TIM_IC_CaptureCallback>
 8005f72:	e005      	b.n	8005f80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f929 	bl	80061cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f930 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d10e      	bne.n	8005fb2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d107      	bne.n	8005fb2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f06f 0201 	mvn.w	r2, #1
 8005faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7fb f9d3 	bl	8001358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbc:	2b80      	cmp	r3, #128	; 0x80
 8005fbe:	d10e      	bne.n	8005fde <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fca:	2b80      	cmp	r3, #128	; 0x80
 8005fcc:	d107      	bne.n	8005fde <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 facd 	bl	8006578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe8:	2b40      	cmp	r3, #64	; 0x40
 8005fea:	d10e      	bne.n	800600a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff6:	2b40      	cmp	r3, #64	; 0x40
 8005ff8:	d107      	bne.n	800600a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f8f5 	bl	80061f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b20      	cmp	r3, #32
 8006016:	d10e      	bne.n	8006036 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b20      	cmp	r3, #32
 8006024:	d107      	bne.n	8006036 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f06f 0220 	mvn.w	r2, #32
 800602e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fa97 	bl	8006564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_TIM_ConfigClockSource+0x1c>
 8006056:	2302      	movs	r3, #2
 8006058:	e0b4      	b.n	80061c4 <HAL_TIM_ConfigClockSource+0x186>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2202      	movs	r2, #2
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006078:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006080:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006092:	d03e      	beq.n	8006112 <HAL_TIM_ConfigClockSource+0xd4>
 8006094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006098:	f200 8087 	bhi.w	80061aa <HAL_TIM_ConfigClockSource+0x16c>
 800609c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a0:	f000 8086 	beq.w	80061b0 <HAL_TIM_ConfigClockSource+0x172>
 80060a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a8:	d87f      	bhi.n	80061aa <HAL_TIM_ConfigClockSource+0x16c>
 80060aa:	2b70      	cmp	r3, #112	; 0x70
 80060ac:	d01a      	beq.n	80060e4 <HAL_TIM_ConfigClockSource+0xa6>
 80060ae:	2b70      	cmp	r3, #112	; 0x70
 80060b0:	d87b      	bhi.n	80061aa <HAL_TIM_ConfigClockSource+0x16c>
 80060b2:	2b60      	cmp	r3, #96	; 0x60
 80060b4:	d050      	beq.n	8006158 <HAL_TIM_ConfigClockSource+0x11a>
 80060b6:	2b60      	cmp	r3, #96	; 0x60
 80060b8:	d877      	bhi.n	80061aa <HAL_TIM_ConfigClockSource+0x16c>
 80060ba:	2b50      	cmp	r3, #80	; 0x50
 80060bc:	d03c      	beq.n	8006138 <HAL_TIM_ConfigClockSource+0xfa>
 80060be:	2b50      	cmp	r3, #80	; 0x50
 80060c0:	d873      	bhi.n	80061aa <HAL_TIM_ConfigClockSource+0x16c>
 80060c2:	2b40      	cmp	r3, #64	; 0x40
 80060c4:	d058      	beq.n	8006178 <HAL_TIM_ConfigClockSource+0x13a>
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d86f      	bhi.n	80061aa <HAL_TIM_ConfigClockSource+0x16c>
 80060ca:	2b30      	cmp	r3, #48	; 0x30
 80060cc:	d064      	beq.n	8006198 <HAL_TIM_ConfigClockSource+0x15a>
 80060ce:	2b30      	cmp	r3, #48	; 0x30
 80060d0:	d86b      	bhi.n	80061aa <HAL_TIM_ConfigClockSource+0x16c>
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d060      	beq.n	8006198 <HAL_TIM_ConfigClockSource+0x15a>
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d867      	bhi.n	80061aa <HAL_TIM_ConfigClockSource+0x16c>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d05c      	beq.n	8006198 <HAL_TIM_ConfigClockSource+0x15a>
 80060de:	2b10      	cmp	r3, #16
 80060e0:	d05a      	beq.n	8006198 <HAL_TIM_ConfigClockSource+0x15a>
 80060e2:	e062      	b.n	80061aa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6818      	ldr	r0, [r3, #0]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	6899      	ldr	r1, [r3, #8]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f000 f982 	bl	80063fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006106:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	609a      	str	r2, [r3, #8]
      break;
 8006110:	e04f      	b.n	80061b2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	6899      	ldr	r1, [r3, #8]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f000 f96b 	bl	80063fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006134:	609a      	str	r2, [r3, #8]
      break;
 8006136:	e03c      	b.n	80061b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	6859      	ldr	r1, [r3, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	461a      	mov	r2, r3
 8006146:	f000 f8df 	bl	8006308 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2150      	movs	r1, #80	; 0x50
 8006150:	4618      	mov	r0, r3
 8006152:	f000 f938 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8006156:	e02c      	b.n	80061b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	6859      	ldr	r1, [r3, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	461a      	mov	r2, r3
 8006166:	f000 f8fe 	bl	8006366 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2160      	movs	r1, #96	; 0x60
 8006170:	4618      	mov	r0, r3
 8006172:	f000 f928 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8006176:	e01c      	b.n	80061b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	6859      	ldr	r1, [r3, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	461a      	mov	r2, r3
 8006186:	f000 f8bf 	bl	8006308 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2140      	movs	r1, #64	; 0x40
 8006190:	4618      	mov	r0, r3
 8006192:	f000 f918 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8006196:	e00c      	b.n	80061b2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4619      	mov	r1, r3
 80061a2:	4610      	mov	r0, r2
 80061a4:	f000 f90f 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 80061a8:	e003      	b.n	80061b2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	73fb      	strb	r3, [r7, #15]
      break;
 80061ae:	e000      	b.n	80061b2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a34      	ldr	r2, [pc, #208]	; (80062ec <TIM_Base_SetConfig+0xe4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00f      	beq.n	8006240 <TIM_Base_SetConfig+0x38>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006226:	d00b      	beq.n	8006240 <TIM_Base_SetConfig+0x38>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a31      	ldr	r2, [pc, #196]	; (80062f0 <TIM_Base_SetConfig+0xe8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d007      	beq.n	8006240 <TIM_Base_SetConfig+0x38>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a30      	ldr	r2, [pc, #192]	; (80062f4 <TIM_Base_SetConfig+0xec>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_Base_SetConfig+0x38>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a2f      	ldr	r2, [pc, #188]	; (80062f8 <TIM_Base_SetConfig+0xf0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d108      	bne.n	8006252 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a25      	ldr	r2, [pc, #148]	; (80062ec <TIM_Base_SetConfig+0xe4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01b      	beq.n	8006292 <TIM_Base_SetConfig+0x8a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006260:	d017      	beq.n	8006292 <TIM_Base_SetConfig+0x8a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a22      	ldr	r2, [pc, #136]	; (80062f0 <TIM_Base_SetConfig+0xe8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d013      	beq.n	8006292 <TIM_Base_SetConfig+0x8a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a21      	ldr	r2, [pc, #132]	; (80062f4 <TIM_Base_SetConfig+0xec>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00f      	beq.n	8006292 <TIM_Base_SetConfig+0x8a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a20      	ldr	r2, [pc, #128]	; (80062f8 <TIM_Base_SetConfig+0xf0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00b      	beq.n	8006292 <TIM_Base_SetConfig+0x8a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a1f      	ldr	r2, [pc, #124]	; (80062fc <TIM_Base_SetConfig+0xf4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d007      	beq.n	8006292 <TIM_Base_SetConfig+0x8a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <TIM_Base_SetConfig+0xf8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d003      	beq.n	8006292 <TIM_Base_SetConfig+0x8a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a1d      	ldr	r2, [pc, #116]	; (8006304 <TIM_Base_SetConfig+0xfc>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d108      	bne.n	80062a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a08      	ldr	r2, [pc, #32]	; (80062ec <TIM_Base_SetConfig+0xe4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d103      	bne.n	80062d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	615a      	str	r2, [r3, #20]
}
 80062de:	bf00      	nop
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40010000 	.word	0x40010000
 80062f0:	40000400 	.word	0x40000400
 80062f4:	40000800 	.word	0x40000800
 80062f8:	40000c00 	.word	0x40000c00
 80062fc:	40014000 	.word	0x40014000
 8006300:	40014400 	.word	0x40014400
 8006304:	40014800 	.word	0x40014800

08006308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f023 0201 	bic.w	r2, r3, #1
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f023 030a 	bic.w	r3, r3, #10
 8006344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006366:	b480      	push	{r7}
 8006368:	b087      	sub	sp, #28
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f023 0210 	bic.w	r2, r3, #16
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006390:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	031b      	lsls	r3, r3, #12
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4313      	orrs	r3, r2
 800639a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	621a      	str	r2, [r3, #32]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f043 0307 	orr.w	r3, r3, #7
 80063e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	609a      	str	r2, [r3, #8]
}
 80063f0:	bf00      	nop
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	021a      	lsls	r2, r3, #8
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	431a      	orrs	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4313      	orrs	r3, r2
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	609a      	str	r2, [r3, #8]
}
 8006430:	bf00      	nop
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f003 031f 	and.w	r3, r3, #31
 800644e:	2201      	movs	r2, #1
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a1a      	ldr	r2, [r3, #32]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	43db      	mvns	r3, r3
 800645e:	401a      	ands	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	fa01 f303 	lsl.w	r3, r1, r3
 8006474:	431a      	orrs	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
	...

08006488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800649c:	2302      	movs	r3, #2
 800649e:	e050      	b.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1c      	ldr	r2, [pc, #112]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d018      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ec:	d013      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a18      	ldr	r2, [pc, #96]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a16      	ldr	r2, [pc, #88]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a15      	ldr	r2, [pc, #84]	; (800655c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a13      	ldr	r2, [pc, #76]	; (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d10c      	bne.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800651c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	4313      	orrs	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40010000 	.word	0x40010000
 8006554:	40000400 	.word	0x40000400
 8006558:	40000800 	.word	0x40000800
 800655c:	40000c00 	.word	0x40000c00
 8006560:	40014000 	.word	0x40014000

08006564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <__NVIC_SetPriority>:
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	6039      	str	r1, [r7, #0]
 8006596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800659c:	2b00      	cmp	r3, #0
 800659e:	db0a      	blt.n	80065b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	490c      	ldr	r1, [pc, #48]	; (80065d8 <__NVIC_SetPriority+0x4c>)
 80065a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065aa:	0112      	lsls	r2, r2, #4
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	440b      	add	r3, r1
 80065b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80065b4:	e00a      	b.n	80065cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	4908      	ldr	r1, [pc, #32]	; (80065dc <__NVIC_SetPriority+0x50>)
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	f003 030f 	and.w	r3, r3, #15
 80065c2:	3b04      	subs	r3, #4
 80065c4:	0112      	lsls	r2, r2, #4
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	440b      	add	r3, r1
 80065ca:	761a      	strb	r2, [r3, #24]
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	e000e100 	.word	0xe000e100
 80065dc:	e000ed00 	.word	0xe000ed00

080065e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80065e4:	4b05      	ldr	r3, [pc, #20]	; (80065fc <SysTick_Handler+0x1c>)
 80065e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80065e8:	f001 fd28 	bl	800803c <xTaskGetSchedulerState>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d001      	beq.n	80065f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80065f2:	f002 fb11 	bl	8008c18 <xPortSysTickHandler>
  }
}
 80065f6:	bf00      	nop
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	e000e010 	.word	0xe000e010

08006600 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006604:	2100      	movs	r1, #0
 8006606:	f06f 0004 	mvn.w	r0, #4
 800660a:	f7ff ffbf 	bl	800658c <__NVIC_SetPriority>
#endif
}
 800660e:	bf00      	nop
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800661a:	f3ef 8305 	mrs	r3, IPSR
 800661e:	603b      	str	r3, [r7, #0]
  return(result);
 8006620:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006626:	f06f 0305 	mvn.w	r3, #5
 800662a:	607b      	str	r3, [r7, #4]
 800662c:	e00c      	b.n	8006648 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800662e:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <osKernelInitialize+0x44>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d105      	bne.n	8006642 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006636:	4b08      	ldr	r3, [pc, #32]	; (8006658 <osKernelInitialize+0x44>)
 8006638:	2201      	movs	r2, #1
 800663a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800663c:	2300      	movs	r3, #0
 800663e:	607b      	str	r3, [r7, #4]
 8006640:	e002      	b.n	8006648 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006642:	f04f 33ff 	mov.w	r3, #4294967295
 8006646:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006648:	687b      	ldr	r3, [r7, #4]
}
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	2000088c 	.word	0x2000088c

0800665c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006662:	f3ef 8305 	mrs	r3, IPSR
 8006666:	603b      	str	r3, [r7, #0]
  return(result);
 8006668:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <osKernelStart+0x1a>
    stat = osErrorISR;
 800666e:	f06f 0305 	mvn.w	r3, #5
 8006672:	607b      	str	r3, [r7, #4]
 8006674:	e010      	b.n	8006698 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006676:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <osKernelStart+0x48>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d109      	bne.n	8006692 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800667e:	f7ff ffbf 	bl	8006600 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <osKernelStart+0x48>)
 8006684:	2202      	movs	r2, #2
 8006686:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006688:	f001 f87c 	bl	8007784 <vTaskStartScheduler>
      stat = osOK;
 800668c:	2300      	movs	r3, #0
 800668e:	607b      	str	r3, [r7, #4]
 8006690:	e002      	b.n	8006698 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006692:	f04f 33ff 	mov.w	r3, #4294967295
 8006696:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006698:	687b      	ldr	r3, [r7, #4]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	2000088c 	.word	0x2000088c

080066a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08e      	sub	sp, #56	; 0x38
 80066ac:	af04      	add	r7, sp, #16
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80066b4:	2300      	movs	r3, #0
 80066b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066b8:	f3ef 8305 	mrs	r3, IPSR
 80066bc:	617b      	str	r3, [r7, #20]
  return(result);
 80066be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d17e      	bne.n	80067c2 <osThreadNew+0x11a>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d07b      	beq.n	80067c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80066ca:	2380      	movs	r3, #128	; 0x80
 80066cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80066ce:	2318      	movs	r3, #24
 80066d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80066d6:	f04f 33ff 	mov.w	r3, #4294967295
 80066da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d045      	beq.n	800676e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <osThreadNew+0x48>
        name = attr->name;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d008      	beq.n	8006716 <osThreadNew+0x6e>
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	2b38      	cmp	r3, #56	; 0x38
 8006708:	d805      	bhi.n	8006716 <osThreadNew+0x6e>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <osThreadNew+0x72>
        return (NULL);
 8006716:	2300      	movs	r3, #0
 8006718:	e054      	b.n	80067c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	089b      	lsrs	r3, r3, #2
 8006728:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00e      	beq.n	8006750 <osThreadNew+0xa8>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	2bbb      	cmp	r3, #187	; 0xbb
 8006738:	d90a      	bls.n	8006750 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800673e:	2b00      	cmp	r3, #0
 8006740:	d006      	beq.n	8006750 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <osThreadNew+0xa8>
        mem = 1;
 800674a:	2301      	movs	r3, #1
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	e010      	b.n	8006772 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10c      	bne.n	8006772 <osThreadNew+0xca>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d108      	bne.n	8006772 <osThreadNew+0xca>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d104      	bne.n	8006772 <osThreadNew+0xca>
          mem = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	e001      	b.n	8006772 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d110      	bne.n	800679a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006780:	9202      	str	r2, [sp, #8]
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	6a3a      	ldr	r2, [r7, #32]
 800678c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 fe0c 	bl	80073ac <xTaskCreateStatic>
 8006794:	4603      	mov	r3, r0
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	e013      	b.n	80067c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d110      	bne.n	80067c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	f107 0310 	add.w	r3, r7, #16
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 fe57 	bl	8007466 <xTaskCreate>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d001      	beq.n	80067c2 <osThreadNew+0x11a>
            hTask = NULL;
 80067be:	2300      	movs	r3, #0
 80067c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80067c2:	693b      	ldr	r3, [r7, #16]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3728      	adds	r7, #40	; 0x28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067d4:	f3ef 8305 	mrs	r3, IPSR
 80067d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80067da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <osDelay+0x1c>
    stat = osErrorISR;
 80067e0:	f06f 0305 	mvn.w	r3, #5
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	e007      	b.n	80067f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 ff92 	bl	800771c <vTaskDelay>
    }
  }

  return (stat);
 80067f8:	68fb      	ldr	r3, [r7, #12]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4a07      	ldr	r2, [pc, #28]	; (8006830 <vApplicationGetIdleTaskMemory+0x2c>)
 8006814:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	4a06      	ldr	r2, [pc, #24]	; (8006834 <vApplicationGetIdleTaskMemory+0x30>)
 800681a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2280      	movs	r2, #128	; 0x80
 8006820:	601a      	str	r2, [r3, #0]
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20000890 	.word	0x20000890
 8006834:	2000094c 	.word	0x2000094c

08006838 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4a07      	ldr	r2, [pc, #28]	; (8006864 <vApplicationGetTimerTaskMemory+0x2c>)
 8006848:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	4a06      	ldr	r2, [pc, #24]	; (8006868 <vApplicationGetTimerTaskMemory+0x30>)
 800684e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006856:	601a      	str	r2, [r3, #0]
}
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	20000b4c 	.word	0x20000b4c
 8006868:	20000c08 	.word	0x20000c08

0800686c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f103 0208 	add.w	r2, r3, #8
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f04f 32ff 	mov.w	r2, #4294967295
 8006884:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f103 0208 	add.w	r2, r3, #8
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f103 0208 	add.w	r2, r3, #8
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068c6:	b480      	push	{r7}
 80068c8:	b085      	sub	sp, #20
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	601a      	str	r2, [r3, #0]
}
 8006902:	bf00      	nop
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800690e:	b480      	push	{r7}
 8006910:	b085      	sub	sp, #20
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d103      	bne.n	800692e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	e00c      	b.n	8006948 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	3308      	adds	r3, #8
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	e002      	b.n	800693c <vListInsert+0x2e>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	429a      	cmp	r2, r3
 8006946:	d2f6      	bcs.n	8006936 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6892      	ldr	r2, [r2, #8]
 8006996:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6852      	ldr	r2, [r2, #4]
 80069a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d103      	bne.n	80069b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	1e5a      	subs	r2, r3, #1
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10a      	bne.n	80069fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069fa:	bf00      	nop
 80069fc:	e7fe      	b.n	80069fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069fe:	f002 f879 	bl	8008af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0a:	68f9      	ldr	r1, [r7, #12]
 8006a0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a0e:	fb01 f303 	mul.w	r3, r1, r3
 8006a12:	441a      	add	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	68f9      	ldr	r1, [r7, #12]
 8006a32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a34:	fb01 f303 	mul.w	r3, r1, r3
 8006a38:	441a      	add	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	22ff      	movs	r2, #255	; 0xff
 8006a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	22ff      	movs	r2, #255	; 0xff
 8006a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d114      	bne.n	8006a7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01a      	beq.n	8006a92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3310      	adds	r3, #16
 8006a60:	4618      	mov	r0, r3
 8006a62:	f001 f929 	bl	8007cb8 <xTaskRemoveFromEventList>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d012      	beq.n	8006a92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a6c:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <xQueueGenericReset+0xcc>)
 8006a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	e009      	b.n	8006a92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3310      	adds	r3, #16
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff fef2 	bl	800686c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3324      	adds	r3, #36	; 0x24
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff feed 	bl	800686c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a92:	f002 f85f 	bl	8008b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a96:	2301      	movs	r3, #1
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08e      	sub	sp, #56	; 0x38
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006aca:	bf00      	nop
 8006acc:	e7fe      	b.n	8006acc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <xQueueGenericCreateStatic+0x52>
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <xQueueGenericCreateStatic+0x56>
 8006af6:	2301      	movs	r3, #1
 8006af8:	e000      	b.n	8006afc <xQueueGenericCreateStatic+0x58>
 8006afa:	2300      	movs	r3, #0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10a      	bne.n	8006b16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	623b      	str	r3, [r7, #32]
}
 8006b12:	bf00      	nop
 8006b14:	e7fe      	b.n	8006b14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d102      	bne.n	8006b22 <xQueueGenericCreateStatic+0x7e>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <xQueueGenericCreateStatic+0x82>
 8006b22:	2301      	movs	r3, #1
 8006b24:	e000      	b.n	8006b28 <xQueueGenericCreateStatic+0x84>
 8006b26:	2300      	movs	r3, #0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10a      	bne.n	8006b42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	61fb      	str	r3, [r7, #28]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b42:	2350      	movs	r3, #80	; 0x50
 8006b44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2b50      	cmp	r3, #80	; 0x50
 8006b4a:	d00a      	beq.n	8006b62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	61bb      	str	r3, [r7, #24]
}
 8006b5e:	bf00      	nop
 8006b60:	e7fe      	b.n	8006b60 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00d      	beq.n	8006b8a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f805 	bl	8006b94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3730      	adds	r7, #48	; 0x30
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d103      	bne.n	8006bb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e002      	b.n	8006bb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	69b8      	ldr	r0, [r7, #24]
 8006bc6:	f7ff ff05 	bl	80069d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	78fa      	ldrb	r2, [r7, #3]
 8006bce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08e      	sub	sp, #56	; 0x38
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bea:	2300      	movs	r3, #0
 8006bec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <xQueueGenericSend+0x32>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d103      	bne.n	8006c1c <xQueueGenericSend+0x40>
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <xQueueGenericSend+0x44>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e000      	b.n	8006c22 <xQueueGenericSend+0x46>
 8006c20:	2300      	movs	r3, #0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10a      	bne.n	8006c3c <xQueueGenericSend+0x60>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c38:	bf00      	nop
 8006c3a:	e7fe      	b.n	8006c3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d103      	bne.n	8006c4a <xQueueGenericSend+0x6e>
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <xQueueGenericSend+0x72>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <xQueueGenericSend+0x74>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xQueueGenericSend+0x8e>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	623b      	str	r3, [r7, #32]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c6a:	f001 f9e7 	bl	800803c <xTaskGetSchedulerState>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d102      	bne.n	8006c7a <xQueueGenericSend+0x9e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <xQueueGenericSend+0xa2>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <xQueueGenericSend+0xa4>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <xQueueGenericSend+0xbe>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	61fb      	str	r3, [r7, #28]
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c9a:	f001 ff2b 	bl	8008af4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d302      	bcc.n	8006cb0 <xQueueGenericSend+0xd4>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d129      	bne.n	8006d04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cb6:	f000 fa0b 	bl	80070d0 <prvCopyDataToQueue>
 8006cba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d010      	beq.n	8006ce6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	3324      	adds	r3, #36	; 0x24
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fff5 	bl	8007cb8 <xTaskRemoveFromEventList>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d013      	beq.n	8006cfc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006cd4:	4b3f      	ldr	r3, [pc, #252]	; (8006dd4 <xQueueGenericSend+0x1f8>)
 8006cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	e00a      	b.n	8006cfc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006cec:	4b39      	ldr	r3, [pc, #228]	; (8006dd4 <xQueueGenericSend+0x1f8>)
 8006cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006cfc:	f001 ff2a 	bl	8008b54 <vPortExitCritical>
				return pdPASS;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e063      	b.n	8006dcc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d103      	bne.n	8006d12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d0a:	f001 ff23 	bl	8008b54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	e05c      	b.n	8006dcc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d106      	bne.n	8006d26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d18:	f107 0314 	add.w	r3, r7, #20
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f001 f82f 	bl	8007d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d22:	2301      	movs	r3, #1
 8006d24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d26:	f001 ff15 	bl	8008b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d2a:	f000 fd9b 	bl	8007864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d2e:	f001 fee1 	bl	8008af4 <vPortEnterCritical>
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d38:	b25b      	sxtb	r3, r3
 8006d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3e:	d103      	bne.n	8006d48 <xQueueGenericSend+0x16c>
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d4e:	b25b      	sxtb	r3, r3
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d54:	d103      	bne.n	8006d5e <xQueueGenericSend+0x182>
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d5e:	f001 fef9 	bl	8008b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d62:	1d3a      	adds	r2, r7, #4
 8006d64:	f107 0314 	add.w	r3, r7, #20
 8006d68:	4611      	mov	r1, r2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f001 f81e 	bl	8007dac <xTaskCheckForTimeOut>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d124      	bne.n	8006dc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d78:	f000 faa2 	bl	80072c0 <prvIsQueueFull>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d018      	beq.n	8006db4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	3310      	adds	r3, #16
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	4611      	mov	r1, r2
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 ff44 	bl	8007c18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d92:	f000 fa2d 	bl	80071f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d96:	f000 fd73 	bl	8007880 <xTaskResumeAll>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f47f af7c 	bne.w	8006c9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006da2:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <xQueueGenericSend+0x1f8>)
 8006da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	e772      	b.n	8006c9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006db6:	f000 fa1b 	bl	80071f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dba:	f000 fd61 	bl	8007880 <xTaskResumeAll>
 8006dbe:	e76c      	b.n	8006c9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dc2:	f000 fa15 	bl	80071f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dc6:	f000 fd5b 	bl	8007880 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3738      	adds	r7, #56	; 0x38
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	e000ed04 	.word	0xe000ed04

08006dd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b090      	sub	sp, #64	; 0x40
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d103      	bne.n	8006e14 <xQueueGenericSendFromISR+0x3c>
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <xQueueGenericSendFromISR+0x40>
 8006e14:	2301      	movs	r3, #1
 8006e16:	e000      	b.n	8006e1a <xQueueGenericSendFromISR+0x42>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10a      	bne.n	8006e34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e30:	bf00      	nop
 8006e32:	e7fe      	b.n	8006e32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d103      	bne.n	8006e42 <xQueueGenericSendFromISR+0x6a>
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d101      	bne.n	8006e46 <xQueueGenericSendFromISR+0x6e>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e000      	b.n	8006e48 <xQueueGenericSendFromISR+0x70>
 8006e46:	2300      	movs	r3, #0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	623b      	str	r3, [r7, #32]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e62:	f001 ff29 	bl	8008cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e66:	f3ef 8211 	mrs	r2, BASEPRI
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	61fa      	str	r2, [r7, #28]
 8006e7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d302      	bcc.n	8006e94 <xQueueGenericSendFromISR+0xbc>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d12f      	bne.n	8006ef4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	68b9      	ldr	r1, [r7, #8]
 8006ea8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006eaa:	f000 f911 	bl	80070d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006eae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb6:	d112      	bne.n	8006ede <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d016      	beq.n	8006eee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	3324      	adds	r3, #36	; 0x24
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fef7 	bl	8007cb8 <xTaskRemoveFromEventList>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00e      	beq.n	8006eee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	e007      	b.n	8006eee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ede:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	b25a      	sxtb	r2, r3
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006ef2:	e001      	b.n	8006ef8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3740      	adds	r7, #64	; 0x40
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08c      	sub	sp, #48	; 0x30
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10a      	bne.n	8006f40 <xQueueReceive+0x30>
	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	623b      	str	r3, [r7, #32]
}
 8006f3c:	bf00      	nop
 8006f3e:	e7fe      	b.n	8006f3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d103      	bne.n	8006f4e <xQueueReceive+0x3e>
 8006f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <xQueueReceive+0x42>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e000      	b.n	8006f54 <xQueueReceive+0x44>
 8006f52:	2300      	movs	r3, #0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10a      	bne.n	8006f6e <xQueueReceive+0x5e>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	61fb      	str	r3, [r7, #28]
}
 8006f6a:	bf00      	nop
 8006f6c:	e7fe      	b.n	8006f6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f6e:	f001 f865 	bl	800803c <xTaskGetSchedulerState>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d102      	bne.n	8006f7e <xQueueReceive+0x6e>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <xQueueReceive+0x72>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <xQueueReceive+0x74>
 8006f82:	2300      	movs	r3, #0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <xQueueReceive+0x8e>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	61bb      	str	r3, [r7, #24]
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f9e:	f001 fda9 	bl	8008af4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d01f      	beq.n	8006fee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb2:	f000 f8f7 	bl	80071a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	1e5a      	subs	r2, r3, #1
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00f      	beq.n	8006fe6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc8:	3310      	adds	r3, #16
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fe74 	bl	8007cb8 <xTaskRemoveFromEventList>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fd6:	4b3d      	ldr	r3, [pc, #244]	; (80070cc <xQueueReceive+0x1bc>)
 8006fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fe6:	f001 fdb5 	bl	8008b54 <vPortExitCritical>
				return pdPASS;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e069      	b.n	80070c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d103      	bne.n	8006ffc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ff4:	f001 fdae 	bl	8008b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e062      	b.n	80070c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d106      	bne.n	8007010 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007002:	f107 0310 	add.w	r3, r7, #16
 8007006:	4618      	mov	r0, r3
 8007008:	f000 feba 	bl	8007d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800700c:	2301      	movs	r3, #1
 800700e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007010:	f001 fda0 	bl	8008b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007014:	f000 fc26 	bl	8007864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007018:	f001 fd6c 	bl	8008af4 <vPortEnterCritical>
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007022:	b25b      	sxtb	r3, r3
 8007024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007028:	d103      	bne.n	8007032 <xQueueReceive+0x122>
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007038:	b25b      	sxtb	r3, r3
 800703a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703e:	d103      	bne.n	8007048 <xQueueReceive+0x138>
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007048:	f001 fd84 	bl	8008b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800704c:	1d3a      	adds	r2, r7, #4
 800704e:	f107 0310 	add.w	r3, r7, #16
 8007052:	4611      	mov	r1, r2
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fea9 	bl	8007dac <xTaskCheckForTimeOut>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d123      	bne.n	80070a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007062:	f000 f917 	bl	8007294 <prvIsQueueEmpty>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d017      	beq.n	800709c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	3324      	adds	r3, #36	; 0x24
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	4611      	mov	r1, r2
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fdcf 	bl	8007c18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800707a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800707c:	f000 f8b8 	bl	80071f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007080:	f000 fbfe 	bl	8007880 <xTaskResumeAll>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d189      	bne.n	8006f9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800708a:	4b10      	ldr	r3, [pc, #64]	; (80070cc <xQueueReceive+0x1bc>)
 800708c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	e780      	b.n	8006f9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800709c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800709e:	f000 f8a7 	bl	80071f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070a2:	f000 fbed 	bl	8007880 <xTaskResumeAll>
 80070a6:	e77a      	b.n	8006f9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070aa:	f000 f8a1 	bl	80071f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070ae:	f000 fbe7 	bl	8007880 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070b4:	f000 f8ee 	bl	8007294 <prvIsQueueEmpty>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f43f af6f 	beq.w	8006f9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3730      	adds	r7, #48	; 0x30
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	e000ed04 	.word	0xe000ed04

080070d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10d      	bne.n	800710a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d14d      	bne.n	8007192 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 ffbc 	bl	8008078 <xTaskPriorityDisinherit>
 8007100:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	609a      	str	r2, [r3, #8]
 8007108:	e043      	b.n	8007192 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d119      	bne.n	8007144 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6858      	ldr	r0, [r3, #4]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	461a      	mov	r2, r3
 800711a:	68b9      	ldr	r1, [r7, #8]
 800711c:	f002 f81c 	bl	8009158 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007128:	441a      	add	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	429a      	cmp	r2, r3
 8007138:	d32b      	bcc.n	8007192 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	605a      	str	r2, [r3, #4]
 8007142:	e026      	b.n	8007192 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68d8      	ldr	r0, [r3, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	461a      	mov	r2, r3
 800714e:	68b9      	ldr	r1, [r7, #8]
 8007150:	f002 f802 	bl	8009158 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	425b      	negs	r3, r3
 800715e:	441a      	add	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	429a      	cmp	r2, r3
 800716e:	d207      	bcs.n	8007180 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	425b      	negs	r3, r3
 800717a:	441a      	add	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b02      	cmp	r3, #2
 8007184:	d105      	bne.n	8007192 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	3b01      	subs	r3, #1
 8007190:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800719a:	697b      	ldr	r3, [r7, #20]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d018      	beq.n	80071e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	441a      	add	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d303      	bcc.n	80071d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68d9      	ldr	r1, [r3, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e0:	461a      	mov	r2, r3
 80071e2:	6838      	ldr	r0, [r7, #0]
 80071e4:	f001 ffb8 	bl	8009158 <memcpy>
	}
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071f8:	f001 fc7c 	bl	8008af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007202:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007204:	e011      	b.n	800722a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720a:	2b00      	cmp	r3, #0
 800720c:	d012      	beq.n	8007234 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3324      	adds	r3, #36	; 0x24
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fd50 	bl	8007cb8 <xTaskRemoveFromEventList>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800721e:	f000 fe27 	bl	8007e70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007222:	7bfb      	ldrb	r3, [r7, #15]
 8007224:	3b01      	subs	r3, #1
 8007226:	b2db      	uxtb	r3, r3
 8007228:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800722a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800722e:	2b00      	cmp	r3, #0
 8007230:	dce9      	bgt.n	8007206 <prvUnlockQueue+0x16>
 8007232:	e000      	b.n	8007236 <prvUnlockQueue+0x46>
					break;
 8007234:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	22ff      	movs	r2, #255	; 0xff
 800723a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800723e:	f001 fc89 	bl	8008b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007242:	f001 fc57 	bl	8008af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800724c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800724e:	e011      	b.n	8007274 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d012      	beq.n	800727e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3310      	adds	r3, #16
 800725c:	4618      	mov	r0, r3
 800725e:	f000 fd2b 	bl	8007cb8 <xTaskRemoveFromEventList>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007268:	f000 fe02 	bl	8007e70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800726c:	7bbb      	ldrb	r3, [r7, #14]
 800726e:	3b01      	subs	r3, #1
 8007270:	b2db      	uxtb	r3, r3
 8007272:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007278:	2b00      	cmp	r3, #0
 800727a:	dce9      	bgt.n	8007250 <prvUnlockQueue+0x60>
 800727c:	e000      	b.n	8007280 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800727e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	22ff      	movs	r2, #255	; 0xff
 8007284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007288:	f001 fc64 	bl	8008b54 <vPortExitCritical>
}
 800728c:	bf00      	nop
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800729c:	f001 fc2a 	bl	8008af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d102      	bne.n	80072ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072a8:	2301      	movs	r3, #1
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	e001      	b.n	80072b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072ae:	2300      	movs	r3, #0
 80072b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072b2:	f001 fc4f 	bl	8008b54 <vPortExitCritical>

	return xReturn;
 80072b6:	68fb      	ldr	r3, [r7, #12]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072c8:	f001 fc14 	bl	8008af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d102      	bne.n	80072de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072d8:	2301      	movs	r3, #1
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	e001      	b.n	80072e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072de:	2300      	movs	r3, #0
 80072e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072e2:	f001 fc37 	bl	8008b54 <vPortExitCritical>

	return xReturn;
 80072e6:	68fb      	ldr	r3, [r7, #12]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072fa:	2300      	movs	r3, #0
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	e014      	b.n	800732a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007300:	4a0f      	ldr	r2, [pc, #60]	; (8007340 <vQueueAddToRegistry+0x50>)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10b      	bne.n	8007324 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800730c:	490c      	ldr	r1, [pc, #48]	; (8007340 <vQueueAddToRegistry+0x50>)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007316:	4a0a      	ldr	r2, [pc, #40]	; (8007340 <vQueueAddToRegistry+0x50>)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	4413      	add	r3, r2
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007322:	e006      	b.n	8007332 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3301      	adds	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b07      	cmp	r3, #7
 800732e:	d9e7      	bls.n	8007300 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007330:	bf00      	nop
 8007332:	bf00      	nop
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	20001008 	.word	0x20001008

08007344 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007354:	f001 fbce 	bl	8008af4 <vPortEnterCritical>
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800735e:	b25b      	sxtb	r3, r3
 8007360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007364:	d103      	bne.n	800736e <vQueueWaitForMessageRestricted+0x2a>
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007374:	b25b      	sxtb	r3, r3
 8007376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737a:	d103      	bne.n	8007384 <vQueueWaitForMessageRestricted+0x40>
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007384:	f001 fbe6 	bl	8008b54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738c:	2b00      	cmp	r3, #0
 800738e:	d106      	bne.n	800739e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	3324      	adds	r3, #36	; 0x24
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fc61 	bl	8007c60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800739e:	6978      	ldr	r0, [r7, #20]
 80073a0:	f7ff ff26 	bl	80071f0 <prvUnlockQueue>
	}
 80073a4:	bf00      	nop
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08e      	sub	sp, #56	; 0x38
 80073b0:	af04      	add	r7, sp, #16
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	623b      	str	r3, [r7, #32]
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	61fb      	str	r3, [r7, #28]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073f2:	23bc      	movs	r3, #188	; 0xbc
 80073f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	2bbc      	cmp	r3, #188	; 0xbc
 80073fa:	d00a      	beq.n	8007412 <xTaskCreateStatic+0x66>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	61bb      	str	r3, [r7, #24]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007412:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	2b00      	cmp	r3, #0
 8007418:	d01e      	beq.n	8007458 <xTaskCreateStatic+0xac>
 800741a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01b      	beq.n	8007458 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007422:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007428:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	2202      	movs	r2, #2
 800742e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007432:	2300      	movs	r3, #0
 8007434:	9303      	str	r3, [sp, #12]
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	9302      	str	r3, [sp, #8]
 800743a:	f107 0314 	add.w	r3, r7, #20
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	68b9      	ldr	r1, [r7, #8]
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f000 f850 	bl	80074f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007450:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007452:	f000 f8f3 	bl	800763c <prvAddNewTaskToReadyList>
 8007456:	e001      	b.n	800745c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007458:	2300      	movs	r3, #0
 800745a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800745c:	697b      	ldr	r3, [r7, #20]
	}
 800745e:	4618      	mov	r0, r3
 8007460:	3728      	adds	r7, #40	; 0x28
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007466:	b580      	push	{r7, lr}
 8007468:	b08c      	sub	sp, #48	; 0x30
 800746a:	af04      	add	r7, sp, #16
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	603b      	str	r3, [r7, #0]
 8007472:	4613      	mov	r3, r2
 8007474:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4618      	mov	r0, r3
 800747c:	f001 fc5c 	bl	8008d38 <pvPortMalloc>
 8007480:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00e      	beq.n	80074a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007488:	20bc      	movs	r0, #188	; 0xbc
 800748a:	f001 fc55 	bl	8008d38 <pvPortMalloc>
 800748e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	631a      	str	r2, [r3, #48]	; 0x30
 800749c:	e005      	b.n	80074aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800749e:	6978      	ldr	r0, [r7, #20]
 80074a0:	f001 fd16 	bl	8008ed0 <vPortFree>
 80074a4:	e001      	b.n	80074aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d017      	beq.n	80074e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074b8:	88fa      	ldrh	r2, [r7, #6]
 80074ba:	2300      	movs	r3, #0
 80074bc:	9303      	str	r3, [sp, #12]
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	9302      	str	r3, [sp, #8]
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	9301      	str	r3, [sp, #4]
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 f80e 	bl	80074f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074d4:	69f8      	ldr	r0, [r7, #28]
 80074d6:	f000 f8b1 	bl	800763c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074da:	2301      	movs	r3, #1
 80074dc:	61bb      	str	r3, [r7, #24]
 80074de:	e002      	b.n	80074e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074e0:	f04f 33ff 	mov.w	r3, #4294967295
 80074e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074e6:	69bb      	ldr	r3, [r7, #24]
	}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3720      	adds	r7, #32
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b088      	sub	sp, #32
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	461a      	mov	r2, r3
 8007508:	21a5      	movs	r1, #165	; 0xa5
 800750a:	f001 fe33 	bl	8009174 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007518:	3b01      	subs	r3, #1
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f023 0307 	bic.w	r3, r3, #7
 8007526:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	617b      	str	r3, [r7, #20]
}
 8007544:	bf00      	nop
 8007546:	e7fe      	b.n	8007546 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d01f      	beq.n	800758e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800754e:	2300      	movs	r3, #0
 8007550:	61fb      	str	r3, [r7, #28]
 8007552:	e012      	b.n	800757a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	4413      	add	r3, r2
 800755a:	7819      	ldrb	r1, [r3, #0]
 800755c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	4413      	add	r3, r2
 8007562:	3334      	adds	r3, #52	; 0x34
 8007564:	460a      	mov	r2, r1
 8007566:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d006      	beq.n	8007582 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	3301      	adds	r3, #1
 8007578:	61fb      	str	r3, [r7, #28]
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	2b0f      	cmp	r3, #15
 800757e:	d9e9      	bls.n	8007554 <prvInitialiseNewTask+0x64>
 8007580:	e000      	b.n	8007584 <prvInitialiseNewTask+0x94>
			{
				break;
 8007582:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800758c:	e003      	b.n	8007596 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007598:	2b37      	cmp	r3, #55	; 0x37
 800759a:	d901      	bls.n	80075a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800759c:	2337      	movs	r3, #55	; 0x37
 800759e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	2200      	movs	r2, #0
 80075b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	3304      	adds	r3, #4
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff f978 	bl	80068ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	3318      	adds	r3, #24
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff f973 	bl	80068ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80075ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ee:	3354      	adds	r3, #84	; 0x54
 80075f0:	2260      	movs	r2, #96	; 0x60
 80075f2:	2100      	movs	r1, #0
 80075f4:	4618      	mov	r0, r3
 80075f6:	f001 fdbd 	bl	8009174 <memset>
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	4a0c      	ldr	r2, [pc, #48]	; (8007630 <prvInitialiseNewTask+0x140>)
 80075fe:	659a      	str	r2, [r3, #88]	; 0x58
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	4a0c      	ldr	r2, [pc, #48]	; (8007634 <prvInitialiseNewTask+0x144>)
 8007604:	65da      	str	r2, [r3, #92]	; 0x5c
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	4a0b      	ldr	r2, [pc, #44]	; (8007638 <prvInitialiseNewTask+0x148>)
 800760a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	68f9      	ldr	r1, [r7, #12]
 8007610:	69b8      	ldr	r0, [r7, #24]
 8007612:	f001 f941 	bl	8008898 <pxPortInitialiseStack>
 8007616:	4602      	mov	r2, r0
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007626:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007628:	bf00      	nop
 800762a:	3720      	adds	r7, #32
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	0800af1c 	.word	0x0800af1c
 8007634:	0800af3c 	.word	0x0800af3c
 8007638:	0800aefc 	.word	0x0800aefc

0800763c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007644:	f001 fa56 	bl	8008af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007648:	4b2d      	ldr	r3, [pc, #180]	; (8007700 <prvAddNewTaskToReadyList+0xc4>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3301      	adds	r3, #1
 800764e:	4a2c      	ldr	r2, [pc, #176]	; (8007700 <prvAddNewTaskToReadyList+0xc4>)
 8007650:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007652:	4b2c      	ldr	r3, [pc, #176]	; (8007704 <prvAddNewTaskToReadyList+0xc8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d109      	bne.n	800766e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800765a:	4a2a      	ldr	r2, [pc, #168]	; (8007704 <prvAddNewTaskToReadyList+0xc8>)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007660:	4b27      	ldr	r3, [pc, #156]	; (8007700 <prvAddNewTaskToReadyList+0xc4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d110      	bne.n	800768a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007668:	f000 fc26 	bl	8007eb8 <prvInitialiseTaskLists>
 800766c:	e00d      	b.n	800768a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800766e:	4b26      	ldr	r3, [pc, #152]	; (8007708 <prvAddNewTaskToReadyList+0xcc>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007676:	4b23      	ldr	r3, [pc, #140]	; (8007704 <prvAddNewTaskToReadyList+0xc8>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	429a      	cmp	r2, r3
 8007682:	d802      	bhi.n	800768a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007684:	4a1f      	ldr	r2, [pc, #124]	; (8007704 <prvAddNewTaskToReadyList+0xc8>)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800768a:	4b20      	ldr	r3, [pc, #128]	; (800770c <prvAddNewTaskToReadyList+0xd0>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3301      	adds	r3, #1
 8007690:	4a1e      	ldr	r2, [pc, #120]	; (800770c <prvAddNewTaskToReadyList+0xd0>)
 8007692:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007694:	4b1d      	ldr	r3, [pc, #116]	; (800770c <prvAddNewTaskToReadyList+0xd0>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a0:	4b1b      	ldr	r3, [pc, #108]	; (8007710 <prvAddNewTaskToReadyList+0xd4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d903      	bls.n	80076b0 <prvAddNewTaskToReadyList+0x74>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	4a18      	ldr	r2, [pc, #96]	; (8007710 <prvAddNewTaskToReadyList+0xd4>)
 80076ae:	6013      	str	r3, [r2, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b4:	4613      	mov	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4a15      	ldr	r2, [pc, #84]	; (8007714 <prvAddNewTaskToReadyList+0xd8>)
 80076be:	441a      	add	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3304      	adds	r3, #4
 80076c4:	4619      	mov	r1, r3
 80076c6:	4610      	mov	r0, r2
 80076c8:	f7ff f8fd 	bl	80068c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076cc:	f001 fa42 	bl	8008b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076d0:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <prvAddNewTaskToReadyList+0xcc>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00e      	beq.n	80076f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076d8:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <prvAddNewTaskToReadyList+0xc8>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d207      	bcs.n	80076f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076e6:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <prvAddNewTaskToReadyList+0xdc>)
 80076e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076f6:	bf00      	nop
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	2000151c 	.word	0x2000151c
 8007704:	20001048 	.word	0x20001048
 8007708:	20001528 	.word	0x20001528
 800770c:	20001538 	.word	0x20001538
 8007710:	20001524 	.word	0x20001524
 8007714:	2000104c 	.word	0x2000104c
 8007718:	e000ed04 	.word	0xe000ed04

0800771c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d017      	beq.n	800775e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800772e:	4b13      	ldr	r3, [pc, #76]	; (800777c <vTaskDelay+0x60>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <vTaskDelay+0x30>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	60bb      	str	r3, [r7, #8]
}
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800774c:	f000 f88a 	bl	8007864 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007750:	2100      	movs	r1, #0
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fcfe 	bl	8008154 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007758:	f000 f892 	bl	8007880 <xTaskResumeAll>
 800775c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d107      	bne.n	8007774 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007764:	4b06      	ldr	r3, [pc, #24]	; (8007780 <vTaskDelay+0x64>)
 8007766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007774:	bf00      	nop
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20001544 	.word	0x20001544
 8007780:	e000ed04 	.word	0xe000ed04

08007784 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08a      	sub	sp, #40	; 0x28
 8007788:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800778a:	2300      	movs	r3, #0
 800778c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800778e:	2300      	movs	r3, #0
 8007790:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007792:	463a      	mov	r2, r7
 8007794:	1d39      	adds	r1, r7, #4
 8007796:	f107 0308 	add.w	r3, r7, #8
 800779a:	4618      	mov	r0, r3
 800779c:	f7ff f832 	bl	8006804 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	9202      	str	r2, [sp, #8]
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	2300      	movs	r3, #0
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	2300      	movs	r3, #0
 80077b0:	460a      	mov	r2, r1
 80077b2:	4924      	ldr	r1, [pc, #144]	; (8007844 <vTaskStartScheduler+0xc0>)
 80077b4:	4824      	ldr	r0, [pc, #144]	; (8007848 <vTaskStartScheduler+0xc4>)
 80077b6:	f7ff fdf9 	bl	80073ac <xTaskCreateStatic>
 80077ba:	4603      	mov	r3, r0
 80077bc:	4a23      	ldr	r2, [pc, #140]	; (800784c <vTaskStartScheduler+0xc8>)
 80077be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077c0:	4b22      	ldr	r3, [pc, #136]	; (800784c <vTaskStartScheduler+0xc8>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077c8:	2301      	movs	r3, #1
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	e001      	b.n	80077d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d102      	bne.n	80077de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80077d8:	f000 fd10 	bl	80081fc <xTimerCreateTimerTask>
 80077dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d11b      	bne.n	800781c <vTaskStartScheduler+0x98>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	613b      	str	r3, [r7, #16]
}
 80077f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077f8:	4b15      	ldr	r3, [pc, #84]	; (8007850 <vTaskStartScheduler+0xcc>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3354      	adds	r3, #84	; 0x54
 80077fe:	4a15      	ldr	r2, [pc, #84]	; (8007854 <vTaskStartScheduler+0xd0>)
 8007800:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007802:	4b15      	ldr	r3, [pc, #84]	; (8007858 <vTaskStartScheduler+0xd4>)
 8007804:	f04f 32ff 	mov.w	r2, #4294967295
 8007808:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800780a:	4b14      	ldr	r3, [pc, #80]	; (800785c <vTaskStartScheduler+0xd8>)
 800780c:	2201      	movs	r2, #1
 800780e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007810:	4b13      	ldr	r3, [pc, #76]	; (8007860 <vTaskStartScheduler+0xdc>)
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007816:	f001 f8cb 	bl	80089b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800781a:	e00e      	b.n	800783a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007822:	d10a      	bne.n	800783a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	60fb      	str	r3, [r7, #12]
}
 8007836:	bf00      	nop
 8007838:	e7fe      	b.n	8007838 <vTaskStartScheduler+0xb4>
}
 800783a:	bf00      	nop
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	080093cc 	.word	0x080093cc
 8007848:	08007e89 	.word	0x08007e89
 800784c:	20001540 	.word	0x20001540
 8007850:	20001048 	.word	0x20001048
 8007854:	20000160 	.word	0x20000160
 8007858:	2000153c 	.word	0x2000153c
 800785c:	20001528 	.word	0x20001528
 8007860:	20001520 	.word	0x20001520

08007864 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007868:	4b04      	ldr	r3, [pc, #16]	; (800787c <vTaskSuspendAll+0x18>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3301      	adds	r3, #1
 800786e:	4a03      	ldr	r2, [pc, #12]	; (800787c <vTaskSuspendAll+0x18>)
 8007870:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007872:	bf00      	nop
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	20001544 	.word	0x20001544

08007880 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007886:	2300      	movs	r3, #0
 8007888:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800788a:	2300      	movs	r3, #0
 800788c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800788e:	4b42      	ldr	r3, [pc, #264]	; (8007998 <xTaskResumeAll+0x118>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10a      	bne.n	80078ac <xTaskResumeAll+0x2c>
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	603b      	str	r3, [r7, #0]
}
 80078a8:	bf00      	nop
 80078aa:	e7fe      	b.n	80078aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078ac:	f001 f922 	bl	8008af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078b0:	4b39      	ldr	r3, [pc, #228]	; (8007998 <xTaskResumeAll+0x118>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	4a38      	ldr	r2, [pc, #224]	; (8007998 <xTaskResumeAll+0x118>)
 80078b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ba:	4b37      	ldr	r3, [pc, #220]	; (8007998 <xTaskResumeAll+0x118>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d162      	bne.n	8007988 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078c2:	4b36      	ldr	r3, [pc, #216]	; (800799c <xTaskResumeAll+0x11c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d05e      	beq.n	8007988 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078ca:	e02f      	b.n	800792c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078cc:	4b34      	ldr	r3, [pc, #208]	; (80079a0 <xTaskResumeAll+0x120>)
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3318      	adds	r3, #24
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff f851 	bl	8006980 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3304      	adds	r3, #4
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7ff f84c 	bl	8006980 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ec:	4b2d      	ldr	r3, [pc, #180]	; (80079a4 <xTaskResumeAll+0x124>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d903      	bls.n	80078fc <xTaskResumeAll+0x7c>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	4a2a      	ldr	r2, [pc, #168]	; (80079a4 <xTaskResumeAll+0x124>)
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007900:	4613      	mov	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4a27      	ldr	r2, [pc, #156]	; (80079a8 <xTaskResumeAll+0x128>)
 800790a:	441a      	add	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3304      	adds	r3, #4
 8007910:	4619      	mov	r1, r3
 8007912:	4610      	mov	r0, r2
 8007914:	f7fe ffd7 	bl	80068c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791c:	4b23      	ldr	r3, [pc, #140]	; (80079ac <xTaskResumeAll+0x12c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007922:	429a      	cmp	r2, r3
 8007924:	d302      	bcc.n	800792c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007926:	4b22      	ldr	r3, [pc, #136]	; (80079b0 <xTaskResumeAll+0x130>)
 8007928:	2201      	movs	r2, #1
 800792a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800792c:	4b1c      	ldr	r3, [pc, #112]	; (80079a0 <xTaskResumeAll+0x120>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1cb      	bne.n	80078cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800793a:	f000 fb5f 	bl	8007ffc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800793e:	4b1d      	ldr	r3, [pc, #116]	; (80079b4 <xTaskResumeAll+0x134>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d010      	beq.n	800796c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800794a:	f000 f847 	bl	80079dc <xTaskIncrementTick>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007954:	4b16      	ldr	r3, [pc, #88]	; (80079b0 <xTaskResumeAll+0x130>)
 8007956:	2201      	movs	r2, #1
 8007958:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3b01      	subs	r3, #1
 800795e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1f1      	bne.n	800794a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007966:	4b13      	ldr	r3, [pc, #76]	; (80079b4 <xTaskResumeAll+0x134>)
 8007968:	2200      	movs	r2, #0
 800796a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800796c:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <xTaskResumeAll+0x130>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d009      	beq.n	8007988 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007974:	2301      	movs	r3, #1
 8007976:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007978:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <xTaskResumeAll+0x138>)
 800797a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007988:	f001 f8e4 	bl	8008b54 <vPortExitCritical>

	return xAlreadyYielded;
 800798c:	68bb      	ldr	r3, [r7, #8]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	20001544 	.word	0x20001544
 800799c:	2000151c 	.word	0x2000151c
 80079a0:	200014dc 	.word	0x200014dc
 80079a4:	20001524 	.word	0x20001524
 80079a8:	2000104c 	.word	0x2000104c
 80079ac:	20001048 	.word	0x20001048
 80079b0:	20001530 	.word	0x20001530
 80079b4:	2000152c 	.word	0x2000152c
 80079b8:	e000ed04 	.word	0xe000ed04

080079bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079c2:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <xTaskGetTickCount+0x1c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079c8:	687b      	ldr	r3, [r7, #4]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	20001520 	.word	0x20001520

080079dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079e2:	2300      	movs	r3, #0
 80079e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079e6:	4b4f      	ldr	r3, [pc, #316]	; (8007b24 <xTaskIncrementTick+0x148>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f040 808f 	bne.w	8007b0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079f0:	4b4d      	ldr	r3, [pc, #308]	; (8007b28 <xTaskIncrementTick+0x14c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3301      	adds	r3, #1
 80079f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079f8:	4a4b      	ldr	r2, [pc, #300]	; (8007b28 <xTaskIncrementTick+0x14c>)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d120      	bne.n	8007a46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a04:	4b49      	ldr	r3, [pc, #292]	; (8007b2c <xTaskIncrementTick+0x150>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	603b      	str	r3, [r7, #0]
}
 8007a20:	bf00      	nop
 8007a22:	e7fe      	b.n	8007a22 <xTaskIncrementTick+0x46>
 8007a24:	4b41      	ldr	r3, [pc, #260]	; (8007b2c <xTaskIncrementTick+0x150>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60fb      	str	r3, [r7, #12]
 8007a2a:	4b41      	ldr	r3, [pc, #260]	; (8007b30 <xTaskIncrementTick+0x154>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a3f      	ldr	r2, [pc, #252]	; (8007b2c <xTaskIncrementTick+0x150>)
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	4a3f      	ldr	r2, [pc, #252]	; (8007b30 <xTaskIncrementTick+0x154>)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	4b3e      	ldr	r3, [pc, #248]	; (8007b34 <xTaskIncrementTick+0x158>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	4a3d      	ldr	r2, [pc, #244]	; (8007b34 <xTaskIncrementTick+0x158>)
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	f000 fadb 	bl	8007ffc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a46:	4b3c      	ldr	r3, [pc, #240]	; (8007b38 <xTaskIncrementTick+0x15c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d349      	bcc.n	8007ae4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a50:	4b36      	ldr	r3, [pc, #216]	; (8007b2c <xTaskIncrementTick+0x150>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d104      	bne.n	8007a64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a5a:	4b37      	ldr	r3, [pc, #220]	; (8007b38 <xTaskIncrementTick+0x15c>)
 8007a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a60:	601a      	str	r2, [r3, #0]
					break;
 8007a62:	e03f      	b.n	8007ae4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a64:	4b31      	ldr	r3, [pc, #196]	; (8007b2c <xTaskIncrementTick+0x150>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d203      	bcs.n	8007a84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a7c:	4a2e      	ldr	r2, [pc, #184]	; (8007b38 <xTaskIncrementTick+0x15c>)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a82:	e02f      	b.n	8007ae4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	3304      	adds	r3, #4
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fe ff79 	bl	8006980 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d004      	beq.n	8007aa0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	3318      	adds	r3, #24
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe ff70 	bl	8006980 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa4:	4b25      	ldr	r3, [pc, #148]	; (8007b3c <xTaskIncrementTick+0x160>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d903      	bls.n	8007ab4 <xTaskIncrementTick+0xd8>
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	4a22      	ldr	r2, [pc, #136]	; (8007b3c <xTaskIncrementTick+0x160>)
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4a1f      	ldr	r2, [pc, #124]	; (8007b40 <xTaskIncrementTick+0x164>)
 8007ac2:	441a      	add	r2, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	4619      	mov	r1, r3
 8007aca:	4610      	mov	r0, r2
 8007acc:	f7fe fefb 	bl	80068c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad4:	4b1b      	ldr	r3, [pc, #108]	; (8007b44 <xTaskIncrementTick+0x168>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d3b8      	bcc.n	8007a50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ae2:	e7b5      	b.n	8007a50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ae4:	4b17      	ldr	r3, [pc, #92]	; (8007b44 <xTaskIncrementTick+0x168>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aea:	4915      	ldr	r1, [pc, #84]	; (8007b40 <xTaskIncrementTick+0x164>)
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	440b      	add	r3, r1
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d901      	bls.n	8007b00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007afc:	2301      	movs	r3, #1
 8007afe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b00:	4b11      	ldr	r3, [pc, #68]	; (8007b48 <xTaskIncrementTick+0x16c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d007      	beq.n	8007b18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	e004      	b.n	8007b18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b0e:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <xTaskIncrementTick+0x170>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3301      	adds	r3, #1
 8007b14:	4a0d      	ldr	r2, [pc, #52]	; (8007b4c <xTaskIncrementTick+0x170>)
 8007b16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b18:	697b      	ldr	r3, [r7, #20]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20001544 	.word	0x20001544
 8007b28:	20001520 	.word	0x20001520
 8007b2c:	200014d4 	.word	0x200014d4
 8007b30:	200014d8 	.word	0x200014d8
 8007b34:	20001534 	.word	0x20001534
 8007b38:	2000153c 	.word	0x2000153c
 8007b3c:	20001524 	.word	0x20001524
 8007b40:	2000104c 	.word	0x2000104c
 8007b44:	20001048 	.word	0x20001048
 8007b48:	20001530 	.word	0x20001530
 8007b4c:	2000152c 	.word	0x2000152c

08007b50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b56:	4b2a      	ldr	r3, [pc, #168]	; (8007c00 <vTaskSwitchContext+0xb0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d003      	beq.n	8007b66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b5e:	4b29      	ldr	r3, [pc, #164]	; (8007c04 <vTaskSwitchContext+0xb4>)
 8007b60:	2201      	movs	r2, #1
 8007b62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b64:	e046      	b.n	8007bf4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007b66:	4b27      	ldr	r3, [pc, #156]	; (8007c04 <vTaskSwitchContext+0xb4>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b6c:	4b26      	ldr	r3, [pc, #152]	; (8007c08 <vTaskSwitchContext+0xb8>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	60fb      	str	r3, [r7, #12]
 8007b72:	e010      	b.n	8007b96 <vTaskSwitchContext+0x46>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10a      	bne.n	8007b90 <vTaskSwitchContext+0x40>
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	607b      	str	r3, [r7, #4]
}
 8007b8c:	bf00      	nop
 8007b8e:	e7fe      	b.n	8007b8e <vTaskSwitchContext+0x3e>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	491d      	ldr	r1, [pc, #116]	; (8007c0c <vTaskSwitchContext+0xbc>)
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	440b      	add	r3, r1
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0e4      	beq.n	8007b74 <vTaskSwitchContext+0x24>
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	4613      	mov	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4a15      	ldr	r2, [pc, #84]	; (8007c0c <vTaskSwitchContext+0xbc>)
 8007bb6:	4413      	add	r3, r2
 8007bb8:	60bb      	str	r3, [r7, #8]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	605a      	str	r2, [r3, #4]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	3308      	adds	r3, #8
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d104      	bne.n	8007bda <vTaskSwitchContext+0x8a>
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	605a      	str	r2, [r3, #4]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	4a0b      	ldr	r2, [pc, #44]	; (8007c10 <vTaskSwitchContext+0xc0>)
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	4a08      	ldr	r2, [pc, #32]	; (8007c08 <vTaskSwitchContext+0xb8>)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007bea:	4b09      	ldr	r3, [pc, #36]	; (8007c10 <vTaskSwitchContext+0xc0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3354      	adds	r3, #84	; 0x54
 8007bf0:	4a08      	ldr	r2, [pc, #32]	; (8007c14 <vTaskSwitchContext+0xc4>)
 8007bf2:	6013      	str	r3, [r2, #0]
}
 8007bf4:	bf00      	nop
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	20001544 	.word	0x20001544
 8007c04:	20001530 	.word	0x20001530
 8007c08:	20001524 	.word	0x20001524
 8007c0c:	2000104c 	.word	0x2000104c
 8007c10:	20001048 	.word	0x20001048
 8007c14:	20000160 	.word	0x20000160

08007c18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	60fb      	str	r3, [r7, #12]
}
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c3e:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <vTaskPlaceOnEventList+0x44>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3318      	adds	r3, #24
 8007c44:	4619      	mov	r1, r3
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fe fe61 	bl	800690e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	6838      	ldr	r0, [r7, #0]
 8007c50:	f000 fa80 	bl	8008154 <prvAddCurrentTaskToDelayedList>
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	20001048 	.word	0x20001048

08007c60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10a      	bne.n	8007c88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	617b      	str	r3, [r7, #20]
}
 8007c84:	bf00      	nop
 8007c86:	e7fe      	b.n	8007c86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c88:	4b0a      	ldr	r3, [pc, #40]	; (8007cb4 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3318      	adds	r3, #24
 8007c8e:	4619      	mov	r1, r3
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f7fe fe18 	bl	80068c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	68b8      	ldr	r0, [r7, #8]
 8007ca6:	f000 fa55 	bl	8008154 <prvAddCurrentTaskToDelayedList>
	}
 8007caa:	bf00      	nop
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20001048 	.word	0x20001048

08007cb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10a      	bne.n	8007ce4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	60fb      	str	r3, [r7, #12]
}
 8007ce0:	bf00      	nop
 8007ce2:	e7fe      	b.n	8007ce2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	3318      	adds	r3, #24
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fe fe49 	bl	8006980 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cee:	4b1e      	ldr	r3, [pc, #120]	; (8007d68 <xTaskRemoveFromEventList+0xb0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d11d      	bne.n	8007d32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe fe40 	bl	8006980 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d04:	4b19      	ldr	r3, [pc, #100]	; (8007d6c <xTaskRemoveFromEventList+0xb4>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d903      	bls.n	8007d14 <xTaskRemoveFromEventList+0x5c>
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	4a16      	ldr	r2, [pc, #88]	; (8007d6c <xTaskRemoveFromEventList+0xb4>)
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d18:	4613      	mov	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4a13      	ldr	r2, [pc, #76]	; (8007d70 <xTaskRemoveFromEventList+0xb8>)
 8007d22:	441a      	add	r2, r3
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	3304      	adds	r3, #4
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	f7fe fdcb 	bl	80068c6 <vListInsertEnd>
 8007d30:	e005      	b.n	8007d3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	3318      	adds	r3, #24
 8007d36:	4619      	mov	r1, r3
 8007d38:	480e      	ldr	r0, [pc, #56]	; (8007d74 <xTaskRemoveFromEventList+0xbc>)
 8007d3a:	f7fe fdc4 	bl	80068c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d42:	4b0d      	ldr	r3, [pc, #52]	; (8007d78 <xTaskRemoveFromEventList+0xc0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d905      	bls.n	8007d58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d50:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <xTaskRemoveFromEventList+0xc4>)
 8007d52:	2201      	movs	r2, #1
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	e001      	b.n	8007d5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d5c:	697b      	ldr	r3, [r7, #20]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20001544 	.word	0x20001544
 8007d6c:	20001524 	.word	0x20001524
 8007d70:	2000104c 	.word	0x2000104c
 8007d74:	200014dc 	.word	0x200014dc
 8007d78:	20001048 	.word	0x20001048
 8007d7c:	20001530 	.word	0x20001530

08007d80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d88:	4b06      	ldr	r3, [pc, #24]	; (8007da4 <vTaskInternalSetTimeOutState+0x24>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d90:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <vTaskInternalSetTimeOutState+0x28>)
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	605a      	str	r2, [r3, #4]
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	20001534 	.word	0x20001534
 8007da8:	20001520 	.word	0x20001520

08007dac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10a      	bne.n	8007dd2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	613b      	str	r3, [r7, #16]
}
 8007dce:	bf00      	nop
 8007dd0:	e7fe      	b.n	8007dd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10a      	bne.n	8007dee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	60fb      	str	r3, [r7, #12]
}
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007dee:	f000 fe81 	bl	8008af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007df2:	4b1d      	ldr	r3, [pc, #116]	; (8007e68 <xTaskCheckForTimeOut+0xbc>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0a:	d102      	bne.n	8007e12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	61fb      	str	r3, [r7, #28]
 8007e10:	e023      	b.n	8007e5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	4b15      	ldr	r3, [pc, #84]	; (8007e6c <xTaskCheckForTimeOut+0xc0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d007      	beq.n	8007e2e <xTaskCheckForTimeOut+0x82>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	69ba      	ldr	r2, [r7, #24]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d302      	bcc.n	8007e2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	61fb      	str	r3, [r7, #28]
 8007e2c:	e015      	b.n	8007e5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d20b      	bcs.n	8007e50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7ff ff9b 	bl	8007d80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61fb      	str	r3, [r7, #28]
 8007e4e:	e004      	b.n	8007e5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e56:	2301      	movs	r3, #1
 8007e58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e5a:	f000 fe7b 	bl	8008b54 <vPortExitCritical>

	return xReturn;
 8007e5e:	69fb      	ldr	r3, [r7, #28]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3720      	adds	r7, #32
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	20001520 	.word	0x20001520
 8007e6c:	20001534 	.word	0x20001534

08007e70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e74:	4b03      	ldr	r3, [pc, #12]	; (8007e84 <vTaskMissedYield+0x14>)
 8007e76:	2201      	movs	r2, #1
 8007e78:	601a      	str	r2, [r3, #0]
}
 8007e7a:	bf00      	nop
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr
 8007e84:	20001530 	.word	0x20001530

08007e88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e90:	f000 f852 	bl	8007f38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e94:	4b06      	ldr	r3, [pc, #24]	; (8007eb0 <prvIdleTask+0x28>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d9f9      	bls.n	8007e90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e9c:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <prvIdleTask+0x2c>)
 8007e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007eac:	e7f0      	b.n	8007e90 <prvIdleTask+0x8>
 8007eae:	bf00      	nop
 8007eb0:	2000104c 	.word	0x2000104c
 8007eb4:	e000ed04 	.word	0xe000ed04

08007eb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	e00c      	b.n	8007ede <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4a12      	ldr	r2, [pc, #72]	; (8007f18 <prvInitialiseTaskLists+0x60>)
 8007ed0:	4413      	add	r3, r2
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe fcca 	bl	800686c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3301      	adds	r3, #1
 8007edc:	607b      	str	r3, [r7, #4]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b37      	cmp	r3, #55	; 0x37
 8007ee2:	d9ef      	bls.n	8007ec4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ee4:	480d      	ldr	r0, [pc, #52]	; (8007f1c <prvInitialiseTaskLists+0x64>)
 8007ee6:	f7fe fcc1 	bl	800686c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007eea:	480d      	ldr	r0, [pc, #52]	; (8007f20 <prvInitialiseTaskLists+0x68>)
 8007eec:	f7fe fcbe 	bl	800686c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ef0:	480c      	ldr	r0, [pc, #48]	; (8007f24 <prvInitialiseTaskLists+0x6c>)
 8007ef2:	f7fe fcbb 	bl	800686c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ef6:	480c      	ldr	r0, [pc, #48]	; (8007f28 <prvInitialiseTaskLists+0x70>)
 8007ef8:	f7fe fcb8 	bl	800686c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007efc:	480b      	ldr	r0, [pc, #44]	; (8007f2c <prvInitialiseTaskLists+0x74>)
 8007efe:	f7fe fcb5 	bl	800686c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f02:	4b0b      	ldr	r3, [pc, #44]	; (8007f30 <prvInitialiseTaskLists+0x78>)
 8007f04:	4a05      	ldr	r2, [pc, #20]	; (8007f1c <prvInitialiseTaskLists+0x64>)
 8007f06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f08:	4b0a      	ldr	r3, [pc, #40]	; (8007f34 <prvInitialiseTaskLists+0x7c>)
 8007f0a:	4a05      	ldr	r2, [pc, #20]	; (8007f20 <prvInitialiseTaskLists+0x68>)
 8007f0c:	601a      	str	r2, [r3, #0]
}
 8007f0e:	bf00      	nop
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	2000104c 	.word	0x2000104c
 8007f1c:	200014ac 	.word	0x200014ac
 8007f20:	200014c0 	.word	0x200014c0
 8007f24:	200014dc 	.word	0x200014dc
 8007f28:	200014f0 	.word	0x200014f0
 8007f2c:	20001508 	.word	0x20001508
 8007f30:	200014d4 	.word	0x200014d4
 8007f34:	200014d8 	.word	0x200014d8

08007f38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f3e:	e019      	b.n	8007f74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f40:	f000 fdd8 	bl	8008af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f44:	4b10      	ldr	r3, [pc, #64]	; (8007f88 <prvCheckTasksWaitingTermination+0x50>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe fd15 	bl	8006980 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f56:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <prvCheckTasksWaitingTermination+0x54>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	4a0b      	ldr	r2, [pc, #44]	; (8007f8c <prvCheckTasksWaitingTermination+0x54>)
 8007f5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f60:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <prvCheckTasksWaitingTermination+0x58>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3b01      	subs	r3, #1
 8007f66:	4a0a      	ldr	r2, [pc, #40]	; (8007f90 <prvCheckTasksWaitingTermination+0x58>)
 8007f68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f6a:	f000 fdf3 	bl	8008b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f810 	bl	8007f94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f74:	4b06      	ldr	r3, [pc, #24]	; (8007f90 <prvCheckTasksWaitingTermination+0x58>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e1      	bne.n	8007f40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f7c:	bf00      	nop
 8007f7e:	bf00      	nop
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	200014f0 	.word	0x200014f0
 8007f8c:	2000151c 	.word	0x2000151c
 8007f90:	20001504 	.word	0x20001504

08007f94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3354      	adds	r3, #84	; 0x54
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 f8fd 	bl	80091a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d108      	bne.n	8007fc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 ff8b 	bl	8008ed0 <vPortFree>
				vPortFree( pxTCB );
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 ff88 	bl	8008ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fc0:	e018      	b.n	8007ff4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d103      	bne.n	8007fd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 ff7f 	bl	8008ed0 <vPortFree>
	}
 8007fd2:	e00f      	b.n	8007ff4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d00a      	beq.n	8007ff4 <prvDeleteTCB+0x60>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	60fb      	str	r3, [r7, #12]
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <prvDeleteTCB+0x5e>
	}
 8007ff4:	bf00      	nop
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008002:	4b0c      	ldr	r3, [pc, #48]	; (8008034 <prvResetNextTaskUnblockTime+0x38>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d104      	bne.n	8008016 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800800c:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <prvResetNextTaskUnblockTime+0x3c>)
 800800e:	f04f 32ff 	mov.w	r2, #4294967295
 8008012:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008014:	e008      	b.n	8008028 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008016:	4b07      	ldr	r3, [pc, #28]	; (8008034 <prvResetNextTaskUnblockTime+0x38>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	4a04      	ldr	r2, [pc, #16]	; (8008038 <prvResetNextTaskUnblockTime+0x3c>)
 8008026:	6013      	str	r3, [r2, #0]
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	200014d4 	.word	0x200014d4
 8008038:	2000153c 	.word	0x2000153c

0800803c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008042:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <xTaskGetSchedulerState+0x34>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d102      	bne.n	8008050 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800804a:	2301      	movs	r3, #1
 800804c:	607b      	str	r3, [r7, #4]
 800804e:	e008      	b.n	8008062 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008050:	4b08      	ldr	r3, [pc, #32]	; (8008074 <xTaskGetSchedulerState+0x38>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d102      	bne.n	800805e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008058:	2302      	movs	r3, #2
 800805a:	607b      	str	r3, [r7, #4]
 800805c:	e001      	b.n	8008062 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800805e:	2300      	movs	r3, #0
 8008060:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008062:	687b      	ldr	r3, [r7, #4]
	}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	20001528 	.word	0x20001528
 8008074:	20001544 	.word	0x20001544

08008078 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d056      	beq.n	800813c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800808e:	4b2e      	ldr	r3, [pc, #184]	; (8008148 <xTaskPriorityDisinherit+0xd0>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	429a      	cmp	r2, r3
 8008096:	d00a      	beq.n	80080ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	60fb      	str	r3, [r7, #12]
}
 80080aa:	bf00      	nop
 80080ac:	e7fe      	b.n	80080ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10a      	bne.n	80080cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	60bb      	str	r3, [r7, #8]
}
 80080c8:	bf00      	nop
 80080ca:	e7fe      	b.n	80080ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d0:	1e5a      	subs	r2, r3, #1
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080de:	429a      	cmp	r2, r3
 80080e0:	d02c      	beq.n	800813c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d128      	bne.n	800813c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	3304      	adds	r3, #4
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe fc46 	bl	8006980 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810c:	4b0f      	ldr	r3, [pc, #60]	; (800814c <xTaskPriorityDisinherit+0xd4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d903      	bls.n	800811c <xTaskPriorityDisinherit+0xa4>
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	4a0c      	ldr	r2, [pc, #48]	; (800814c <xTaskPriorityDisinherit+0xd4>)
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4a09      	ldr	r2, [pc, #36]	; (8008150 <xTaskPriorityDisinherit+0xd8>)
 800812a:	441a      	add	r2, r3
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	3304      	adds	r3, #4
 8008130:	4619      	mov	r1, r3
 8008132:	4610      	mov	r0, r2
 8008134:	f7fe fbc7 	bl	80068c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008138:	2301      	movs	r3, #1
 800813a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800813c:	697b      	ldr	r3, [r7, #20]
	}
 800813e:	4618      	mov	r0, r3
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	20001048 	.word	0x20001048
 800814c:	20001524 	.word	0x20001524
 8008150:	2000104c 	.word	0x2000104c

08008154 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800815e:	4b21      	ldr	r3, [pc, #132]	; (80081e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008164:	4b20      	ldr	r3, [pc, #128]	; (80081e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3304      	adds	r3, #4
 800816a:	4618      	mov	r0, r3
 800816c:	f7fe fc08 	bl	8006980 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008176:	d10a      	bne.n	800818e <prvAddCurrentTaskToDelayedList+0x3a>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d007      	beq.n	800818e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800817e:	4b1a      	ldr	r3, [pc, #104]	; (80081e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3304      	adds	r3, #4
 8008184:	4619      	mov	r1, r3
 8008186:	4819      	ldr	r0, [pc, #100]	; (80081ec <prvAddCurrentTaskToDelayedList+0x98>)
 8008188:	f7fe fb9d 	bl	80068c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800818c:	e026      	b.n	80081dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4413      	add	r3, r2
 8008194:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008196:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d209      	bcs.n	80081ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081a6:	4b12      	ldr	r3, [pc, #72]	; (80081f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	4b0f      	ldr	r3, [pc, #60]	; (80081e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3304      	adds	r3, #4
 80081b0:	4619      	mov	r1, r3
 80081b2:	4610      	mov	r0, r2
 80081b4:	f7fe fbab 	bl	800690e <vListInsert>
}
 80081b8:	e010      	b.n	80081dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ba:	4b0e      	ldr	r3, [pc, #56]	; (80081f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f7fe fba1 	bl	800690e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081cc:	4b0a      	ldr	r3, [pc, #40]	; (80081f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d202      	bcs.n	80081dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80081d6:	4a08      	ldr	r2, [pc, #32]	; (80081f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	6013      	str	r3, [r2, #0]
}
 80081dc:	bf00      	nop
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	20001520 	.word	0x20001520
 80081e8:	20001048 	.word	0x20001048
 80081ec:	20001508 	.word	0x20001508
 80081f0:	200014d8 	.word	0x200014d8
 80081f4:	200014d4 	.word	0x200014d4
 80081f8:	2000153c 	.word	0x2000153c

080081fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08a      	sub	sp, #40	; 0x28
 8008200:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008202:	2300      	movs	r3, #0
 8008204:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008206:	f000 fb07 	bl	8008818 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800820a:	4b1c      	ldr	r3, [pc, #112]	; (800827c <xTimerCreateTimerTask+0x80>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d021      	beq.n	8008256 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008216:	2300      	movs	r3, #0
 8008218:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800821a:	1d3a      	adds	r2, r7, #4
 800821c:	f107 0108 	add.w	r1, r7, #8
 8008220:	f107 030c 	add.w	r3, r7, #12
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe fb07 	bl	8006838 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800822a:	6879      	ldr	r1, [r7, #4]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	9202      	str	r2, [sp, #8]
 8008232:	9301      	str	r3, [sp, #4]
 8008234:	2302      	movs	r3, #2
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	2300      	movs	r3, #0
 800823a:	460a      	mov	r2, r1
 800823c:	4910      	ldr	r1, [pc, #64]	; (8008280 <xTimerCreateTimerTask+0x84>)
 800823e:	4811      	ldr	r0, [pc, #68]	; (8008284 <xTimerCreateTimerTask+0x88>)
 8008240:	f7ff f8b4 	bl	80073ac <xTaskCreateStatic>
 8008244:	4603      	mov	r3, r0
 8008246:	4a10      	ldr	r2, [pc, #64]	; (8008288 <xTimerCreateTimerTask+0x8c>)
 8008248:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800824a:	4b0f      	ldr	r3, [pc, #60]	; (8008288 <xTimerCreateTimerTask+0x8c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008252:	2301      	movs	r3, #1
 8008254:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10a      	bne.n	8008272 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800825c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	613b      	str	r3, [r7, #16]
}
 800826e:	bf00      	nop
 8008270:	e7fe      	b.n	8008270 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008272:	697b      	ldr	r3, [r7, #20]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20001578 	.word	0x20001578
 8008280:	080093d4 	.word	0x080093d4
 8008284:	080083c1 	.word	0x080083c1
 8008288:	2000157c 	.word	0x2000157c

0800828c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08a      	sub	sp, #40	; 0x28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800829a:	2300      	movs	r3, #0
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10a      	bne.n	80082ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	623b      	str	r3, [r7, #32]
}
 80082b6:	bf00      	nop
 80082b8:	e7fe      	b.n	80082b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80082ba:	4b1a      	ldr	r3, [pc, #104]	; (8008324 <xTimerGenericCommand+0x98>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d02a      	beq.n	8008318 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b05      	cmp	r3, #5
 80082d2:	dc18      	bgt.n	8008306 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80082d4:	f7ff feb2 	bl	800803c <xTaskGetSchedulerState>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d109      	bne.n	80082f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80082de:	4b11      	ldr	r3, [pc, #68]	; (8008324 <xTimerGenericCommand+0x98>)
 80082e0:	6818      	ldr	r0, [r3, #0]
 80082e2:	f107 0110 	add.w	r1, r7, #16
 80082e6:	2300      	movs	r3, #0
 80082e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ea:	f7fe fc77 	bl	8006bdc <xQueueGenericSend>
 80082ee:	6278      	str	r0, [r7, #36]	; 0x24
 80082f0:	e012      	b.n	8008318 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80082f2:	4b0c      	ldr	r3, [pc, #48]	; (8008324 <xTimerGenericCommand+0x98>)
 80082f4:	6818      	ldr	r0, [r3, #0]
 80082f6:	f107 0110 	add.w	r1, r7, #16
 80082fa:	2300      	movs	r3, #0
 80082fc:	2200      	movs	r2, #0
 80082fe:	f7fe fc6d 	bl	8006bdc <xQueueGenericSend>
 8008302:	6278      	str	r0, [r7, #36]	; 0x24
 8008304:	e008      	b.n	8008318 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008306:	4b07      	ldr	r3, [pc, #28]	; (8008324 <xTimerGenericCommand+0x98>)
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	f107 0110 	add.w	r1, r7, #16
 800830e:	2300      	movs	r3, #0
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	f7fe fd61 	bl	8006dd8 <xQueueGenericSendFromISR>
 8008316:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800831a:	4618      	mov	r0, r3
 800831c:	3728      	adds	r7, #40	; 0x28
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	20001578 	.word	0x20001578

08008328 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b088      	sub	sp, #32
 800832c:	af02      	add	r7, sp, #8
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008332:	4b22      	ldr	r3, [pc, #136]	; (80083bc <prvProcessExpiredTimer+0x94>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	3304      	adds	r3, #4
 8008340:	4618      	mov	r0, r3
 8008342:	f7fe fb1d 	bl	8006980 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800834c:	f003 0304 	and.w	r3, r3, #4
 8008350:	2b00      	cmp	r3, #0
 8008352:	d022      	beq.n	800839a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	699a      	ldr	r2, [r3, #24]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	18d1      	adds	r1, r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	6978      	ldr	r0, [r7, #20]
 8008362:	f000 f8d1 	bl	8008508 <prvInsertTimerInActiveList>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d01f      	beq.n	80083ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800836c:	2300      	movs	r3, #0
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	2300      	movs	r3, #0
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	2100      	movs	r1, #0
 8008376:	6978      	ldr	r0, [r7, #20]
 8008378:	f7ff ff88 	bl	800828c <xTimerGenericCommand>
 800837c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d113      	bne.n	80083ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	60fb      	str	r3, [r7, #12]
}
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083a0:	f023 0301 	bic.w	r3, r3, #1
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	6978      	ldr	r0, [r7, #20]
 80083b2:	4798      	blx	r3
}
 80083b4:	bf00      	nop
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20001570 	.word	0x20001570

080083c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083c8:	f107 0308 	add.w	r3, r7, #8
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 f857 	bl	8008480 <prvGetNextExpireTime>
 80083d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4619      	mov	r1, r3
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 f803 	bl	80083e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80083de:	f000 f8d5 	bl	800858c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083e2:	e7f1      	b.n	80083c8 <prvTimerTask+0x8>

080083e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80083ee:	f7ff fa39 	bl	8007864 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083f2:	f107 0308 	add.w	r3, r7, #8
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 f866 	bl	80084c8 <prvSampleTimeNow>
 80083fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d130      	bne.n	8008466 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10a      	bne.n	8008420 <prvProcessTimerOrBlockTask+0x3c>
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	429a      	cmp	r2, r3
 8008410:	d806      	bhi.n	8008420 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008412:	f7ff fa35 	bl	8007880 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008416:	68f9      	ldr	r1, [r7, #12]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff ff85 	bl	8008328 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800841e:	e024      	b.n	800846a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d008      	beq.n	8008438 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008426:	4b13      	ldr	r3, [pc, #76]	; (8008474 <prvProcessTimerOrBlockTask+0x90>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <prvProcessTimerOrBlockTask+0x50>
 8008430:	2301      	movs	r3, #1
 8008432:	e000      	b.n	8008436 <prvProcessTimerOrBlockTask+0x52>
 8008434:	2300      	movs	r3, #0
 8008436:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008438:	4b0f      	ldr	r3, [pc, #60]	; (8008478 <prvProcessTimerOrBlockTask+0x94>)
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	4619      	mov	r1, r3
 8008446:	f7fe ff7d 	bl	8007344 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800844a:	f7ff fa19 	bl	8007880 <xTaskResumeAll>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10a      	bne.n	800846a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008454:	4b09      	ldr	r3, [pc, #36]	; (800847c <prvProcessTimerOrBlockTask+0x98>)
 8008456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	f3bf 8f6f 	isb	sy
}
 8008464:	e001      	b.n	800846a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008466:	f7ff fa0b 	bl	8007880 <xTaskResumeAll>
}
 800846a:	bf00      	nop
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20001574 	.word	0x20001574
 8008478:	20001578 	.word	0x20001578
 800847c:	e000ed04 	.word	0xe000ed04

08008480 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008488:	4b0e      	ldr	r3, [pc, #56]	; (80084c4 <prvGetNextExpireTime+0x44>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <prvGetNextExpireTime+0x16>
 8008492:	2201      	movs	r2, #1
 8008494:	e000      	b.n	8008498 <prvGetNextExpireTime+0x18>
 8008496:	2200      	movs	r2, #0
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d105      	bne.n	80084b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <prvGetNextExpireTime+0x44>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60fb      	str	r3, [r7, #12]
 80084ae:	e001      	b.n	80084b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80084b4:	68fb      	ldr	r3, [r7, #12]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	20001570 	.word	0x20001570

080084c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80084d0:	f7ff fa74 	bl	80079bc <xTaskGetTickCount>
 80084d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80084d6:	4b0b      	ldr	r3, [pc, #44]	; (8008504 <prvSampleTimeNow+0x3c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d205      	bcs.n	80084ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80084e0:	f000 f936 	bl	8008750 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	601a      	str	r2, [r3, #0]
 80084ea:	e002      	b.n	80084f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80084f2:	4a04      	ldr	r2, [pc, #16]	; (8008504 <prvSampleTimeNow+0x3c>)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80084f8:	68fb      	ldr	r3, [r7, #12]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	20001580 	.word	0x20001580

08008508 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008516:	2300      	movs	r3, #0
 8008518:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	429a      	cmp	r2, r3
 800852c:	d812      	bhi.n	8008554 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	1ad2      	subs	r2, r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	429a      	cmp	r2, r3
 800853a:	d302      	bcc.n	8008542 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800853c:	2301      	movs	r3, #1
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	e01b      	b.n	800857a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008542:	4b10      	ldr	r3, [pc, #64]	; (8008584 <prvInsertTimerInActiveList+0x7c>)
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3304      	adds	r3, #4
 800854a:	4619      	mov	r1, r3
 800854c:	4610      	mov	r0, r2
 800854e:	f7fe f9de 	bl	800690e <vListInsert>
 8008552:	e012      	b.n	800857a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	429a      	cmp	r2, r3
 800855a:	d206      	bcs.n	800856a <prvInsertTimerInActiveList+0x62>
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	429a      	cmp	r2, r3
 8008562:	d302      	bcc.n	800856a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008564:	2301      	movs	r3, #1
 8008566:	617b      	str	r3, [r7, #20]
 8008568:	e007      	b.n	800857a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800856a:	4b07      	ldr	r3, [pc, #28]	; (8008588 <prvInsertTimerInActiveList+0x80>)
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3304      	adds	r3, #4
 8008572:	4619      	mov	r1, r3
 8008574:	4610      	mov	r0, r2
 8008576:	f7fe f9ca 	bl	800690e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800857a:	697b      	ldr	r3, [r7, #20]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3718      	adds	r7, #24
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20001574 	.word	0x20001574
 8008588:	20001570 	.word	0x20001570

0800858c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08e      	sub	sp, #56	; 0x38
 8008590:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008592:	e0ca      	b.n	800872a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	da18      	bge.n	80085cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800859a:	1d3b      	adds	r3, r7, #4
 800859c:	3304      	adds	r3, #4
 800859e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80085a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10a      	bne.n	80085bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80085a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	61fb      	str	r3, [r7, #28]
}
 80085b8:	bf00      	nop
 80085ba:	e7fe      	b.n	80085ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80085bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085c2:	6850      	ldr	r0, [r2, #4]
 80085c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085c6:	6892      	ldr	r2, [r2, #8]
 80085c8:	4611      	mov	r1, r2
 80085ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f2c0 80aa 	blt.w	8008728 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	3304      	adds	r3, #4
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fe f9cb 	bl	8006980 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085ea:	463b      	mov	r3, r7
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7ff ff6b 	bl	80084c8 <prvSampleTimeNow>
 80085f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b09      	cmp	r3, #9
 80085f8:	f200 8097 	bhi.w	800872a <prvProcessReceivedCommands+0x19e>
 80085fc:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <prvProcessReceivedCommands+0x78>)
 80085fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008602:	bf00      	nop
 8008604:	0800862d 	.word	0x0800862d
 8008608:	0800862d 	.word	0x0800862d
 800860c:	0800862d 	.word	0x0800862d
 8008610:	080086a1 	.word	0x080086a1
 8008614:	080086b5 	.word	0x080086b5
 8008618:	080086ff 	.word	0x080086ff
 800861c:	0800862d 	.word	0x0800862d
 8008620:	0800862d 	.word	0x0800862d
 8008624:	080086a1 	.word	0x080086a1
 8008628:	080086b5 	.word	0x080086b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800862c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008632:	f043 0301 	orr.w	r3, r3, #1
 8008636:	b2da      	uxtb	r2, r3
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	18d1      	adds	r1, r2, r3
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800864a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800864c:	f7ff ff5c 	bl	8008508 <prvInsertTimerInActiveList>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d069      	beq.n	800872a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800865c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	d05e      	beq.n	800872a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	441a      	add	r2, r3
 8008674:	2300      	movs	r3, #0
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	2300      	movs	r3, #0
 800867a:	2100      	movs	r1, #0
 800867c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800867e:	f7ff fe05 	bl	800828c <xTimerGenericCommand>
 8008682:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d14f      	bne.n	800872a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	61bb      	str	r3, [r7, #24]
}
 800869c:	bf00      	nop
 800869e:	e7fe      	b.n	800869e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086a6:	f023 0301 	bic.w	r3, r3, #1
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80086b2:	e03a      	b.n	800872a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ba:	f043 0301 	orr.w	r3, r3, #1
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10a      	bne.n	80086ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	617b      	str	r3, [r7, #20]
}
 80086e6:	bf00      	nop
 80086e8:	e7fe      	b.n	80086e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80086ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ec:	699a      	ldr	r2, [r3, #24]
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	18d1      	adds	r1, r2, r3
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086f8:	f7ff ff06 	bl	8008508 <prvInsertTimerInActiveList>
					break;
 80086fc:	e015      	b.n	800872a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d103      	bne.n	8008714 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800870c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800870e:	f000 fbdf 	bl	8008ed0 <vPortFree>
 8008712:	e00a      	b.n	800872a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800871a:	f023 0301 	bic.w	r3, r3, #1
 800871e:	b2da      	uxtb	r2, r3
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008726:	e000      	b.n	800872a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008728:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800872a:	4b08      	ldr	r3, [pc, #32]	; (800874c <prvProcessReceivedCommands+0x1c0>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	1d39      	adds	r1, r7, #4
 8008730:	2200      	movs	r2, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe fbec 	bl	8006f10 <xQueueReceive>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	f47f af2a 	bne.w	8008594 <prvProcessReceivedCommands+0x8>
	}
}
 8008740:	bf00      	nop
 8008742:	bf00      	nop
 8008744:	3730      	adds	r7, #48	; 0x30
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	20001578 	.word	0x20001578

08008750 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b088      	sub	sp, #32
 8008754:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008756:	e048      	b.n	80087ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008758:	4b2d      	ldr	r3, [pc, #180]	; (8008810 <prvSwitchTimerLists+0xc0>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008762:	4b2b      	ldr	r3, [pc, #172]	; (8008810 <prvSwitchTimerLists+0xc0>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3304      	adds	r3, #4
 8008770:	4618      	mov	r0, r3
 8008772:	f7fe f905 	bl	8006980 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008784:	f003 0304 	and.w	r3, r3, #4
 8008788:	2b00      	cmp	r3, #0
 800878a:	d02e      	beq.n	80087ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	4413      	add	r3, r2
 8008794:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	429a      	cmp	r2, r3
 800879c:	d90e      	bls.n	80087bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087aa:	4b19      	ldr	r3, [pc, #100]	; (8008810 <prvSwitchTimerLists+0xc0>)
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3304      	adds	r3, #4
 80087b2:	4619      	mov	r1, r3
 80087b4:	4610      	mov	r0, r2
 80087b6:	f7fe f8aa 	bl	800690e <vListInsert>
 80087ba:	e016      	b.n	80087ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087bc:	2300      	movs	r3, #0
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	2300      	movs	r3, #0
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	2100      	movs	r1, #0
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f7ff fd60 	bl	800828c <xTimerGenericCommand>
 80087cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10a      	bne.n	80087ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	603b      	str	r3, [r7, #0]
}
 80087e6:	bf00      	nop
 80087e8:	e7fe      	b.n	80087e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087ea:	4b09      	ldr	r3, [pc, #36]	; (8008810 <prvSwitchTimerLists+0xc0>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1b1      	bne.n	8008758 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80087f4:	4b06      	ldr	r3, [pc, #24]	; (8008810 <prvSwitchTimerLists+0xc0>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80087fa:	4b06      	ldr	r3, [pc, #24]	; (8008814 <prvSwitchTimerLists+0xc4>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a04      	ldr	r2, [pc, #16]	; (8008810 <prvSwitchTimerLists+0xc0>)
 8008800:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008802:	4a04      	ldr	r2, [pc, #16]	; (8008814 <prvSwitchTimerLists+0xc4>)
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	6013      	str	r3, [r2, #0]
}
 8008808:	bf00      	nop
 800880a:	3718      	adds	r7, #24
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	20001570 	.word	0x20001570
 8008814:	20001574 	.word	0x20001574

08008818 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800881e:	f000 f969 	bl	8008af4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008822:	4b15      	ldr	r3, [pc, #84]	; (8008878 <prvCheckForValidListAndQueue+0x60>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d120      	bne.n	800886c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800882a:	4814      	ldr	r0, [pc, #80]	; (800887c <prvCheckForValidListAndQueue+0x64>)
 800882c:	f7fe f81e 	bl	800686c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008830:	4813      	ldr	r0, [pc, #76]	; (8008880 <prvCheckForValidListAndQueue+0x68>)
 8008832:	f7fe f81b 	bl	800686c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008836:	4b13      	ldr	r3, [pc, #76]	; (8008884 <prvCheckForValidListAndQueue+0x6c>)
 8008838:	4a10      	ldr	r2, [pc, #64]	; (800887c <prvCheckForValidListAndQueue+0x64>)
 800883a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800883c:	4b12      	ldr	r3, [pc, #72]	; (8008888 <prvCheckForValidListAndQueue+0x70>)
 800883e:	4a10      	ldr	r2, [pc, #64]	; (8008880 <prvCheckForValidListAndQueue+0x68>)
 8008840:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008842:	2300      	movs	r3, #0
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	4b11      	ldr	r3, [pc, #68]	; (800888c <prvCheckForValidListAndQueue+0x74>)
 8008848:	4a11      	ldr	r2, [pc, #68]	; (8008890 <prvCheckForValidListAndQueue+0x78>)
 800884a:	2110      	movs	r1, #16
 800884c:	200a      	movs	r0, #10
 800884e:	f7fe f929 	bl	8006aa4 <xQueueGenericCreateStatic>
 8008852:	4603      	mov	r3, r0
 8008854:	4a08      	ldr	r2, [pc, #32]	; (8008878 <prvCheckForValidListAndQueue+0x60>)
 8008856:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008858:	4b07      	ldr	r3, [pc, #28]	; (8008878 <prvCheckForValidListAndQueue+0x60>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d005      	beq.n	800886c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008860:	4b05      	ldr	r3, [pc, #20]	; (8008878 <prvCheckForValidListAndQueue+0x60>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	490b      	ldr	r1, [pc, #44]	; (8008894 <prvCheckForValidListAndQueue+0x7c>)
 8008866:	4618      	mov	r0, r3
 8008868:	f7fe fd42 	bl	80072f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800886c:	f000 f972 	bl	8008b54 <vPortExitCritical>
}
 8008870:	bf00      	nop
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	20001578 	.word	0x20001578
 800887c:	20001548 	.word	0x20001548
 8008880:	2000155c 	.word	0x2000155c
 8008884:	20001570 	.word	0x20001570
 8008888:	20001574 	.word	0x20001574
 800888c:	20001624 	.word	0x20001624
 8008890:	20001584 	.word	0x20001584
 8008894:	080093dc 	.word	0x080093dc

08008898 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3b04      	subs	r3, #4
 80088a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80088b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3b04      	subs	r3, #4
 80088b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	f023 0201 	bic.w	r2, r3, #1
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	3b04      	subs	r3, #4
 80088c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088c8:	4a0c      	ldr	r2, [pc, #48]	; (80088fc <pxPortInitialiseStack+0x64>)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3b14      	subs	r3, #20
 80088d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3b04      	subs	r3, #4
 80088de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f06f 0202 	mvn.w	r2, #2
 80088e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	3b20      	subs	r3, #32
 80088ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088ee:	68fb      	ldr	r3, [r7, #12]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	08008901 	.word	0x08008901

08008900 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800890a:	4b12      	ldr	r3, [pc, #72]	; (8008954 <prvTaskExitError+0x54>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008912:	d00a      	beq.n	800892a <prvTaskExitError+0x2a>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	60fb      	str	r3, [r7, #12]
}
 8008926:	bf00      	nop
 8008928:	e7fe      	b.n	8008928 <prvTaskExitError+0x28>
	__asm volatile
 800892a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	60bb      	str	r3, [r7, #8]
}
 800893c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800893e:	bf00      	nop
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0fc      	beq.n	8008940 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008946:	bf00      	nop
 8008948:	bf00      	nop
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	2000015c 	.word	0x2000015c
	...

08008960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008960:	4b07      	ldr	r3, [pc, #28]	; (8008980 <pxCurrentTCBConst2>)
 8008962:	6819      	ldr	r1, [r3, #0]
 8008964:	6808      	ldr	r0, [r1, #0]
 8008966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896a:	f380 8809 	msr	PSP, r0
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f04f 0000 	mov.w	r0, #0
 8008976:	f380 8811 	msr	BASEPRI, r0
 800897a:	4770      	bx	lr
 800897c:	f3af 8000 	nop.w

08008980 <pxCurrentTCBConst2>:
 8008980:	20001048 	.word	0x20001048
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008984:	bf00      	nop
 8008986:	bf00      	nop

08008988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008988:	4808      	ldr	r0, [pc, #32]	; (80089ac <prvPortStartFirstTask+0x24>)
 800898a:	6800      	ldr	r0, [r0, #0]
 800898c:	6800      	ldr	r0, [r0, #0]
 800898e:	f380 8808 	msr	MSP, r0
 8008992:	f04f 0000 	mov.w	r0, #0
 8008996:	f380 8814 	msr	CONTROL, r0
 800899a:	b662      	cpsie	i
 800899c:	b661      	cpsie	f
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	df00      	svc	0
 80089a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80089aa:	bf00      	nop
 80089ac:	e000ed08 	.word	0xe000ed08

080089b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80089b6:	4b46      	ldr	r3, [pc, #280]	; (8008ad0 <xPortStartScheduler+0x120>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a46      	ldr	r2, [pc, #280]	; (8008ad4 <xPortStartScheduler+0x124>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d10a      	bne.n	80089d6 <xPortStartScheduler+0x26>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	613b      	str	r3, [r7, #16]
}
 80089d2:	bf00      	nop
 80089d4:	e7fe      	b.n	80089d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089d6:	4b3e      	ldr	r3, [pc, #248]	; (8008ad0 <xPortStartScheduler+0x120>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a3f      	ldr	r2, [pc, #252]	; (8008ad8 <xPortStartScheduler+0x128>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d10a      	bne.n	80089f6 <xPortStartScheduler+0x46>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	60fb      	str	r3, [r7, #12]
}
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089f6:	4b39      	ldr	r3, [pc, #228]	; (8008adc <xPortStartScheduler+0x12c>)
 80089f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	22ff      	movs	r2, #255	; 0xff
 8008a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a10:	78fb      	ldrb	r3, [r7, #3]
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	4b31      	ldr	r3, [pc, #196]	; (8008ae0 <xPortStartScheduler+0x130>)
 8008a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a1e:	4b31      	ldr	r3, [pc, #196]	; (8008ae4 <xPortStartScheduler+0x134>)
 8008a20:	2207      	movs	r2, #7
 8008a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a24:	e009      	b.n	8008a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008a26:	4b2f      	ldr	r3, [pc, #188]	; (8008ae4 <xPortStartScheduler+0x134>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	4a2d      	ldr	r2, [pc, #180]	; (8008ae4 <xPortStartScheduler+0x134>)
 8008a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a30:	78fb      	ldrb	r3, [r7, #3]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a3a:	78fb      	ldrb	r3, [r7, #3]
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a42:	2b80      	cmp	r3, #128	; 0x80
 8008a44:	d0ef      	beq.n	8008a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a46:	4b27      	ldr	r3, [pc, #156]	; (8008ae4 <xPortStartScheduler+0x134>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f1c3 0307 	rsb	r3, r3, #7
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d00a      	beq.n	8008a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	60bb      	str	r3, [r7, #8]
}
 8008a64:	bf00      	nop
 8008a66:	e7fe      	b.n	8008a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a68:	4b1e      	ldr	r3, [pc, #120]	; (8008ae4 <xPortStartScheduler+0x134>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	021b      	lsls	r3, r3, #8
 8008a6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ae4 <xPortStartScheduler+0x134>)
 8008a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a72:	4b1c      	ldr	r3, [pc, #112]	; (8008ae4 <xPortStartScheduler+0x134>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a7a:	4a1a      	ldr	r2, [pc, #104]	; (8008ae4 <xPortStartScheduler+0x134>)
 8008a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a86:	4b18      	ldr	r3, [pc, #96]	; (8008ae8 <xPortStartScheduler+0x138>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a17      	ldr	r2, [pc, #92]	; (8008ae8 <xPortStartScheduler+0x138>)
 8008a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a92:	4b15      	ldr	r3, [pc, #84]	; (8008ae8 <xPortStartScheduler+0x138>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a14      	ldr	r2, [pc, #80]	; (8008ae8 <xPortStartScheduler+0x138>)
 8008a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a9e:	f000 f8dd 	bl	8008c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008aa2:	4b12      	ldr	r3, [pc, #72]	; (8008aec <xPortStartScheduler+0x13c>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008aa8:	f000 f8fc 	bl	8008ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008aac:	4b10      	ldr	r3, [pc, #64]	; (8008af0 <xPortStartScheduler+0x140>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a0f      	ldr	r2, [pc, #60]	; (8008af0 <xPortStartScheduler+0x140>)
 8008ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ab8:	f7ff ff66 	bl	8008988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008abc:	f7ff f848 	bl	8007b50 <vTaskSwitchContext>
	prvTaskExitError();
 8008ac0:	f7ff ff1e 	bl	8008900 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3718      	adds	r7, #24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	e000ed00 	.word	0xe000ed00
 8008ad4:	410fc271 	.word	0x410fc271
 8008ad8:	410fc270 	.word	0x410fc270
 8008adc:	e000e400 	.word	0xe000e400
 8008ae0:	20001674 	.word	0x20001674
 8008ae4:	20001678 	.word	0x20001678
 8008ae8:	e000ed20 	.word	0xe000ed20
 8008aec:	2000015c 	.word	0x2000015c
 8008af0:	e000ef34 	.word	0xe000ef34

08008af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	607b      	str	r3, [r7, #4]
}
 8008b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b0e:	4b0f      	ldr	r3, [pc, #60]	; (8008b4c <vPortEnterCritical+0x58>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3301      	adds	r3, #1
 8008b14:	4a0d      	ldr	r2, [pc, #52]	; (8008b4c <vPortEnterCritical+0x58>)
 8008b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b18:	4b0c      	ldr	r3, [pc, #48]	; (8008b4c <vPortEnterCritical+0x58>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d10f      	bne.n	8008b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b20:	4b0b      	ldr	r3, [pc, #44]	; (8008b50 <vPortEnterCritical+0x5c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00a      	beq.n	8008b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	603b      	str	r3, [r7, #0]
}
 8008b3c:	bf00      	nop
 8008b3e:	e7fe      	b.n	8008b3e <vPortEnterCritical+0x4a>
	}
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	2000015c 	.word	0x2000015c
 8008b50:	e000ed04 	.word	0xe000ed04

08008b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b5a:	4b12      	ldr	r3, [pc, #72]	; (8008ba4 <vPortExitCritical+0x50>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10a      	bne.n	8008b78 <vPortExitCritical+0x24>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	607b      	str	r3, [r7, #4]
}
 8008b74:	bf00      	nop
 8008b76:	e7fe      	b.n	8008b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b78:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <vPortExitCritical+0x50>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	4a09      	ldr	r2, [pc, #36]	; (8008ba4 <vPortExitCritical+0x50>)
 8008b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b82:	4b08      	ldr	r3, [pc, #32]	; (8008ba4 <vPortExitCritical+0x50>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d105      	bne.n	8008b96 <vPortExitCritical+0x42>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	f383 8811 	msr	BASEPRI, r3
}
 8008b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	2000015c 	.word	0x2000015c
	...

08008bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008bb0:	f3ef 8009 	mrs	r0, PSP
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	4b15      	ldr	r3, [pc, #84]	; (8008c10 <pxCurrentTCBConst>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	f01e 0f10 	tst.w	lr, #16
 8008bc0:	bf08      	it	eq
 8008bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bca:	6010      	str	r0, [r2, #0]
 8008bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bd4:	f380 8811 	msr	BASEPRI, r0
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f7fe ffb6 	bl	8007b50 <vTaskSwitchContext>
 8008be4:	f04f 0000 	mov.w	r0, #0
 8008be8:	f380 8811 	msr	BASEPRI, r0
 8008bec:	bc09      	pop	{r0, r3}
 8008bee:	6819      	ldr	r1, [r3, #0]
 8008bf0:	6808      	ldr	r0, [r1, #0]
 8008bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf6:	f01e 0f10 	tst.w	lr, #16
 8008bfa:	bf08      	it	eq
 8008bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c00:	f380 8809 	msr	PSP, r0
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	f3af 8000 	nop.w

08008c10 <pxCurrentTCBConst>:
 8008c10:	20001048 	.word	0x20001048
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop

08008c18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	607b      	str	r3, [r7, #4]
}
 8008c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c32:	f7fe fed3 	bl	80079dc <xTaskIncrementTick>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c3c:	4b06      	ldr	r3, [pc, #24]	; (8008c58 <xPortSysTickHandler+0x40>)
 8008c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	2300      	movs	r3, #0
 8008c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	f383 8811 	msr	BASEPRI, r3
}
 8008c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c60:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <vPortSetupTimerInterrupt+0x34>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c66:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <vPortSetupTimerInterrupt+0x38>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c6c:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <vPortSetupTimerInterrupt+0x3c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a0a      	ldr	r2, [pc, #40]	; (8008c9c <vPortSetupTimerInterrupt+0x40>)
 8008c72:	fba2 2303 	umull	r2, r3, r2, r3
 8008c76:	099b      	lsrs	r3, r3, #6
 8008c78:	4a09      	ldr	r2, [pc, #36]	; (8008ca0 <vPortSetupTimerInterrupt+0x44>)
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c7e:	4b04      	ldr	r3, [pc, #16]	; (8008c90 <vPortSetupTimerInterrupt+0x34>)
 8008c80:	2207      	movs	r2, #7
 8008c82:	601a      	str	r2, [r3, #0]
}
 8008c84:	bf00      	nop
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	e000e010 	.word	0xe000e010
 8008c94:	e000e018 	.word	0xe000e018
 8008c98:	20000058 	.word	0x20000058
 8008c9c:	10624dd3 	.word	0x10624dd3
 8008ca0:	e000e014 	.word	0xe000e014

08008ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008cb4 <vPortEnableVFP+0x10>
 8008ca8:	6801      	ldr	r1, [r0, #0]
 8008caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cae:	6001      	str	r1, [r0, #0]
 8008cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008cb2:	bf00      	nop
 8008cb4:	e000ed88 	.word	0xe000ed88

08008cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cbe:	f3ef 8305 	mrs	r3, IPSR
 8008cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2b0f      	cmp	r3, #15
 8008cc8:	d914      	bls.n	8008cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cca:	4a17      	ldr	r2, [pc, #92]	; (8008d28 <vPortValidateInterruptPriority+0x70>)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cd4:	4b15      	ldr	r3, [pc, #84]	; (8008d2c <vPortValidateInterruptPriority+0x74>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	7afa      	ldrb	r2, [r7, #11]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d20a      	bcs.n	8008cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	607b      	str	r3, [r7, #4]
}
 8008cf0:	bf00      	nop
 8008cf2:	e7fe      	b.n	8008cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cf4:	4b0e      	ldr	r3, [pc, #56]	; (8008d30 <vPortValidateInterruptPriority+0x78>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008cfc:	4b0d      	ldr	r3, [pc, #52]	; (8008d34 <vPortValidateInterruptPriority+0x7c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d90a      	bls.n	8008d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	603b      	str	r3, [r7, #0]
}
 8008d16:	bf00      	nop
 8008d18:	e7fe      	b.n	8008d18 <vPortValidateInterruptPriority+0x60>
	}
 8008d1a:	bf00      	nop
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	e000e3f0 	.word	0xe000e3f0
 8008d2c:	20001674 	.word	0x20001674
 8008d30:	e000ed0c 	.word	0xe000ed0c
 8008d34:	20001678 	.word	0x20001678

08008d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08a      	sub	sp, #40	; 0x28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d40:	2300      	movs	r3, #0
 8008d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d44:	f7fe fd8e 	bl	8007864 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d48:	4b5b      	ldr	r3, [pc, #364]	; (8008eb8 <pvPortMalloc+0x180>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d50:	f000 f920 	bl	8008f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d54:	4b59      	ldr	r3, [pc, #356]	; (8008ebc <pvPortMalloc+0x184>)
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f040 8093 	bne.w	8008e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d01d      	beq.n	8008da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d68:	2208      	movs	r2, #8
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d014      	beq.n	8008da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f023 0307 	bic.w	r3, r3, #7
 8008d80:	3308      	adds	r3, #8
 8008d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f003 0307 	and.w	r3, r3, #7
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00a      	beq.n	8008da4 <pvPortMalloc+0x6c>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	617b      	str	r3, [r7, #20]
}
 8008da0:	bf00      	nop
 8008da2:	e7fe      	b.n	8008da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d06e      	beq.n	8008e88 <pvPortMalloc+0x150>
 8008daa:	4b45      	ldr	r3, [pc, #276]	; (8008ec0 <pvPortMalloc+0x188>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d869      	bhi.n	8008e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008db4:	4b43      	ldr	r3, [pc, #268]	; (8008ec4 <pvPortMalloc+0x18c>)
 8008db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008db8:	4b42      	ldr	r3, [pc, #264]	; (8008ec4 <pvPortMalloc+0x18c>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dbe:	e004      	b.n	8008dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d903      	bls.n	8008ddc <pvPortMalloc+0xa4>
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1f1      	bne.n	8008dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ddc:	4b36      	ldr	r3, [pc, #216]	; (8008eb8 <pvPortMalloc+0x180>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d050      	beq.n	8008e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2208      	movs	r2, #8
 8008dec:	4413      	add	r3, r2
 8008dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	1ad2      	subs	r2, r2, r3
 8008e00:	2308      	movs	r3, #8
 8008e02:	005b      	lsls	r3, r3, #1
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d91f      	bls.n	8008e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	f003 0307 	and.w	r3, r3, #7
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <pvPortMalloc+0xf8>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	613b      	str	r3, [r7, #16]
}
 8008e2c:	bf00      	nop
 8008e2e:	e7fe      	b.n	8008e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	1ad2      	subs	r2, r2, r3
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e42:	69b8      	ldr	r0, [r7, #24]
 8008e44:	f000 f908 	bl	8009058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e48:	4b1d      	ldr	r3, [pc, #116]	; (8008ec0 <pvPortMalloc+0x188>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	4a1b      	ldr	r2, [pc, #108]	; (8008ec0 <pvPortMalloc+0x188>)
 8008e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e56:	4b1a      	ldr	r3, [pc, #104]	; (8008ec0 <pvPortMalloc+0x188>)
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	4b1b      	ldr	r3, [pc, #108]	; (8008ec8 <pvPortMalloc+0x190>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d203      	bcs.n	8008e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e62:	4b17      	ldr	r3, [pc, #92]	; (8008ec0 <pvPortMalloc+0x188>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a18      	ldr	r2, [pc, #96]	; (8008ec8 <pvPortMalloc+0x190>)
 8008e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <pvPortMalloc+0x184>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	431a      	orrs	r2, r3
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e7e:	4b13      	ldr	r3, [pc, #76]	; (8008ecc <pvPortMalloc+0x194>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3301      	adds	r3, #1
 8008e84:	4a11      	ldr	r2, [pc, #68]	; (8008ecc <pvPortMalloc+0x194>)
 8008e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e88:	f7fe fcfa 	bl	8007880 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <pvPortMalloc+0x174>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	60fb      	str	r3, [r7, #12]
}
 8008ea8:	bf00      	nop
 8008eaa:	e7fe      	b.n	8008eaa <pvPortMalloc+0x172>
	return pvReturn;
 8008eac:	69fb      	ldr	r3, [r7, #28]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3728      	adds	r7, #40	; 0x28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20005284 	.word	0x20005284
 8008ebc:	20005298 	.word	0x20005298
 8008ec0:	20005288 	.word	0x20005288
 8008ec4:	2000527c 	.word	0x2000527c
 8008ec8:	2000528c 	.word	0x2000528c
 8008ecc:	20005290 	.word	0x20005290

08008ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d04d      	beq.n	8008f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ee2:	2308      	movs	r3, #8
 8008ee4:	425b      	negs	r3, r3
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	4413      	add	r3, r2
 8008eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	4b24      	ldr	r3, [pc, #144]	; (8008f88 <vPortFree+0xb8>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4013      	ands	r3, r2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10a      	bne.n	8008f14 <vPortFree+0x44>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	60fb      	str	r3, [r7, #12]
}
 8008f10:	bf00      	nop
 8008f12:	e7fe      	b.n	8008f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00a      	beq.n	8008f32 <vPortFree+0x62>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	60bb      	str	r3, [r7, #8]
}
 8008f2e:	bf00      	nop
 8008f30:	e7fe      	b.n	8008f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	4b14      	ldr	r3, [pc, #80]	; (8008f88 <vPortFree+0xb8>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d01e      	beq.n	8008f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d11a      	bne.n	8008f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	4b0e      	ldr	r3, [pc, #56]	; (8008f88 <vPortFree+0xb8>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	43db      	mvns	r3, r3
 8008f52:	401a      	ands	r2, r3
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f58:	f7fe fc84 	bl	8007864 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <vPortFree+0xbc>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4413      	add	r3, r2
 8008f66:	4a09      	ldr	r2, [pc, #36]	; (8008f8c <vPortFree+0xbc>)
 8008f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f6a:	6938      	ldr	r0, [r7, #16]
 8008f6c:	f000 f874 	bl	8009058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f70:	4b07      	ldr	r3, [pc, #28]	; (8008f90 <vPortFree+0xc0>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3301      	adds	r3, #1
 8008f76:	4a06      	ldr	r2, [pc, #24]	; (8008f90 <vPortFree+0xc0>)
 8008f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f7a:	f7fe fc81 	bl	8007880 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f7e:	bf00      	nop
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20005298 	.word	0x20005298
 8008f8c:	20005288 	.word	0x20005288
 8008f90:	20005294 	.word	0x20005294

08008f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fa0:	4b27      	ldr	r3, [pc, #156]	; (8009040 <prvHeapInit+0xac>)
 8008fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00c      	beq.n	8008fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3307      	adds	r3, #7
 8008fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f023 0307 	bic.w	r3, r3, #7
 8008fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	4a1f      	ldr	r2, [pc, #124]	; (8009040 <prvHeapInit+0xac>)
 8008fc4:	4413      	add	r3, r2
 8008fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fcc:	4a1d      	ldr	r2, [pc, #116]	; (8009044 <prvHeapInit+0xb0>)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fd2:	4b1c      	ldr	r3, [pc, #112]	; (8009044 <prvHeapInit+0xb0>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	4413      	add	r3, r2
 8008fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fe0:	2208      	movs	r2, #8
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	1a9b      	subs	r3, r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f023 0307 	bic.w	r3, r3, #7
 8008fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4a15      	ldr	r2, [pc, #84]	; (8009048 <prvHeapInit+0xb4>)
 8008ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ff6:	4b14      	ldr	r3, [pc, #80]	; (8009048 <prvHeapInit+0xb4>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ffe:	4b12      	ldr	r3, [pc, #72]	; (8009048 <prvHeapInit+0xb4>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	1ad2      	subs	r2, r2, r3
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009014:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <prvHeapInit+0xb4>)
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	4a0a      	ldr	r2, [pc, #40]	; (800904c <prvHeapInit+0xb8>)
 8009022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	4a09      	ldr	r2, [pc, #36]	; (8009050 <prvHeapInit+0xbc>)
 800902a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800902c:	4b09      	ldr	r3, [pc, #36]	; (8009054 <prvHeapInit+0xc0>)
 800902e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009032:	601a      	str	r2, [r3, #0]
}
 8009034:	bf00      	nop
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	2000167c 	.word	0x2000167c
 8009044:	2000527c 	.word	0x2000527c
 8009048:	20005284 	.word	0x20005284
 800904c:	2000528c 	.word	0x2000528c
 8009050:	20005288 	.word	0x20005288
 8009054:	20005298 	.word	0x20005298

08009058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009060:	4b28      	ldr	r3, [pc, #160]	; (8009104 <prvInsertBlockIntoFreeList+0xac>)
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	e002      	b.n	800906c <prvInsertBlockIntoFreeList+0x14>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	429a      	cmp	r2, r3
 8009074:	d8f7      	bhi.n	8009066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	4413      	add	r3, r2
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	429a      	cmp	r2, r3
 8009086:	d108      	bne.n	800909a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	441a      	add	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	441a      	add	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d118      	bne.n	80090e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	4b15      	ldr	r3, [pc, #84]	; (8009108 <prvInsertBlockIntoFreeList+0xb0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d00d      	beq.n	80090d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685a      	ldr	r2, [r3, #4]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	441a      	add	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	e008      	b.n	80090e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090d6:	4b0c      	ldr	r3, [pc, #48]	; (8009108 <prvInsertBlockIntoFreeList+0xb0>)
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	e003      	b.n	80090e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d002      	beq.n	80090f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090f6:	bf00      	nop
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	2000527c 	.word	0x2000527c
 8009108:	20005284 	.word	0x20005284

0800910c <__libc_init_array>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	4d0d      	ldr	r5, [pc, #52]	; (8009144 <__libc_init_array+0x38>)
 8009110:	4c0d      	ldr	r4, [pc, #52]	; (8009148 <__libc_init_array+0x3c>)
 8009112:	1b64      	subs	r4, r4, r5
 8009114:	10a4      	asrs	r4, r4, #2
 8009116:	2600      	movs	r6, #0
 8009118:	42a6      	cmp	r6, r4
 800911a:	d109      	bne.n	8009130 <__libc_init_array+0x24>
 800911c:	4d0b      	ldr	r5, [pc, #44]	; (800914c <__libc_init_array+0x40>)
 800911e:	4c0c      	ldr	r4, [pc, #48]	; (8009150 <__libc_init_array+0x44>)
 8009120:	f000 f8f2 	bl	8009308 <_init>
 8009124:	1b64      	subs	r4, r4, r5
 8009126:	10a4      	asrs	r4, r4, #2
 8009128:	2600      	movs	r6, #0
 800912a:	42a6      	cmp	r6, r4
 800912c:	d105      	bne.n	800913a <__libc_init_array+0x2e>
 800912e:	bd70      	pop	{r4, r5, r6, pc}
 8009130:	f855 3b04 	ldr.w	r3, [r5], #4
 8009134:	4798      	blx	r3
 8009136:	3601      	adds	r6, #1
 8009138:	e7ee      	b.n	8009118 <__libc_init_array+0xc>
 800913a:	f855 3b04 	ldr.w	r3, [r5], #4
 800913e:	4798      	blx	r3
 8009140:	3601      	adds	r6, #1
 8009142:	e7f2      	b.n	800912a <__libc_init_array+0x1e>
 8009144:	0800af64 	.word	0x0800af64
 8009148:	0800af64 	.word	0x0800af64
 800914c:	0800af64 	.word	0x0800af64
 8009150:	0800af68 	.word	0x0800af68

08009154 <__retarget_lock_acquire_recursive>:
 8009154:	4770      	bx	lr

08009156 <__retarget_lock_release_recursive>:
 8009156:	4770      	bx	lr

08009158 <memcpy>:
 8009158:	440a      	add	r2, r1
 800915a:	4291      	cmp	r1, r2
 800915c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009160:	d100      	bne.n	8009164 <memcpy+0xc>
 8009162:	4770      	bx	lr
 8009164:	b510      	push	{r4, lr}
 8009166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800916a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800916e:	4291      	cmp	r1, r2
 8009170:	d1f9      	bne.n	8009166 <memcpy+0xe>
 8009172:	bd10      	pop	{r4, pc}

08009174 <memset>:
 8009174:	4402      	add	r2, r0
 8009176:	4603      	mov	r3, r0
 8009178:	4293      	cmp	r3, r2
 800917a:	d100      	bne.n	800917e <memset+0xa>
 800917c:	4770      	bx	lr
 800917e:	f803 1b01 	strb.w	r1, [r3], #1
 8009182:	e7f9      	b.n	8009178 <memset+0x4>

08009184 <cleanup_glue>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	460c      	mov	r4, r1
 8009188:	6809      	ldr	r1, [r1, #0]
 800918a:	4605      	mov	r5, r0
 800918c:	b109      	cbz	r1, 8009192 <cleanup_glue+0xe>
 800918e:	f7ff fff9 	bl	8009184 <cleanup_glue>
 8009192:	4621      	mov	r1, r4
 8009194:	4628      	mov	r0, r5
 8009196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800919a:	f000 b869 	b.w	8009270 <_free_r>
	...

080091a0 <_reclaim_reent>:
 80091a0:	4b2c      	ldr	r3, [pc, #176]	; (8009254 <_reclaim_reent+0xb4>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4283      	cmp	r3, r0
 80091a6:	b570      	push	{r4, r5, r6, lr}
 80091a8:	4604      	mov	r4, r0
 80091aa:	d051      	beq.n	8009250 <_reclaim_reent+0xb0>
 80091ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80091ae:	b143      	cbz	r3, 80091c2 <_reclaim_reent+0x22>
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d14a      	bne.n	800924c <_reclaim_reent+0xac>
 80091b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091b8:	6819      	ldr	r1, [r3, #0]
 80091ba:	b111      	cbz	r1, 80091c2 <_reclaim_reent+0x22>
 80091bc:	4620      	mov	r0, r4
 80091be:	f000 f857 	bl	8009270 <_free_r>
 80091c2:	6961      	ldr	r1, [r4, #20]
 80091c4:	b111      	cbz	r1, 80091cc <_reclaim_reent+0x2c>
 80091c6:	4620      	mov	r0, r4
 80091c8:	f000 f852 	bl	8009270 <_free_r>
 80091cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80091ce:	b111      	cbz	r1, 80091d6 <_reclaim_reent+0x36>
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 f84d 	bl	8009270 <_free_r>
 80091d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80091d8:	b111      	cbz	r1, 80091e0 <_reclaim_reent+0x40>
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 f848 	bl	8009270 <_free_r>
 80091e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80091e2:	b111      	cbz	r1, 80091ea <_reclaim_reent+0x4a>
 80091e4:	4620      	mov	r0, r4
 80091e6:	f000 f843 	bl	8009270 <_free_r>
 80091ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80091ec:	b111      	cbz	r1, 80091f4 <_reclaim_reent+0x54>
 80091ee:	4620      	mov	r0, r4
 80091f0:	f000 f83e 	bl	8009270 <_free_r>
 80091f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80091f6:	b111      	cbz	r1, 80091fe <_reclaim_reent+0x5e>
 80091f8:	4620      	mov	r0, r4
 80091fa:	f000 f839 	bl	8009270 <_free_r>
 80091fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009200:	b111      	cbz	r1, 8009208 <_reclaim_reent+0x68>
 8009202:	4620      	mov	r0, r4
 8009204:	f000 f834 	bl	8009270 <_free_r>
 8009208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800920a:	b111      	cbz	r1, 8009212 <_reclaim_reent+0x72>
 800920c:	4620      	mov	r0, r4
 800920e:	f000 f82f 	bl	8009270 <_free_r>
 8009212:	69a3      	ldr	r3, [r4, #24]
 8009214:	b1e3      	cbz	r3, 8009250 <_reclaim_reent+0xb0>
 8009216:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009218:	4620      	mov	r0, r4
 800921a:	4798      	blx	r3
 800921c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800921e:	b1b9      	cbz	r1, 8009250 <_reclaim_reent+0xb0>
 8009220:	4620      	mov	r0, r4
 8009222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009226:	f7ff bfad 	b.w	8009184 <cleanup_glue>
 800922a:	5949      	ldr	r1, [r1, r5]
 800922c:	b941      	cbnz	r1, 8009240 <_reclaim_reent+0xa0>
 800922e:	3504      	adds	r5, #4
 8009230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009232:	2d80      	cmp	r5, #128	; 0x80
 8009234:	68d9      	ldr	r1, [r3, #12]
 8009236:	d1f8      	bne.n	800922a <_reclaim_reent+0x8a>
 8009238:	4620      	mov	r0, r4
 800923a:	f000 f819 	bl	8009270 <_free_r>
 800923e:	e7ba      	b.n	80091b6 <_reclaim_reent+0x16>
 8009240:	680e      	ldr	r6, [r1, #0]
 8009242:	4620      	mov	r0, r4
 8009244:	f000 f814 	bl	8009270 <_free_r>
 8009248:	4631      	mov	r1, r6
 800924a:	e7ef      	b.n	800922c <_reclaim_reent+0x8c>
 800924c:	2500      	movs	r5, #0
 800924e:	e7ef      	b.n	8009230 <_reclaim_reent+0x90>
 8009250:	bd70      	pop	{r4, r5, r6, pc}
 8009252:	bf00      	nop
 8009254:	20000160 	.word	0x20000160

08009258 <__malloc_lock>:
 8009258:	4801      	ldr	r0, [pc, #4]	; (8009260 <__malloc_lock+0x8>)
 800925a:	f7ff bf7b 	b.w	8009154 <__retarget_lock_acquire_recursive>
 800925e:	bf00      	nop
 8009260:	2000529c 	.word	0x2000529c

08009264 <__malloc_unlock>:
 8009264:	4801      	ldr	r0, [pc, #4]	; (800926c <__malloc_unlock+0x8>)
 8009266:	f7ff bf76 	b.w	8009156 <__retarget_lock_release_recursive>
 800926a:	bf00      	nop
 800926c:	2000529c 	.word	0x2000529c

08009270 <_free_r>:
 8009270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009272:	2900      	cmp	r1, #0
 8009274:	d044      	beq.n	8009300 <_free_r+0x90>
 8009276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800927a:	9001      	str	r0, [sp, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f1a1 0404 	sub.w	r4, r1, #4
 8009282:	bfb8      	it	lt
 8009284:	18e4      	addlt	r4, r4, r3
 8009286:	f7ff ffe7 	bl	8009258 <__malloc_lock>
 800928a:	4a1e      	ldr	r2, [pc, #120]	; (8009304 <_free_r+0x94>)
 800928c:	9801      	ldr	r0, [sp, #4]
 800928e:	6813      	ldr	r3, [r2, #0]
 8009290:	b933      	cbnz	r3, 80092a0 <_free_r+0x30>
 8009292:	6063      	str	r3, [r4, #4]
 8009294:	6014      	str	r4, [r2, #0]
 8009296:	b003      	add	sp, #12
 8009298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800929c:	f7ff bfe2 	b.w	8009264 <__malloc_unlock>
 80092a0:	42a3      	cmp	r3, r4
 80092a2:	d908      	bls.n	80092b6 <_free_r+0x46>
 80092a4:	6825      	ldr	r5, [r4, #0]
 80092a6:	1961      	adds	r1, r4, r5
 80092a8:	428b      	cmp	r3, r1
 80092aa:	bf01      	itttt	eq
 80092ac:	6819      	ldreq	r1, [r3, #0]
 80092ae:	685b      	ldreq	r3, [r3, #4]
 80092b0:	1949      	addeq	r1, r1, r5
 80092b2:	6021      	streq	r1, [r4, #0]
 80092b4:	e7ed      	b.n	8009292 <_free_r+0x22>
 80092b6:	461a      	mov	r2, r3
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	b10b      	cbz	r3, 80092c0 <_free_r+0x50>
 80092bc:	42a3      	cmp	r3, r4
 80092be:	d9fa      	bls.n	80092b6 <_free_r+0x46>
 80092c0:	6811      	ldr	r1, [r2, #0]
 80092c2:	1855      	adds	r5, r2, r1
 80092c4:	42a5      	cmp	r5, r4
 80092c6:	d10b      	bne.n	80092e0 <_free_r+0x70>
 80092c8:	6824      	ldr	r4, [r4, #0]
 80092ca:	4421      	add	r1, r4
 80092cc:	1854      	adds	r4, r2, r1
 80092ce:	42a3      	cmp	r3, r4
 80092d0:	6011      	str	r1, [r2, #0]
 80092d2:	d1e0      	bne.n	8009296 <_free_r+0x26>
 80092d4:	681c      	ldr	r4, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	6053      	str	r3, [r2, #4]
 80092da:	4421      	add	r1, r4
 80092dc:	6011      	str	r1, [r2, #0]
 80092de:	e7da      	b.n	8009296 <_free_r+0x26>
 80092e0:	d902      	bls.n	80092e8 <_free_r+0x78>
 80092e2:	230c      	movs	r3, #12
 80092e4:	6003      	str	r3, [r0, #0]
 80092e6:	e7d6      	b.n	8009296 <_free_r+0x26>
 80092e8:	6825      	ldr	r5, [r4, #0]
 80092ea:	1961      	adds	r1, r4, r5
 80092ec:	428b      	cmp	r3, r1
 80092ee:	bf04      	itt	eq
 80092f0:	6819      	ldreq	r1, [r3, #0]
 80092f2:	685b      	ldreq	r3, [r3, #4]
 80092f4:	6063      	str	r3, [r4, #4]
 80092f6:	bf04      	itt	eq
 80092f8:	1949      	addeq	r1, r1, r5
 80092fa:	6021      	streq	r1, [r4, #0]
 80092fc:	6054      	str	r4, [r2, #4]
 80092fe:	e7ca      	b.n	8009296 <_free_r+0x26>
 8009300:	b003      	add	sp, #12
 8009302:	bd30      	pop	{r4, r5, pc}
 8009304:	200052a0 	.word	0x200052a0

08009308 <_init>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	bf00      	nop
 800930c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930e:	bc08      	pop	{r3}
 8009310:	469e      	mov	lr, r3
 8009312:	4770      	bx	lr

08009314 <_fini>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	bf00      	nop
 8009318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931a:	bc08      	pop	{r3}
 800931c:	469e      	mov	lr, r3
 800931e:	4770      	bx	lr
