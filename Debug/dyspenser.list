
dyspenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d24  08005d24  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d2c  08005d2c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d30  08005d30  00015d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b7c  20000078  08005dac  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bf4  08005dac  00024bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018408  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003076  00000000  00000000  000384b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0003b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  0003c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003576  00000000  00000000  0003dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fd9  00000000  00000000  000412ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097737  00000000  00000000  00057287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee9be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ad0  00000000  00000000  000eea10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005bb8 	.word	0x08005bb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005bb8 	.word	0x08005bb8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <delay>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//KROKOWIEC
void delay (uint16_t us)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <delay+0x30>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2200      	movs	r2, #0
 80004f4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < us);
 80004f6:	bf00      	nop
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <delay+0x30>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	429a      	cmp	r2, r3
 8000502:	d3f9      	bcc.n	80004f8 <delay+0x14>
}
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	200000e8 	.word	0x200000e8

08000518 <stepper_set_rpm>:

#define stepsperrev 4096

void stepper_set_rpm (int rpm)  // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	delay(60000000/stepsperrev/rpm);
 8000520:	f643 1238 	movw	r2, #14648	; 0x3938
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fb92 f3f3 	sdiv	r3, r2, r3
 800052a:	b29b      	uxth	r3, r3
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ffd9 	bl	80004e4 <delay>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <stepper_half_drive>:

void stepper_half_drive (int step)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	switch (step){
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b07      	cmp	r3, #7
 8000548:	f200 80bc 	bhi.w	80006c4 <stepper_half_drive+0x188>
 800054c:	a201      	add	r2, pc, #4	; (adr r2, 8000554 <stepper_half_drive+0x18>)
 800054e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000552:	bf00      	nop
 8000554:	08000575 	.word	0x08000575
 8000558:	0800059f 	.word	0x0800059f
 800055c:	080005c9 	.word	0x080005c9
 8000560:	080005f3 	.word	0x080005f3
 8000564:	0800061d 	.word	0x0800061d
 8000568:	08000647 	.word	0x08000647
 800056c:	08000671 	.word	0x08000671
 8000570:	0800069b 	.word	0x0800069b
		case 0:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN1
 8000574:	2201      	movs	r2, #1
 8000576:	2102      	movs	r1, #2
 8000578:	4854      	ldr	r0, [pc, #336]	; (80006cc <stepper_half_drive+0x190>)
 800057a:	f001 f85f 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 800057e:	2200      	movs	r2, #0
 8000580:	2104      	movs	r1, #4
 8000582:	4852      	ldr	r0, [pc, #328]	; (80006cc <stepper_half_drive+0x190>)
 8000584:	f001 f85a 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 8000588:	2200      	movs	r2, #0
 800058a:	2108      	movs	r1, #8
 800058c:	484f      	ldr	r0, [pc, #316]	; (80006cc <stepper_half_drive+0x190>)
 800058e:	f001 f855 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 8000592:	2200      	movs	r2, #0
 8000594:	2110      	movs	r1, #16
 8000596:	484d      	ldr	r0, [pc, #308]	; (80006cc <stepper_half_drive+0x190>)
 8000598:	f001 f850 	bl	800163c <HAL_GPIO_WritePin>
			  break;
 800059c:	e092      	b.n	80006c4 <stepper_half_drive+0x188>

		case 1:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN1
 800059e:	2201      	movs	r2, #1
 80005a0:	2102      	movs	r1, #2
 80005a2:	484a      	ldr	r0, [pc, #296]	; (80006cc <stepper_half_drive+0x190>)
 80005a4:	f001 f84a 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN2
 80005a8:	2201      	movs	r2, #1
 80005aa:	2104      	movs	r1, #4
 80005ac:	4847      	ldr	r0, [pc, #284]	; (80006cc <stepper_half_drive+0x190>)
 80005ae:	f001 f845 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 80005b2:	2200      	movs	r2, #0
 80005b4:	2108      	movs	r1, #8
 80005b6:	4845      	ldr	r0, [pc, #276]	; (80006cc <stepper_half_drive+0x190>)
 80005b8:	f001 f840 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 80005bc:	2200      	movs	r2, #0
 80005be:	2110      	movs	r1, #16
 80005c0:	4842      	ldr	r0, [pc, #264]	; (80006cc <stepper_half_drive+0x190>)
 80005c2:	f001 f83b 	bl	800163c <HAL_GPIO_WritePin>
			  break;
 80005c6:	e07d      	b.n	80006c4 <stepper_half_drive+0x188>

		case 2:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 80005c8:	2200      	movs	r2, #0
 80005ca:	2102      	movs	r1, #2
 80005cc:	483f      	ldr	r0, [pc, #252]	; (80006cc <stepper_half_drive+0x190>)
 80005ce:	f001 f835 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN2
 80005d2:	2201      	movs	r2, #1
 80005d4:	2104      	movs	r1, #4
 80005d6:	483d      	ldr	r0, [pc, #244]	; (80006cc <stepper_half_drive+0x190>)
 80005d8:	f001 f830 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 80005dc:	2200      	movs	r2, #0
 80005de:	2108      	movs	r1, #8
 80005e0:	483a      	ldr	r0, [pc, #232]	; (80006cc <stepper_half_drive+0x190>)
 80005e2:	f001 f82b 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 80005e6:	2200      	movs	r2, #0
 80005e8:	2110      	movs	r1, #16
 80005ea:	4838      	ldr	r0, [pc, #224]	; (80006cc <stepper_half_drive+0x190>)
 80005ec:	f001 f826 	bl	800163c <HAL_GPIO_WritePin>
			  break;
 80005f0:	e068      	b.n	80006c4 <stepper_half_drive+0x188>

		case 3:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 80005f2:	2200      	movs	r2, #0
 80005f4:	2102      	movs	r1, #2
 80005f6:	4835      	ldr	r0, [pc, #212]	; (80006cc <stepper_half_drive+0x190>)
 80005f8:	f001 f820 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN2
 80005fc:	2201      	movs	r2, #1
 80005fe:	2104      	movs	r1, #4
 8000600:	4832      	ldr	r0, [pc, #200]	; (80006cc <stepper_half_drive+0x190>)
 8000602:	f001 f81b 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 8000606:	2201      	movs	r2, #1
 8000608:	2108      	movs	r1, #8
 800060a:	4830      	ldr	r0, [pc, #192]	; (80006cc <stepper_half_drive+0x190>)
 800060c:	f001 f816 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 8000610:	2200      	movs	r2, #0
 8000612:	2110      	movs	r1, #16
 8000614:	482d      	ldr	r0, [pc, #180]	; (80006cc <stepper_half_drive+0x190>)
 8000616:	f001 f811 	bl	800163c <HAL_GPIO_WritePin>
			  break;
 800061a:	e053      	b.n	80006c4 <stepper_half_drive+0x188>

		case 4:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	482a      	ldr	r0, [pc, #168]	; (80006cc <stepper_half_drive+0x190>)
 8000622:	f001 f80b 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 8000626:	2200      	movs	r2, #0
 8000628:	2104      	movs	r1, #4
 800062a:	4828      	ldr	r0, [pc, #160]	; (80006cc <stepper_half_drive+0x190>)
 800062c:	f001 f806 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 8000630:	2201      	movs	r2, #1
 8000632:	2108      	movs	r1, #8
 8000634:	4825      	ldr	r0, [pc, #148]	; (80006cc <stepper_half_drive+0x190>)
 8000636:	f001 f801 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN4
 800063a:	2200      	movs	r2, #0
 800063c:	2110      	movs	r1, #16
 800063e:	4823      	ldr	r0, [pc, #140]	; (80006cc <stepper_half_drive+0x190>)
 8000640:	f000 fffc 	bl	800163c <HAL_GPIO_WritePin>
			  break;
 8000644:	e03e      	b.n	80006c4 <stepper_half_drive+0x188>

		case 5:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 8000646:	2200      	movs	r2, #0
 8000648:	2102      	movs	r1, #2
 800064a:	4820      	ldr	r0, [pc, #128]	; (80006cc <stepper_half_drive+0x190>)
 800064c:	f000 fff6 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 8000650:	2200      	movs	r2, #0
 8000652:	2104      	movs	r1, #4
 8000654:	481d      	ldr	r0, [pc, #116]	; (80006cc <stepper_half_drive+0x190>)
 8000656:	f000 fff1 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 800065a:	2201      	movs	r2, #1
 800065c:	2108      	movs	r1, #8
 800065e:	481b      	ldr	r0, [pc, #108]	; (80006cc <stepper_half_drive+0x190>)
 8000660:	f000 ffec 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 8000664:	2201      	movs	r2, #1
 8000666:	2110      	movs	r1, #16
 8000668:	4818      	ldr	r0, [pc, #96]	; (80006cc <stepper_half_drive+0x190>)
 800066a:	f000 ffe7 	bl	800163c <HAL_GPIO_WritePin>
			  break;
 800066e:	e029      	b.n	80006c4 <stepper_half_drive+0x188>

		case 6:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1
 8000670:	2200      	movs	r2, #0
 8000672:	2102      	movs	r1, #2
 8000674:	4815      	ldr	r0, [pc, #84]	; (80006cc <stepper_half_drive+0x190>)
 8000676:	f000 ffe1 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 800067a:	2200      	movs	r2, #0
 800067c:	2104      	movs	r1, #4
 800067e:	4813      	ldr	r0, [pc, #76]	; (80006cc <stepper_half_drive+0x190>)
 8000680:	f000 ffdc 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 8000684:	2200      	movs	r2, #0
 8000686:	2108      	movs	r1, #8
 8000688:	4810      	ldr	r0, [pc, #64]	; (80006cc <stepper_half_drive+0x190>)
 800068a:	f000 ffd7 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 800068e:	2201      	movs	r2, #1
 8000690:	2110      	movs	r1, #16
 8000692:	480e      	ldr	r0, [pc, #56]	; (80006cc <stepper_half_drive+0x190>)
 8000694:	f000 ffd2 	bl	800163c <HAL_GPIO_WritePin>
			  break;
 8000698:	e014      	b.n	80006c4 <stepper_half_drive+0x188>

		case 7:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN1
 800069a:	2201      	movs	r2, #1
 800069c:	2102      	movs	r1, #2
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <stepper_half_drive+0x190>)
 80006a0:	f000 ffcc 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2
 80006a4:	2200      	movs	r2, #0
 80006a6:	2104      	movs	r1, #4
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <stepper_half_drive+0x190>)
 80006aa:	f000 ffc7 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 80006ae:	2200      	movs	r2, #0
 80006b0:	2108      	movs	r1, #8
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <stepper_half_drive+0x190>)
 80006b4:	f000 ffc2 	bl	800163c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // IN4
 80006b8:	2201      	movs	r2, #1
 80006ba:	2110      	movs	r1, #16
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <stepper_half_drive+0x190>)
 80006be:	f000 ffbd 	bl	800163c <HAL_GPIO_WritePin>
			  break;
 80006c2:	bf00      	nop
		}
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40020000 	.word	0x40020000

080006d0 <stepper_step_angle>:

void stepper_step_angle (float angle, int rpm)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80006da:	6038      	str	r0, [r7, #0]
	float anglepersequence = 0.703125;  // 360 = 512 sequences
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <stepper_step_angle+0x64>)
 80006de:	60fb      	str	r3, [r7, #12]
	int numberofsequences = (int) (angle/anglepersequence);
 80006e0:	edd7 6a01 	vldr	s13, [r7, #4]
 80006e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80006e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006f0:	ee17 3a90 	vmov	r3, s15
 80006f4:	60bb      	str	r3, [r7, #8]

	for (int seq=0; seq<numberofsequences; seq++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	e011      	b.n	8000720 <stepper_step_angle+0x50>
	{
			for (int step=7; step>=0; step--)
 80006fc:	2307      	movs	r3, #7
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	e008      	b.n	8000714 <stepper_step_angle+0x44>
			{
				stepper_half_drive(step);
 8000702:	6938      	ldr	r0, [r7, #16]
 8000704:	f7ff ff1a 	bl	800053c <stepper_half_drive>
				stepper_set_rpm(rpm);
 8000708:	6838      	ldr	r0, [r7, #0]
 800070a:	f7ff ff05 	bl	8000518 <stepper_set_rpm>
			for (int step=7; step>=0; step--)
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	3b01      	subs	r3, #1
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	2b00      	cmp	r3, #0
 8000718:	daf3      	bge.n	8000702 <stepper_step_angle+0x32>
	for (int seq=0; seq<numberofsequences; seq++)
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	3301      	adds	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	429a      	cmp	r2, r3
 8000726:	dbe9      	blt.n	80006fc <stepper_step_angle+0x2c>
			}
	}
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	3f340000 	.word	0x3f340000

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fcbe 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f850 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f000 f986 	bl	8000a54 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000748:	f000 f8e4 	bl	8000914 <MX_TIM2_Init>
  MX_TIM3_Init();
 800074c:	f000 f92e 	bl	80009ac <MX_TIM3_Init>
  MX_I2C1_Init();
 8000750:	f000 f8b2 	bl	80008b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000754:	4815      	ldr	r0, [pc, #84]	; (80007ac <main+0x74>)
 8000756:	f001 fda9 	bl	80022ac <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800075a:	213c      	movs	r1, #60	; 0x3c
 800075c:	4814      	ldr	r0, [pc, #80]	; (80007b0 <main+0x78>)
 800075e:	f001 ff07 	bl	8002570 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000762:	f002 fbb1 	bl	8002ec8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 8000766:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <main+0x7c>)
 8000768:	2100      	movs	r1, #0
 800076a:	4813      	ldr	r0, [pc, #76]	; (80007b8 <main+0x80>)
 800076c:	f002 fbf6 	bl	8002f5c <osThreadNew>
 8000770:	4603      	mov	r3, r0
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <main+0x84>)
 8000774:	6013      	str	r3, [r2, #0]

  /* creation of debouncingTask */
  debouncingTaskHandle = osThreadNew(StartDebouncingTask, NULL, &debouncingTask_attributes);
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <main+0x88>)
 8000778:	2100      	movs	r1, #0
 800077a:	4812      	ldr	r0, [pc, #72]	; (80007c4 <main+0x8c>)
 800077c:	f002 fbee 	bl	8002f5c <osThreadNew>
 8000780:	4603      	mov	r3, r0
 8000782:	4a11      	ldr	r2, [pc, #68]	; (80007c8 <main+0x90>)
 8000784:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8000786:	4a11      	ldr	r2, [pc, #68]	; (80007cc <main+0x94>)
 8000788:	2100      	movs	r1, #0
 800078a:	4811      	ldr	r0, [pc, #68]	; (80007d0 <main+0x98>)
 800078c:	f002 fbe6 	bl	8002f5c <osThreadNew>
 8000790:	4603      	mov	r3, r0
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <main+0x9c>)
 8000794:	6013      	str	r3, [r2, #0]

  /* creation of pumpTask */
  pumpTaskHandle = osThreadNew(StartPumpTask, NULL, &pumpTask_attributes);
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <main+0xa0>)
 8000798:	2100      	movs	r1, #0
 800079a:	4810      	ldr	r0, [pc, #64]	; (80007dc <main+0xa4>)
 800079c:	f002 fbde 	bl	8002f5c <osThreadNew>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <main+0xa8>)
 80007a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007a6:	f002 fbb3 	bl	8002f10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <main+0x72>
 80007ac:	200000e8 	.word	0x200000e8
 80007b0:	20000130 	.word	0x20000130
 80007b4:	08005c1c 	.word	0x08005c1c
 80007b8:	08000b59 	.word	0x08000b59
 80007bc:	20000178 	.word	0x20000178
 80007c0:	08005c40 	.word	0x08005c40
 80007c4:	08000c39 	.word	0x08000c39
 80007c8:	2000017c 	.word	0x2000017c
 80007cc:	08005c64 	.word	0x08005c64
 80007d0:	08000c89 	.word	0x08000c89
 80007d4:	20000180 	.word	0x20000180
 80007d8:	08005c88 	.word	0x08005c88
 80007dc:	08000d05 	.word	0x08000d05
 80007e0:	20000184 	.word	0x20000184

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	; 0x50
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	2230      	movs	r2, #48	; 0x30
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f005 f916 	bl	8005a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <SystemClock_Config+0xcc>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a27      	ldr	r2, [pc, #156]	; (80008b0 <SystemClock_Config+0xcc>)
 8000812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <SystemClock_Config+0xcc>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <SystemClock_Config+0xd0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000830:	4a20      	ldr	r2, [pc, #128]	; (80008b4 <SystemClock_Config+0xd0>)
 8000832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <SystemClock_Config+0xd0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	2301      	movs	r3, #1
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084c:	2310      	movs	r3, #16
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000850:	2302      	movs	r3, #2
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000854:	2300      	movs	r3, #0
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000858:	2308      	movs	r3, #8
 800085a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800085c:	2348      	movs	r3, #72	; 0x48
 800085e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000864:	2304      	movs	r3, #4
 8000866:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	4618      	mov	r0, r3
 800086e:	f001 f843 	bl	80018f8 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000878:	f000 fa5e 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	230f      	movs	r3, #15
 800087e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2302      	movs	r3, #2
 8000882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	2102      	movs	r1, #2
 8000898:	4618      	mov	r0, r3
 800089a:	f001 faa5 	bl	8001de8 <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008a4:	f000 fa48 	bl	8000d38 <Error_Handler>
  }
}
 80008a8:	bf00      	nop
 80008aa:	3750      	adds	r7, #80	; 0x50
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40007000 	.word	0x40007000

080008b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_I2C1_Init+0x50>)
 80008be:	4a13      	ldr	r2, [pc, #76]	; (800090c <MX_I2C1_Init+0x54>)
 80008c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_I2C1_Init+0x50>)
 80008c4:	4a12      	ldr	r2, [pc, #72]	; (8000910 <MX_I2C1_Init+0x58>)
 80008c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_I2C1_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_I2C1_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_I2C1_Init+0x50>)
 80008d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_I2C1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_I2C1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MX_I2C1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_I2C1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_I2C1_Init+0x50>)
 80008f6:	f000 febb 	bl	8001670 <HAL_I2C_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000900:	f000 fa1a 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000094 	.word	0x20000094
 800090c:	40005400 	.word	0x40005400
 8000910:	000186a0 	.word	0x000186a0

08000914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000936:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_TIM2_Init+0x94>)
 800093a:	2247      	movs	r2, #71	; 0x47
 800093c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800094a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_TIM2_Init+0x94>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000958:	4813      	ldr	r0, [pc, #76]	; (80009a8 <MX_TIM2_Init+0x94>)
 800095a:	f001 fc57 	bl	800220c <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000964:	f000 f9e8 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	4619      	mov	r1, r3
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000976:	f001 ffb1 	bl	80028dc <HAL_TIM_ConfigClockSource>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000980:	f000 f9da 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000992:	f002 f9d3 	bl	8002d3c <HAL_TIMEx_MasterConfigSynchronization>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800099c:	f000 f9cc 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000e8 	.word	0x200000e8

080009ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	; 0x30
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2224      	movs	r2, #36	; 0x24
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f005 f832 	bl	8005a24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_TIM3_Init+0xa0>)
 80009ca:	4a21      	ldr	r2, [pc, #132]	; (8000a50 <MX_TIM3_Init+0xa4>)
 80009cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_TIM3_Init+0xa0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_TIM3_Init+0xa0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_TIM3_Init+0xa0>)
 80009dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80009e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_TIM3_Init+0xa0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_TIM3_Init+0xa0>)
 80009ea:	2280      	movs	r2, #128	; 0x80
 80009ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009ee:	2303      	movs	r3, #3
 80009f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80009f2:	2302      	movs	r3, #2
 80009f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80009fe:	230a      	movs	r3, #10
 8000a00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000a02:	2302      	movs	r3, #2
 8000a04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a06:	2301      	movs	r3, #1
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_TIM3_Init+0xa0>)
 8000a1a:	f001 fd03 	bl	8002424 <HAL_TIM_Encoder_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a24:	f000 f988 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_TIM3_Init+0xa0>)
 8000a36:	f002 f981 	bl	8002d3c <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a40:	f000 f97a 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3730      	adds	r7, #48	; 0x30
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000130 	.word	0x20000130
 8000a50:	40000400 	.word	0x40000400

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b37      	ldr	r3, [pc, #220]	; (8000b4c <MX_GPIO_Init+0xf8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a36      	ldr	r2, [pc, #216]	; (8000b4c <MX_GPIO_Init+0xf8>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <MX_GPIO_Init+0xf8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b30      	ldr	r3, [pc, #192]	; (8000b4c <MX_GPIO_Init+0xf8>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a2f      	ldr	r2, [pc, #188]	; (8000b4c <MX_GPIO_Init+0xf8>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <MX_GPIO_Init+0xf8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <MX_GPIO_Init+0xf8>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <MX_GPIO_Init+0xf8>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <MX_GPIO_Init+0xf8>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <MX_GPIO_Init+0xf8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <MX_GPIO_Init+0xf8>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <MX_GPIO_Init+0xf8>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae0:	481b      	ldr	r0, [pc, #108]	; (8000b50 <MX_GPIO_Init+0xfc>)
 8000ae2:	f000 fdab 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	211e      	movs	r1, #30
 8000aea:	481a      	ldr	r0, [pc, #104]	; (8000b54 <MX_GPIO_Init+0x100>)
 8000aec:	f000 fda6 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <MX_GPIO_Init+0xfc>)
 8000b0a:	f000 fbfb 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_Pin PA5 */
  GPIO_InitStruct.Pin = KEY_Pin|GPIO_PIN_5;
 8000b0e:	2321      	movs	r3, #33	; 0x21
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <MX_GPIO_Init+0x100>)
 8000b22:	f000 fbef 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000b26:	231e      	movs	r3, #30
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_GPIO_Init+0x100>)
 8000b3e:	f000 fbe1 	bl	8001304 <HAL_GPIO_Init>

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40020000 	.word	0x40020000

08000b58 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  //przycisk musi byc wcisniety
	  //casy podzielone na mniejsze zadania tj. docelowo nalanie kielona, obrot o 60 stopni i dekrementacje howMany

	if(press == 1)
 8000b60:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <StartMainTask+0xc8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d155      	bne.n	8000c14 <StartMainTask+0xbc>
	{
		switch (howMany)
 8000b68:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <StartMainTask+0xcc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b06      	cmp	r3, #6
 8000b6e:	d852      	bhi.n	8000c16 <StartMainTask+0xbe>
 8000b70:	a201      	add	r2, pc, #4	; (adr r2, 8000b78 <StartMainTask+0x20>)
 8000b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b76:	bf00      	nop
 8000b78:	08000b95 	.word	0x08000b95
 8000b7c:	08000b9d 	.word	0x08000b9d
 8000b80:	08000bb1 	.word	0x08000bb1
 8000b84:	08000bc5 	.word	0x08000bc5
 8000b88:	08000bd9 	.word	0x08000bd9
 8000b8c:	08000bed 	.word	0x08000bed
 8000b90:	08000c01 	.word	0x08000c01
		{
			case 0:
				press = 0;
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <StartMainTask+0xc8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
			break;
 8000b9a:	e03c      	b.n	8000c16 <StartMainTask+0xbe>

			case 1:
				stepper_step_angle(45, 14);
 8000b9c:	200e      	movs	r0, #14
 8000b9e:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8000c28 <StartMainTask+0xd0>
 8000ba2:	f7ff fd95 	bl	80006d0 <stepper_step_angle>
				__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <StartMainTask+0xd4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8000bae:	e032      	b.n	8000c16 <StartMainTask+0xbe>

			case 2:
				stepper_step_angle(45, 14);
 8000bb0:	200e      	movs	r0, #14
 8000bb2:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8000c28 <StartMainTask+0xd0>
 8000bb6:	f7ff fd8b 	bl	80006d0 <stepper_step_angle>
				__HAL_TIM_SET_COUNTER(&htim3, 4);
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <StartMainTask+0xd4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8000bc2:	e028      	b.n	8000c16 <StartMainTask+0xbe>

			case 3:
				stepper_step_angle(45, 14);
 8000bc4:	200e      	movs	r0, #14
 8000bc6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8000c28 <StartMainTask+0xd0>
 8000bca:	f7ff fd81 	bl	80006d0 <stepper_step_angle>
				__HAL_TIM_SET_COUNTER(&htim3, 8);
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <StartMainTask+0xd4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8000bd6:	e01e      	b.n	8000c16 <StartMainTask+0xbe>

			case 4:
				stepper_step_angle(45, 14);
 8000bd8:	200e      	movs	r0, #14
 8000bda:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8000c28 <StartMainTask+0xd0>
 8000bde:	f7ff fd77 	bl	80006d0 <stepper_step_angle>
				__HAL_TIM_SET_COUNTER(&htim3, 12);
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <StartMainTask+0xd4>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	220c      	movs	r2, #12
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8000bea:	e014      	b.n	8000c16 <StartMainTask+0xbe>

			case 5:
				//nalanie kielona
				stepper_step_angle(180, 14);
 8000bec:	200e      	movs	r0, #14
 8000bee:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8000c30 <StartMainTask+0xd8>
 8000bf2:	f7ff fd6d 	bl	80006d0 <stepper_step_angle>
				__HAL_TIM_SET_COUNTER(&htim3, 16);
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <StartMainTask+0xd4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8000bfe:	e00a      	b.n	8000c16 <StartMainTask+0xbe>

			case 6:
				//nalanie kielona
				stepper_step_angle(120, 14);
 8000c00:	200e      	movs	r0, #14
 8000c02:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000c34 <StartMainTask+0xdc>
 8000c06:	f7ff fd63 	bl	80006d0 <stepper_step_angle>
				__HAL_TIM_SET_COUNTER(&htim3, 20);
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <StartMainTask+0xd4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2214      	movs	r2, #20
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8000c12:	e000      	b.n	8000c16 <StartMainTask+0xbe>
		}
	}
 8000c14:	bf00      	nop

    osDelay(100 / portTICK_PERIOD_MS);
 8000c16:	2064      	movs	r0, #100	; 0x64
 8000c18:	f002 fa32 	bl	8003080 <osDelay>
	if(press == 1)
 8000c1c:	e7a0      	b.n	8000b60 <StartMainTask+0x8>
 8000c1e:	bf00      	nop
 8000c20:	20000000 	.word	0x20000000
 8000c24:	2000018c 	.word	0x2000018c
 8000c28:	42340000 	.word	0x42340000
 8000c2c:	20000130 	.word	0x20000130
 8000c30:	43340000 	.word	0x43340000
 8000c34:	42f00000 	.word	0x42f00000

08000c38 <StartDebouncingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebouncingTask */
void StartDebouncingTask(void *argument)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebouncingTask */

	/* Infinite loop */
	for (;;)
	{
		if(key_state == 1)
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <StartDebouncingTask+0x44>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d10a      	bne.n	8000c5e <StartDebouncingTask+0x26>
		{
			if(press == 1) press = 0;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <StartDebouncingTask+0x48>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d103      	bne.n	8000c58 <StartDebouncingTask+0x20>
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <StartDebouncingTask+0x48>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	e002      	b.n	8000c5e <StartDebouncingTask+0x26>
			else press = 1;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <StartDebouncingTask+0x48>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
		}

		GPIO_PinState new_state = HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 8000c5e:	2101      	movs	r1, #1
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <StartDebouncingTask+0x4c>)
 8000c62:	f000 fcd3 	bl	800160c <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	73fb      	strb	r3, [r7, #15]
		if (new_state != key_state && new_state == GPIO_PIN_RESET)
		{
			// SW state simulate Short Circuit -> See interrupt
			//SwitchOnRedLED();
		}
		key_state = new_state;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <StartDebouncingTask+0x44>)
 8000c70:	801a      	strh	r2, [r3, #0]

		osDelay(30 / portTICK_PERIOD_MS);
 8000c72:	201e      	movs	r0, #30
 8000c74:	f002 fa04 	bl	8003080 <osDelay>
	{
 8000c78:	e7e2      	b.n	8000c40 <StartDebouncingTask+0x8>
 8000c7a:	bf00      	nop
 8000c7c:	20000188 	.word	0x20000188
 8000c80:	20000000 	.word	0x20000000
 8000c84:	40020000 	.word	0x40020000

08000c88 <StartEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
  /* Infinite loop */
  for(;;)
  {
	  //Encoder
		if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_5))
 8000c90:	2120      	movs	r1, #32
 8000c92:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <StartEncoderTask+0x6c>)
 8000c94:	f000 fcba 	bl	800160c <HAL_GPIO_ReadPin>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d006      	beq.n	8000cac <StartEncoderTask+0x24>
		{
			howMany = (TIM3->CNT)>>2;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <StartEncoderTask+0x70>)
 8000ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <StartEncoderTask+0x74>)
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	e005      	b.n	8000cb8 <StartEncoderTask+0x30>
		}
		else
		{
			howMany = (TIM3->CNT)>>2;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <StartEncoderTask+0x70>)
 8000cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <StartEncoderTask+0x74>)
 8000cb6:	601a      	str	r2, [r3, #0]
		}

		if(__HAL_TIM_GET_COUNTER(&htim3)>4000)
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <StartEncoderTask+0x78>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbe:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000cc2:	d906      	bls.n	8000cd2 <StartEncoderTask+0x4a>
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <StartEncoderTask+0x78>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
			howMany = 0;
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <StartEncoderTask+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
		}
		if(__HAL_TIM_GET_COUNTER(&htim3)>24)
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <StartEncoderTask+0x78>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	2b18      	cmp	r3, #24
 8000cda:	d906      	bls.n	8000cea <StartEncoderTask+0x62>
		{
			__HAL_TIM_SET_COUNTER(&htim3, 24);
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <StartEncoderTask+0x78>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2218      	movs	r2, #24
 8000ce2:	625a      	str	r2, [r3, #36]	; 0x24
			howMany = 6;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <StartEncoderTask+0x74>)
 8000ce6:	2206      	movs	r2, #6
 8000ce8:	601a      	str	r2, [r3, #0]
		}
		osDelay(100 / portTICK_PERIOD_MS);
 8000cea:	2064      	movs	r0, #100	; 0x64
 8000cec:	f002 f9c8 	bl	8003080 <osDelay>
		if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_5))
 8000cf0:	e7ce      	b.n	8000c90 <StartEncoderTask+0x8>
 8000cf2:	bf00      	nop
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40000400 	.word	0x40000400
 8000cfc:	2000018c 	.word	0x2000018c
 8000d00:	20000130 	.word	0x20000130

08000d04 <StartPumpTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPumpTask */
void StartPumpTask(void *argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPumpTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f002 f9b7 	bl	8003080 <osDelay>
 8000d12:	e7fb      	b.n	8000d0c <StartPumpTask+0x8>

08000d14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d101      	bne.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d26:	f000 f9eb 	bl	8001100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40010000 	.word	0x40010000

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_MspInit+0x54>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <HAL_MspInit+0x54>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_MspInit+0x54>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_MspInit+0x54>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_MspInit+0x54>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_MspInit+0x54>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	210f      	movs	r1, #15
 8000d86:	f06f 0001 	mvn.w	r0, #1
 8000d8a:	f000 fa91 	bl	80012b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_I2C_MspInit+0x84>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d12b      	bne.n	8000e16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_I2C_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <HAL_I2C_MspInit+0x88>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_I2C_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dda:	23c0      	movs	r3, #192	; 0xc0
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dde:	2312      	movs	r3, #18
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dea:	2304      	movs	r3, #4
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <HAL_I2C_MspInit+0x8c>)
 8000df6:	f000 fa85 	bl	8001304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_I2C_MspInit+0x88>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_I2C_MspInit+0x88>)
 8000e04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_I2C_MspInit+0x88>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40005400 	.word	0x40005400
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020400 	.word	0x40020400

08000e2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e3c:	d10d      	bne.n	8000e5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_TIM_Base_MspInit+0x3c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_TIM_Base_MspInit+0x3c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_TIM_Base_MspInit+0x3c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a1d      	ldr	r2, [pc, #116]	; (8000f00 <HAL_TIM_Encoder_MspInit+0x94>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d133      	bne.n	8000ef6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <HAL_TIM_Encoder_MspInit+0x98>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <HAL_TIM_Encoder_MspInit+0x98>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_TIM_Encoder_MspInit+0x98>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_TIM_Encoder_MspInit+0x98>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <HAL_TIM_Encoder_MspInit+0x98>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_TIM_Encoder_MspInit+0x98>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec6:	23c0      	movs	r3, #192	; 0xc0
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000ee2:	f000 fa0f 	bl	8001304 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2105      	movs	r1, #5
 8000eea:	201d      	movs	r0, #29
 8000eec:	f000 f9e0 	bl	80012b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ef0:	201d      	movs	r0, #29
 8000ef2:	f000 f9f9 	bl	80012e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	; 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40000400 	.word	0x40000400
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020000 	.word	0x40020000

08000f0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_InitTick+0xd0>)
 8000f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f24:	4a2d      	ldr	r2, [pc, #180]	; (8000fdc <HAL_InitTick+0xd0>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <HAL_InitTick+0xd0>)
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f38:	f107 020c 	add.w	r2, r7, #12
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 f930 	bl	80021a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f48:	f001 f91a 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
 8000f4c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f50:	4a23      	ldr	r2, [pc, #140]	; (8000fe0 <HAL_InitTick+0xd4>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	0c9b      	lsrs	r3, r3, #18
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f5e:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <HAL_InitTick+0xdc>)
 8000f60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f82:	4818      	ldr	r0, [pc, #96]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f84:	f001 f942 	bl	800220c <HAL_TIM_Base_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d11b      	bne.n	8000fce <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f96:	4813      	ldr	r0, [pc, #76]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f98:	f001 f9e2 	bl	8002360 <HAL_TIM_Base_Start_IT>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d111      	bne.n	8000fce <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000faa:	2019      	movs	r0, #25
 8000fac:	f000 f99c 	bl	80012e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	d808      	bhi.n	8000fc8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	2019      	movs	r0, #25
 8000fbc:	f000 f978 	bl	80012b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_InitTick+0xe0>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e002      	b.n	8000fce <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3730      	adds	r7, #48	; 0x30
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	431bde83 	.word	0x431bde83
 8000fe4:	20000190 	.word	0x20000190
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	20000008 	.word	0x20000008

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001022:	f001 fb53 	bl	80026cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000190 	.word	0x20000190

08001030 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <TIM3_IRQHandler+0x10>)
 8001036:	f001 fb49 	bl	80026cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000130 	.word	0x20000130

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800106e:	490e      	ldr	r1, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001084:	4c0b      	ldr	r4, [pc, #44]	; (80010b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001092:	f7ff ffd7 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f004 fc91 	bl	80059bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fb4d 	bl	8000738 <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80010ac:	08005d34 	.word	0x08005d34
  ldr r2, =_sbss
 80010b0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80010b4:	20004bf4 	.word	0x20004bf4

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_Init+0x40>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_Init+0x40>)
 80010d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_Init+0x40>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f8d8 	bl	800129a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	200f      	movs	r0, #15
 80010ec:	f7ff ff0e 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fe28 	bl	8000d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023c00 	.word	0x40023c00

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	2000000c 	.word	0x2000000c
 8001124:	200001d8 	.word	0x200001d8

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	200001d8 	.word	0x200001d8

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	; (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff4c 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c2:	f7ff ff61 	bl	8001188 <__NVIC_GetPriorityGrouping>
 80012c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	6978      	ldr	r0, [r7, #20]
 80012ce:	f7ff ffb1 	bl	8001234 <NVIC_EncodePriority>
 80012d2:	4602      	mov	r2, r0
 80012d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff80 	bl	80011e0 <__NVIC_SetPriority>
}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff54 	bl	80011a4 <__NVIC_EnableIRQ>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
 800131e:	e159      	b.n	80015d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001320:	2201      	movs	r2, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	429a      	cmp	r2, r3
 800133a:	f040 8148 	bne.w	80015ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d005      	beq.n	8001356 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001352:	2b02      	cmp	r3, #2
 8001354:	d130      	bne.n	80013b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138c:	2201      	movs	r2, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f003 0201 	and.w	r2, r3, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d017      	beq.n	80013f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d123      	bne.n	8001448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	08da      	lsrs	r2, r3, #3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3208      	adds	r2, #8
 8001408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	220f      	movs	r2, #15
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	691a      	ldr	r2, [r3, #16]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	08da      	lsrs	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3208      	adds	r2, #8
 8001442:	69b9      	ldr	r1, [r7, #24]
 8001444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0203 	and.w	r2, r3, #3
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80a2 	beq.w	80015ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b57      	ldr	r3, [pc, #348]	; (80015ec <HAL_GPIO_Init+0x2e8>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a56      	ldr	r2, [pc, #344]	; (80015ec <HAL_GPIO_Init+0x2e8>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b54      	ldr	r3, [pc, #336]	; (80015ec <HAL_GPIO_Init+0x2e8>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014a6:	4a52      	ldr	r2, [pc, #328]	; (80015f0 <HAL_GPIO_Init+0x2ec>)
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	3302      	adds	r3, #2
 80014ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	220f      	movs	r2, #15
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a49      	ldr	r2, [pc, #292]	; (80015f4 <HAL_GPIO_Init+0x2f0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d019      	beq.n	8001506 <HAL_GPIO_Init+0x202>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a48      	ldr	r2, [pc, #288]	; (80015f8 <HAL_GPIO_Init+0x2f4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0x1fe>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a47      	ldr	r2, [pc, #284]	; (80015fc <HAL_GPIO_Init+0x2f8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00d      	beq.n	80014fe <HAL_GPIO_Init+0x1fa>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a46      	ldr	r2, [pc, #280]	; (8001600 <HAL_GPIO_Init+0x2fc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d007      	beq.n	80014fa <HAL_GPIO_Init+0x1f6>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a45      	ldr	r2, [pc, #276]	; (8001604 <HAL_GPIO_Init+0x300>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_GPIO_Init+0x1f2>
 80014f2:	2304      	movs	r3, #4
 80014f4:	e008      	b.n	8001508 <HAL_GPIO_Init+0x204>
 80014f6:	2307      	movs	r3, #7
 80014f8:	e006      	b.n	8001508 <HAL_GPIO_Init+0x204>
 80014fa:	2303      	movs	r3, #3
 80014fc:	e004      	b.n	8001508 <HAL_GPIO_Init+0x204>
 80014fe:	2302      	movs	r3, #2
 8001500:	e002      	b.n	8001508 <HAL_GPIO_Init+0x204>
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_GPIO_Init+0x204>
 8001506:	2300      	movs	r3, #0
 8001508:	69fa      	ldr	r2, [r7, #28]
 800150a:	f002 0203 	and.w	r2, r2, #3
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	4093      	lsls	r3, r2
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001518:	4935      	ldr	r1, [pc, #212]	; (80015f0 <HAL_GPIO_Init+0x2ec>)
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	089b      	lsrs	r3, r3, #2
 800151e:	3302      	adds	r3, #2
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001526:	4b38      	ldr	r3, [pc, #224]	; (8001608 <HAL_GPIO_Init+0x304>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800154a:	4a2f      	ldr	r2, [pc, #188]	; (8001608 <HAL_GPIO_Init+0x304>)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_GPIO_Init+0x304>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001574:	4a24      	ldr	r2, [pc, #144]	; (8001608 <HAL_GPIO_Init+0x304>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800157a:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_GPIO_Init+0x304>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800159e:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <HAL_GPIO_Init+0x304>)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_GPIO_Init+0x304>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c8:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <HAL_GPIO_Init+0x304>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3301      	adds	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	2b0f      	cmp	r3, #15
 80015d8:	f67f aea2 	bls.w	8001320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3724      	adds	r7, #36	; 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40013800 	.word	0x40013800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	40020400 	.word	0x40020400
 80015fc:	40020800 	.word	0x40020800
 8001600:	40020c00 	.word	0x40020c00
 8001604:	40021000 	.word	0x40021000
 8001608:	40013c00 	.word	0x40013c00

0800160c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	887b      	ldrh	r3, [r7, #2]
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e001      	b.n	800162e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
 8001648:	4613      	mov	r3, r2
 800164a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800164c:	787b      	ldrb	r3, [r7, #1]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001658:	e003      	b.n	8001662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800165a:	887b      	ldrh	r3, [r7, #2]
 800165c:	041a      	lsls	r2, r3, #16
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	619a      	str	r2, [r3, #24]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e12b      	b.n	80018da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d106      	bne.n	800169c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fb80 	bl	8000d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2224      	movs	r2, #36	; 0x24
 80016a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016d4:	f000 fd40 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 80016d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4a81      	ldr	r2, [pc, #516]	; (80018e4 <HAL_I2C_Init+0x274>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d807      	bhi.n	80016f4 <HAL_I2C_Init+0x84>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4a80      	ldr	r2, [pc, #512]	; (80018e8 <HAL_I2C_Init+0x278>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	bf94      	ite	ls
 80016ec:	2301      	movls	r3, #1
 80016ee:	2300      	movhi	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	e006      	b.n	8001702 <HAL_I2C_Init+0x92>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4a7d      	ldr	r2, [pc, #500]	; (80018ec <HAL_I2C_Init+0x27c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	bf94      	ite	ls
 80016fc:	2301      	movls	r3, #1
 80016fe:	2300      	movhi	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0e7      	b.n	80018da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4a78      	ldr	r2, [pc, #480]	; (80018f0 <HAL_I2C_Init+0x280>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	0c9b      	lsrs	r3, r3, #18
 8001714:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	430a      	orrs	r2, r1
 8001728:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a6a      	ldr	r2, [pc, #424]	; (80018e4 <HAL_I2C_Init+0x274>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d802      	bhi.n	8001744 <HAL_I2C_Init+0xd4>
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	3301      	adds	r3, #1
 8001742:	e009      	b.n	8001758 <HAL_I2C_Init+0xe8>
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	4a69      	ldr	r2, [pc, #420]	; (80018f4 <HAL_I2C_Init+0x284>)
 8001750:	fba2 2303 	umull	r2, r3, r2, r3
 8001754:	099b      	lsrs	r3, r3, #6
 8001756:	3301      	adds	r3, #1
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	430b      	orrs	r3, r1
 800175e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800176a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	495c      	ldr	r1, [pc, #368]	; (80018e4 <HAL_I2C_Init+0x274>)
 8001774:	428b      	cmp	r3, r1
 8001776:	d819      	bhi.n	80017ac <HAL_I2C_Init+0x13c>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1e59      	subs	r1, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fbb1 f3f3 	udiv	r3, r1, r3
 8001786:	1c59      	adds	r1, r3, #1
 8001788:	f640 73fc 	movw	r3, #4092	; 0xffc
 800178c:	400b      	ands	r3, r1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00a      	beq.n	80017a8 <HAL_I2C_Init+0x138>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1e59      	subs	r1, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fbb1 f3f3 	udiv	r3, r1, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a6:	e051      	b.n	800184c <HAL_I2C_Init+0x1dc>
 80017a8:	2304      	movs	r3, #4
 80017aa:	e04f      	b.n	800184c <HAL_I2C_Init+0x1dc>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d111      	bne.n	80017d8 <HAL_I2C_Init+0x168>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1e58      	subs	r0, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	440b      	add	r3, r1
 80017c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	e012      	b.n	80017fe <HAL_I2C_Init+0x18e>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1e58      	subs	r0, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6859      	ldr	r1, [r3, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	0099      	lsls	r1, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ee:	3301      	adds	r3, #1
 80017f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf0c      	ite	eq
 80017f8:	2301      	moveq	r3, #1
 80017fa:	2300      	movne	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_Init+0x196>
 8001802:	2301      	movs	r3, #1
 8001804:	e022      	b.n	800184c <HAL_I2C_Init+0x1dc>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10e      	bne.n	800182c <HAL_I2C_Init+0x1bc>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1e58      	subs	r0, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6859      	ldr	r1, [r3, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	440b      	add	r3, r1
 800181c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001820:	3301      	adds	r3, #1
 8001822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800182a:	e00f      	b.n	800184c <HAL_I2C_Init+0x1dc>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1e58      	subs	r0, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	0099      	lsls	r1, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001842:	3301      	adds	r3, #1
 8001844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	6809      	ldr	r1, [r1, #0]
 8001850:	4313      	orrs	r3, r2
 8001852:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69da      	ldr	r2, [r3, #28]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800187a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6911      	ldr	r1, [r2, #16]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68d2      	ldr	r2, [r2, #12]
 8001886:	4311      	orrs	r1, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	430b      	orrs	r3, r1
 800188e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0201 	orr.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2220      	movs	r2, #32
 80018c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	000186a0 	.word	0x000186a0
 80018e8:	001e847f 	.word	0x001e847f
 80018ec:	003d08ff 	.word	0x003d08ff
 80018f0:	431bde83 	.word	0x431bde83
 80018f4:	10624dd3 	.word	0x10624dd3

080018f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e267      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d075      	beq.n	8001a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001916:	4b88      	ldr	r3, [pc, #544]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b04      	cmp	r3, #4
 8001920:	d00c      	beq.n	800193c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001922:	4b85      	ldr	r3, [pc, #532]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800192a:	2b08      	cmp	r3, #8
 800192c:	d112      	bne.n	8001954 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800192e:	4b82      	ldr	r3, [pc, #520]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800193a:	d10b      	bne.n	8001954 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	4b7e      	ldr	r3, [pc, #504]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d05b      	beq.n	8001a00 <HAL_RCC_OscConfig+0x108>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d157      	bne.n	8001a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e242      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195c:	d106      	bne.n	800196c <HAL_RCC_OscConfig+0x74>
 800195e:	4b76      	ldr	r3, [pc, #472]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a75      	ldr	r2, [pc, #468]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e01d      	b.n	80019a8 <HAL_RCC_OscConfig+0xb0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x98>
 8001976:	4b70      	ldr	r3, [pc, #448]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a6f      	ldr	r2, [pc, #444]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 800197c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b6d      	ldr	r3, [pc, #436]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a6c      	ldr	r2, [pc, #432]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0xb0>
 8001990:	4b69      	ldr	r3, [pc, #420]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a68      	ldr	r2, [pc, #416]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b66      	ldr	r3, [pc, #408]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a65      	ldr	r2, [pc, #404]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 80019a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d013      	beq.n	80019d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fbba 	bl	8001128 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff fbb6 	bl	8001128 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	; 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e207      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0xc0>
 80019d6:	e014      	b.n	8001a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fba6 	bl	8001128 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff fba2 	bl	8001128 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	; 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e1f3      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f2:	4b51      	ldr	r3, [pc, #324]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0xe8>
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d063      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d11c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a26:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d116      	bne.n	8001a60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_RCC_OscConfig+0x152>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e1c7      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4937      	ldr	r1, [pc, #220]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5e:	e03a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d020      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a68:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <HAL_RCC_OscConfig+0x244>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fb5b 	bl	8001128 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a76:	f7ff fb57 	bl	8001128 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e1a8      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4925      	ldr	r1, [pc, #148]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
 8001aa8:	e015      	b.n	8001ad6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_OscConfig+0x244>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fb3a 	bl	8001128 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fb36 	bl	8001128 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e187      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d036      	beq.n	8001b50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d016      	beq.n	8001b18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_RCC_OscConfig+0x248>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff fb1a 	bl	8001128 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af8:	f7ff fb16 	bl	8001128 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e167      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x200>
 8001b16:	e01b      	b.n	8001b50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_OscConfig+0x248>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff fb03 	bl	8001128 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b24:	e00e      	b.n	8001b44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b26:	f7ff faff 	bl	8001128 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d907      	bls.n	8001b44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e150      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	42470000 	.word	0x42470000
 8001b40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b44:	4b88      	ldr	r3, [pc, #544]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1ea      	bne.n	8001b26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 8097 	beq.w	8001c8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b62:	4b81      	ldr	r3, [pc, #516]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	4b7d      	ldr	r3, [pc, #500]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a7c      	ldr	r2, [pc, #496]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	4b7a      	ldr	r3, [pc, #488]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8e:	4b77      	ldr	r3, [pc, #476]	; (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d118      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9a:	4b74      	ldr	r3, [pc, #464]	; (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a73      	ldr	r2, [pc, #460]	; (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fabf 	bl	8001128 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bae:	f7ff fabb 	bl	8001128 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e10c      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	4b6a      	ldr	r3, [pc, #424]	; (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x2ea>
 8001bd4:	4b64      	ldr	r3, [pc, #400]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	4a63      	ldr	r2, [pc, #396]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70
 8001be0:	e01c      	b.n	8001c1c <HAL_RCC_OscConfig+0x324>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x30c>
 8001bea:	4b5f      	ldr	r3, [pc, #380]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	4a5e      	ldr	r2, [pc, #376]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf6:	4b5c      	ldr	r3, [pc, #368]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfa:	4a5b      	ldr	r2, [pc, #364]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6713      	str	r3, [r2, #112]	; 0x70
 8001c02:	e00b      	b.n	8001c1c <HAL_RCC_OscConfig+0x324>
 8001c04:	4b58      	ldr	r3, [pc, #352]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	4a57      	ldr	r2, [pc, #348]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c10:	4b55      	ldr	r3, [pc, #340]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c16:	f023 0304 	bic.w	r3, r3, #4
 8001c1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d015      	beq.n	8001c50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7ff fa80 	bl	8001128 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fa7c 	bl	8001128 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e0cb      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c42:	4b49      	ldr	r3, [pc, #292]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0ee      	beq.n	8001c2c <HAL_RCC_OscConfig+0x334>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c50:	f7ff fa6a 	bl	8001128 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7ff fa66 	bl	8001128 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0b5      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6e:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ee      	bne.n	8001c58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c80:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	4a38      	ldr	r2, [pc, #224]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a1 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d05c      	beq.n	8001d5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d141      	bne.n	8001d2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b31      	ldr	r3, [pc, #196]	; (8001d70 <HAL_RCC_OscConfig+0x478>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fa3a 	bl	8001128 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff fa36 	bl	8001128 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e087      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	019b      	lsls	r3, r3, #6
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	085b      	lsrs	r3, r3, #1
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	061b      	lsls	r3, r3, #24
 8001cfa:	491b      	ldr	r1, [pc, #108]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_RCC_OscConfig+0x478>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7ff fa0f 	bl	8001128 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff fa0b 	bl	8001128 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e05c      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x416>
 8001d2c:	e054      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_RCC_OscConfig+0x478>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff f9f8 	bl	8001128 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff f9f4 	bl	8001128 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e045      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x444>
 8001d5a:	e03d      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e038      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_RCC_OscConfig+0x4ec>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d028      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d121      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d11a      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001da4:	4013      	ands	r3, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001daa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d111      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	085b      	lsrs	r3, r3, #1
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0cc      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b68      	ldr	r3, [pc, #416]	; (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d90c      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b65      	ldr	r3, [pc, #404]	; (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b63      	ldr	r3, [pc, #396]	; (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0b8      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d020      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e3c:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e54:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	4b50      	ldr	r3, [pc, #320]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	494d      	ldr	r1, [pc, #308]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d044      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d119      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e07f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d003      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d109      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e06f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb6:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e067      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec6:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f023 0203 	bic.w	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4934      	ldr	r1, [pc, #208]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed8:	f7ff f926 	bl	8001128 <HAL_GetTick>
 8001edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee0:	f7ff f922 	bl	8001128 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e04f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 020c 	and.w	r2, r3, #12
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d1eb      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d20c      	bcs.n	8001f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e032      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4916      	ldr	r1, [pc, #88]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f6e:	f000 f821 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	490a      	ldr	r1, [pc, #40]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	5ccb      	ldrb	r3, [r1, r3]
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe ffbc 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023c00 	.word	0x40023c00
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	08005cac 	.word	0x08005cac
 8001fac:	20000004 	.word	0x20000004
 8001fb0:	20000008 	.word	0x20000008

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fb8:	b090      	sub	sp, #64	; 0x40
 8001fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fcc:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	f200 80a1 	bhi.w	8002120 <HAL_RCC_GetSysClockFreq+0x16c>
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d003      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x3a>
 8001fe6:	e09b      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fe8:	4b53      	ldr	r3, [pc, #332]	; (8002138 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001fec:	e09b      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_RCC_GetSysClockFreq+0x188>)
 8001ff0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ff2:	e098      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff4:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ffc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d028      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200a:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	099b      	lsrs	r3, r3, #6
 8002010:	2200      	movs	r2, #0
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	627a      	str	r2, [r7, #36]	; 0x24
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800201c:	2100      	movs	r1, #0
 800201e:	4b47      	ldr	r3, [pc, #284]	; (800213c <HAL_RCC_GetSysClockFreq+0x188>)
 8002020:	fb03 f201 	mul.w	r2, r3, r1
 8002024:	2300      	movs	r3, #0
 8002026:	fb00 f303 	mul.w	r3, r0, r3
 800202a:	4413      	add	r3, r2
 800202c:	4a43      	ldr	r2, [pc, #268]	; (800213c <HAL_RCC_GetSysClockFreq+0x188>)
 800202e:	fba0 1202 	umull	r1, r2, r0, r2
 8002032:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002034:	460a      	mov	r2, r1
 8002036:	62ba      	str	r2, [r7, #40]	; 0x28
 8002038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800203a:	4413      	add	r3, r2
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800203e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002040:	2200      	movs	r2, #0
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	61fa      	str	r2, [r7, #28]
 8002046:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800204a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800204e:	f7fe f8c7 	bl	80001e0 <__aeabi_uldivmod>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4613      	mov	r3, r2
 8002058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800205a:	e053      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800205c:	4b35      	ldr	r3, [pc, #212]	; (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	2200      	movs	r2, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	617a      	str	r2, [r7, #20]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800206e:	f04f 0b00 	mov.w	fp, #0
 8002072:	4652      	mov	r2, sl
 8002074:	465b      	mov	r3, fp
 8002076:	f04f 0000 	mov.w	r0, #0
 800207a:	f04f 0100 	mov.w	r1, #0
 800207e:	0159      	lsls	r1, r3, #5
 8002080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002084:	0150      	lsls	r0, r2, #5
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	ebb2 080a 	subs.w	r8, r2, sl
 800208e:	eb63 090b 	sbc.w	r9, r3, fp
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800209e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020a6:	ebb2 0408 	subs.w	r4, r2, r8
 80020aa:	eb63 0509 	sbc.w	r5, r3, r9
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	00eb      	lsls	r3, r5, #3
 80020b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020bc:	00e2      	lsls	r2, r4, #3
 80020be:	4614      	mov	r4, r2
 80020c0:	461d      	mov	r5, r3
 80020c2:	eb14 030a 	adds.w	r3, r4, sl
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	eb45 030b 	adc.w	r3, r5, fp
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020da:	4629      	mov	r1, r5
 80020dc:	028b      	lsls	r3, r1, #10
 80020de:	4621      	mov	r1, r4
 80020e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020e4:	4621      	mov	r1, r4
 80020e6:	028a      	lsls	r2, r1, #10
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	2200      	movs	r2, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	60fa      	str	r2, [r7, #12]
 80020f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020f8:	f7fe f872 	bl	80001e0 <__aeabi_uldivmod>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4613      	mov	r3, r2
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	0c1b      	lsrs	r3, r3, #16
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	3301      	adds	r3, #1
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800211e:	e002      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetSysClockFreq+0x184>)
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002128:	4618      	mov	r0, r3
 800212a:	3740      	adds	r7, #64	; 0x40
 800212c:	46bd      	mov	sp, r7
 800212e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	00f42400 	.word	0x00f42400
 800213c:	017d7840 	.word	0x017d7840

08002140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_RCC_GetHCLKFreq+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000004 	.word	0x20000004

08002158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800215c:	f7ff fff0 	bl	8002140 <HAL_RCC_GetHCLKFreq>
 8002160:	4602      	mov	r2, r0
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	0a9b      	lsrs	r3, r3, #10
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	4903      	ldr	r1, [pc, #12]	; (800217c <HAL_RCC_GetPCLK1Freq+0x24>)
 800216e:	5ccb      	ldrb	r3, [r1, r3]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40023800 	.word	0x40023800
 800217c:	08005cbc 	.word	0x08005cbc

08002180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002184:	f7ff ffdc 	bl	8002140 <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	0b5b      	lsrs	r3, r3, #13
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4903      	ldr	r1, [pc, #12]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	08005cbc 	.word	0x08005cbc

080021a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	220f      	movs	r2, #15
 80021b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_RCC_GetClockConfig+0x5c>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0203 	and.w	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_RCC_GetClockConfig+0x5c>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <HAL_RCC_GetClockConfig+0x5c>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_GetClockConfig+0x5c>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	08db      	lsrs	r3, r3, #3
 80021e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021ea:	4b07      	ldr	r3, [pc, #28]	; (8002208 <HAL_RCC_GetClockConfig+0x60>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0207 	and.w	r2, r3, #7
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	601a      	str	r2, [r3, #0]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	40023c00 	.word	0x40023c00

0800220c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e041      	b.n	80022a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fdfa 	bl	8000e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3304      	adds	r3, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f000 fc36 	bl	8002abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d001      	beq.n	80022c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e03c      	b.n	800233e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1e      	ldr	r2, [pc, #120]	; (800234c <HAL_TIM_Base_Start+0xa0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d018      	beq.n	8002308 <HAL_TIM_Base_Start+0x5c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022de:	d013      	beq.n	8002308 <HAL_TIM_Base_Start+0x5c>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1a      	ldr	r2, [pc, #104]	; (8002350 <HAL_TIM_Base_Start+0xa4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00e      	beq.n	8002308 <HAL_TIM_Base_Start+0x5c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a19      	ldr	r2, [pc, #100]	; (8002354 <HAL_TIM_Base_Start+0xa8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d009      	beq.n	8002308 <HAL_TIM_Base_Start+0x5c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a17      	ldr	r2, [pc, #92]	; (8002358 <HAL_TIM_Base_Start+0xac>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d004      	beq.n	8002308 <HAL_TIM_Base_Start+0x5c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a16      	ldr	r2, [pc, #88]	; (800235c <HAL_TIM_Base_Start+0xb0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d111      	bne.n	800232c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b06      	cmp	r3, #6
 8002318:	d010      	beq.n	800233c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0201 	orr.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800232a:	e007      	b.n	800233c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40010000 	.word	0x40010000
 8002350:	40000400 	.word	0x40000400
 8002354:	40000800 	.word	0x40000800
 8002358:	40000c00 	.word	0x40000c00
 800235c:	40014000 	.word	0x40014000

08002360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d001      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e044      	b.n	8002402 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <HAL_TIM_Base_Start_IT+0xb0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d018      	beq.n	80023cc <HAL_TIM_Base_Start_IT+0x6c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a2:	d013      	beq.n	80023cc <HAL_TIM_Base_Start_IT+0x6c>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1a      	ldr	r2, [pc, #104]	; (8002414 <HAL_TIM_Base_Start_IT+0xb4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00e      	beq.n	80023cc <HAL_TIM_Base_Start_IT+0x6c>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a19      	ldr	r2, [pc, #100]	; (8002418 <HAL_TIM_Base_Start_IT+0xb8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d009      	beq.n	80023cc <HAL_TIM_Base_Start_IT+0x6c>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a17      	ldr	r2, [pc, #92]	; (800241c <HAL_TIM_Base_Start_IT+0xbc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d004      	beq.n	80023cc <HAL_TIM_Base_Start_IT+0x6c>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a16      	ldr	r2, [pc, #88]	; (8002420 <HAL_TIM_Base_Start_IT+0xc0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d111      	bne.n	80023f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b06      	cmp	r3, #6
 80023dc:	d010      	beq.n	8002400 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0201 	orr.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ee:	e007      	b.n	8002400 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000
 8002414:	40000400 	.word	0x40000400
 8002418:	40000800 	.word	0x40000800
 800241c:	40000c00 	.word	0x40000c00
 8002420:	40014000 	.word	0x40014000

08002424 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e097      	b.n	8002568 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d106      	bne.n	8002452 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7fe fd0d 	bl	8000e6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002468:	f023 0307 	bic.w	r3, r3, #7
 800246c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3304      	adds	r3, #4
 8002476:	4619      	mov	r1, r3
 8002478:	4610      	mov	r0, r2
 800247a:	f000 fb1f 	bl	8002abc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a6:	f023 0303 	bic.w	r3, r3, #3
 80024aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	4313      	orrs	r3, r2
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80024c4:	f023 030c 	bic.w	r3, r3, #12
 80024c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	4313      	orrs	r3, r2
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	011a      	lsls	r2, r3, #4
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	031b      	lsls	r3, r3, #12
 80024f4:	4313      	orrs	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002502:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800250a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	4313      	orrs	r3, r2
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002580:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002588:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002590:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002598:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d110      	bne.n	80025c2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d102      	bne.n	80025ac <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80025a6:	7b7b      	ldrb	r3, [r7, #13]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d001      	beq.n	80025b0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e089      	b.n	80026c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025c0:	e031      	b.n	8002626 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d110      	bne.n	80025ea <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80025c8:	7bbb      	ldrb	r3, [r7, #14]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d102      	bne.n	80025d4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80025ce:	7b3b      	ldrb	r3, [r7, #12]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d001      	beq.n	80025d8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e075      	b.n	80026c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025e8:	e01d      	b.n	8002626 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d108      	bne.n	8002602 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80025f0:	7bbb      	ldrb	r3, [r7, #14]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d105      	bne.n	8002602 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80025f6:	7b7b      	ldrb	r3, [r7, #13]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d102      	bne.n	8002602 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80025fc:	7b3b      	ldrb	r3, [r7, #12]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d001      	beq.n	8002606 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e05e      	b.n	80026c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2202      	movs	r2, #2
 800260a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2202      	movs	r2, #2
 800261a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2202      	movs	r2, #2
 8002622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_TIM_Encoder_Start_IT+0xc4>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b04      	cmp	r3, #4
 8002630:	d010      	beq.n	8002654 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002632:	e01f      	b.n	8002674 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2201      	movs	r2, #1
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fb57 	bl	8002cf0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0202 	orr.w	r2, r2, #2
 8002650:	60da      	str	r2, [r3, #12]
      break;
 8002652:	e02e      	b.n	80026b2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2201      	movs	r2, #1
 800265a:	2104      	movs	r1, #4
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fb47 	bl	8002cf0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0204 	orr.w	r2, r2, #4
 8002670:	60da      	str	r2, [r3, #12]
      break;
 8002672:	e01e      	b.n	80026b2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2201      	movs	r2, #1
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fb37 	bl	8002cf0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2201      	movs	r2, #1
 8002688:	2104      	movs	r1, #4
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fb30 	bl	8002cf0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0202 	orr.w	r2, r2, #2
 800269e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0204 	orr.w	r2, r2, #4
 80026ae:	60da      	str	r2, [r3, #12]
      break;
 80026b0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0201 	orr.w	r2, r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d122      	bne.n	8002728 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d11b      	bne.n	8002728 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0202 	mvn.w	r2, #2
 80026f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f9b5 	bl	8002a7e <HAL_TIM_IC_CaptureCallback>
 8002714:	e005      	b.n	8002722 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f9a7 	bl	8002a6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f9b8 	bl	8002a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b04      	cmp	r3, #4
 8002734:	d122      	bne.n	800277c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b04      	cmp	r3, #4
 8002742:	d11b      	bne.n	800277c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0204 	mvn.w	r2, #4
 800274c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2202      	movs	r2, #2
 8002752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f98b 	bl	8002a7e <HAL_TIM_IC_CaptureCallback>
 8002768:	e005      	b.n	8002776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f97d 	bl	8002a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f98e 	bl	8002a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b08      	cmp	r3, #8
 8002788:	d122      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b08      	cmp	r3, #8
 8002796:	d11b      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0208 	mvn.w	r2, #8
 80027a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2204      	movs	r2, #4
 80027a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f961 	bl	8002a7e <HAL_TIM_IC_CaptureCallback>
 80027bc:	e005      	b.n	80027ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f953 	bl	8002a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f964 	bl	8002a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d122      	bne.n	8002824 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	d11b      	bne.n	8002824 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0210 	mvn.w	r2, #16
 80027f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2208      	movs	r2, #8
 80027fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f937 	bl	8002a7e <HAL_TIM_IC_CaptureCallback>
 8002810:	e005      	b.n	800281e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f929 	bl	8002a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f93a 	bl	8002a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d10e      	bne.n	8002850 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d107      	bne.n	8002850 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0201 	mvn.w	r2, #1
 8002848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe fa62 	bl	8000d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285a:	2b80      	cmp	r3, #128	; 0x80
 800285c:	d10e      	bne.n	800287c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002868:	2b80      	cmp	r3, #128	; 0x80
 800286a:	d107      	bne.n	800287c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fad8 	bl	8002e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d10e      	bne.n	80028a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	d107      	bne.n	80028a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f8ff 	bl	8002aa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d10e      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d107      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0220 	mvn.w	r2, #32
 80028cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 faa2 	bl	8002e18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_TIM_ConfigClockSource+0x1c>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e0b4      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x186>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800291e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002930:	d03e      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002936:	f200 8087 	bhi.w	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 800293a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293e:	f000 8086 	beq.w	8002a4e <HAL_TIM_ConfigClockSource+0x172>
 8002942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002946:	d87f      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b70      	cmp	r3, #112	; 0x70
 800294a:	d01a      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0xa6>
 800294c:	2b70      	cmp	r3, #112	; 0x70
 800294e:	d87b      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002950:	2b60      	cmp	r3, #96	; 0x60
 8002952:	d050      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002954:	2b60      	cmp	r3, #96	; 0x60
 8002956:	d877      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002958:	2b50      	cmp	r3, #80	; 0x50
 800295a:	d03c      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0xfa>
 800295c:	2b50      	cmp	r3, #80	; 0x50
 800295e:	d873      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002960:	2b40      	cmp	r3, #64	; 0x40
 8002962:	d058      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0x13a>
 8002964:	2b40      	cmp	r3, #64	; 0x40
 8002966:	d86f      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002968:	2b30      	cmp	r3, #48	; 0x30
 800296a:	d064      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x15a>
 800296c:	2b30      	cmp	r3, #48	; 0x30
 800296e:	d86b      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002970:	2b20      	cmp	r3, #32
 8002972:	d060      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x15a>
 8002974:	2b20      	cmp	r3, #32
 8002976:	d867      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b00      	cmp	r3, #0
 800297a:	d05c      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x15a>
 800297c:	2b10      	cmp	r3, #16
 800297e:	d05a      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x15a>
 8002980:	e062      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6899      	ldr	r1, [r3, #8]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f000 f98d 	bl	8002cb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	609a      	str	r2, [r3, #8]
      break;
 80029ae:	e04f      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6899      	ldr	r1, [r3, #8]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f000 f976 	bl	8002cb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029d2:	609a      	str	r2, [r3, #8]
      break;
 80029d4:	e03c      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f000 f8ea 	bl	8002bbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2150      	movs	r1, #80	; 0x50
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f943 	bl	8002c7a <TIM_ITRx_SetConfig>
      break;
 80029f4:	e02c      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	461a      	mov	r2, r3
 8002a04:	f000 f909 	bl	8002c1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2160      	movs	r1, #96	; 0x60
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 f933 	bl	8002c7a <TIM_ITRx_SetConfig>
      break;
 8002a14:	e01c      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f000 f8ca 	bl	8002bbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2140      	movs	r1, #64	; 0x40
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f923 	bl	8002c7a <TIM_ITRx_SetConfig>
      break;
 8002a34:	e00c      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f000 f91a 	bl	8002c7a <TIM_ITRx_SetConfig>
      break;
 8002a46:	e003      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4c:	e000      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a34      	ldr	r2, [pc, #208]	; (8002ba0 <TIM_Base_SetConfig+0xe4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00f      	beq.n	8002af4 <TIM_Base_SetConfig+0x38>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ada:	d00b      	beq.n	8002af4 <TIM_Base_SetConfig+0x38>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a31      	ldr	r2, [pc, #196]	; (8002ba4 <TIM_Base_SetConfig+0xe8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <TIM_Base_SetConfig+0x38>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a30      	ldr	r2, [pc, #192]	; (8002ba8 <TIM_Base_SetConfig+0xec>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d003      	beq.n	8002af4 <TIM_Base_SetConfig+0x38>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a2f      	ldr	r2, [pc, #188]	; (8002bac <TIM_Base_SetConfig+0xf0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d108      	bne.n	8002b06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <TIM_Base_SetConfig+0xe4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d01b      	beq.n	8002b46 <TIM_Base_SetConfig+0x8a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b14:	d017      	beq.n	8002b46 <TIM_Base_SetConfig+0x8a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <TIM_Base_SetConfig+0xe8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <TIM_Base_SetConfig+0x8a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a21      	ldr	r2, [pc, #132]	; (8002ba8 <TIM_Base_SetConfig+0xec>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00f      	beq.n	8002b46 <TIM_Base_SetConfig+0x8a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a20      	ldr	r2, [pc, #128]	; (8002bac <TIM_Base_SetConfig+0xf0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00b      	beq.n	8002b46 <TIM_Base_SetConfig+0x8a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1f      	ldr	r2, [pc, #124]	; (8002bb0 <TIM_Base_SetConfig+0xf4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d007      	beq.n	8002b46 <TIM_Base_SetConfig+0x8a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1e      	ldr	r2, [pc, #120]	; (8002bb4 <TIM_Base_SetConfig+0xf8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d003      	beq.n	8002b46 <TIM_Base_SetConfig+0x8a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <TIM_Base_SetConfig+0xfc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d108      	bne.n	8002b58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a08      	ldr	r2, [pc, #32]	; (8002ba0 <TIM_Base_SetConfig+0xe4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d103      	bne.n	8002b8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	615a      	str	r2, [r3, #20]
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40010000 	.word	0x40010000
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800
 8002bac:	40000c00 	.word	0x40000c00
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	40014400 	.word	0x40014400
 8002bb8:	40014800 	.word	0x40014800

08002bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	f023 0201 	bic.w	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f023 030a 	bic.w	r3, r3, #10
 8002bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	621a      	str	r2, [r3, #32]
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b087      	sub	sp, #28
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f023 0210 	bic.w	r2, r3, #16
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	031b      	lsls	r3, r3, #12
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	621a      	str	r2, [r3, #32]
}
 8002c6e:	bf00      	nop
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f043 0307 	orr.w	r3, r3, #7
 8002c9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	609a      	str	r2, [r3, #8]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	021a      	lsls	r2, r3, #8
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	609a      	str	r2, [r3, #8]
}
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	2201      	movs	r2, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a1a      	ldr	r2, [r3, #32]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	401a      	ands	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	fa01 f303 	lsl.w	r3, r1, r3
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	621a      	str	r2, [r3, #32]
}
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e050      	b.n	8002df6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d018      	beq.n	8002dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da0:	d013      	beq.n	8002dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00e      	beq.n	8002dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a16      	ldr	r2, [pc, #88]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d009      	beq.n	8002dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d10c      	bne.n	8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40010000 	.word	0x40010000
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40000800 	.word	0x40000800
 8002e10:	40000c00 	.word	0x40000c00
 8002e14:	40014000 	.word	0x40014000

08002e18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <__NVIC_SetPriority>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	6039      	str	r1, [r7, #0]
 8002e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	db0a      	blt.n	8002e6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	490c      	ldr	r1, [pc, #48]	; (8002e8c <__NVIC_SetPriority+0x4c>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	0112      	lsls	r2, r2, #4
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	440b      	add	r3, r1
 8002e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e68:	e00a      	b.n	8002e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4908      	ldr	r1, [pc, #32]	; (8002e90 <__NVIC_SetPriority+0x50>)
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	3b04      	subs	r3, #4
 8002e78:	0112      	lsls	r2, r2, #4
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	761a      	strb	r2, [r3, #24]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000e100 	.word	0xe000e100
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <SysTick_Handler+0x1c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e9c:	f001 fd28 	bl	80048f0 <xTaskGetSchedulerState>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d001      	beq.n	8002eaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002ea6:	f002 fb0f 	bl	80054c8 <xPortSysTickHandler>
  }
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	e000e010 	.word	0xe000e010

08002eb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002eb8:	2100      	movs	r1, #0
 8002eba:	f06f 0004 	mvn.w	r0, #4
 8002ebe:	f7ff ffbf 	bl	8002e40 <__NVIC_SetPriority>
#endif
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ece:	f3ef 8305 	mrs	r3, IPSR
 8002ed2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ed4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002eda:	f06f 0305 	mvn.w	r3, #5
 8002ede:	607b      	str	r3, [r7, #4]
 8002ee0:	e00c      	b.n	8002efc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <osKernelInitialize+0x44>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <osKernelInitialize+0x44>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	607b      	str	r3, [r7, #4]
 8002ef4:	e002      	b.n	8002efc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8002efa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002efc:	687b      	ldr	r3, [r7, #4]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	200001dc 	.word	0x200001dc

08002f10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f16:	f3ef 8305 	mrs	r3, IPSR
 8002f1a:	603b      	str	r3, [r7, #0]
  return(result);
 8002f1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002f22:	f06f 0305 	mvn.w	r3, #5
 8002f26:	607b      	str	r3, [r7, #4]
 8002f28:	e010      	b.n	8002f4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <osKernelStart+0x48>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d109      	bne.n	8002f46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002f32:	f7ff ffbf 	bl	8002eb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <osKernelStart+0x48>)
 8002f38:	2202      	movs	r2, #2
 8002f3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002f3c:	f001 f87c 	bl	8004038 <vTaskStartScheduler>
      stat = osOK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	e002      	b.n	8002f4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f4c:	687b      	ldr	r3, [r7, #4]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200001dc 	.word	0x200001dc

08002f5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08e      	sub	sp, #56	; 0x38
 8002f60:	af04      	add	r7, sp, #16
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f6c:	f3ef 8305 	mrs	r3, IPSR
 8002f70:	617b      	str	r3, [r7, #20]
  return(result);
 8002f72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d17e      	bne.n	8003076 <osThreadNew+0x11a>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d07b      	beq.n	8003076 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002f82:	2318      	movs	r3, #24
 8002f84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d045      	beq.n	8003022 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <osThreadNew+0x48>
        name = attr->name;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <osThreadNew+0x6e>
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	2b38      	cmp	r3, #56	; 0x38
 8002fbc:	d805      	bhi.n	8002fca <osThreadNew+0x6e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <osThreadNew+0x72>
        return (NULL);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e054      	b.n	8003078 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00e      	beq.n	8003004 <osThreadNew+0xa8>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2bbb      	cmp	r3, #187	; 0xbb
 8002fec:	d90a      	bls.n	8003004 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d006      	beq.n	8003004 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <osThreadNew+0xa8>
        mem = 1;
 8002ffe:	2301      	movs	r3, #1
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	e010      	b.n	8003026 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10c      	bne.n	8003026 <osThreadNew+0xca>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d108      	bne.n	8003026 <osThreadNew+0xca>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d104      	bne.n	8003026 <osThreadNew+0xca>
          mem = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	e001      	b.n	8003026 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d110      	bne.n	800304e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003034:	9202      	str	r2, [sp, #8]
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	6a3a      	ldr	r2, [r7, #32]
 8003040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 fe0c 	bl	8003c60 <xTaskCreateStatic>
 8003048:	4603      	mov	r3, r0
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	e013      	b.n	8003076 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d110      	bne.n	8003076 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	b29a      	uxth	r2, r3
 8003058:	f107 0310 	add.w	r3, r7, #16
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fe57 	bl	8003d1a <xTaskCreate>
 800306c:	4603      	mov	r3, r0
 800306e:	2b01      	cmp	r3, #1
 8003070:	d001      	beq.n	8003076 <osThreadNew+0x11a>
            hTask = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003076:	693b      	ldr	r3, [r7, #16]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3728      	adds	r7, #40	; 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003088:	f3ef 8305 	mrs	r3, IPSR
 800308c:	60bb      	str	r3, [r7, #8]
  return(result);
 800308e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <osDelay+0x1c>
    stat = osErrorISR;
 8003094:	f06f 0305 	mvn.w	r3, #5
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	e007      	b.n	80030ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 ff92 	bl	8003fd0 <vTaskDelay>
    }
  }

  return (stat);
 80030ac:	68fb      	ldr	r3, [r7, #12]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80030c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4a06      	ldr	r2, [pc, #24]	; (80030e8 <vApplicationGetIdleTaskMemory+0x30>)
 80030ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2280      	movs	r2, #128	; 0x80
 80030d4:	601a      	str	r2, [r3, #0]
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	200001e0 	.word	0x200001e0
 80030e8:	2000029c 	.word	0x2000029c

080030ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4a07      	ldr	r2, [pc, #28]	; (8003118 <vApplicationGetTimerTaskMemory+0x2c>)
 80030fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	4a06      	ldr	r2, [pc, #24]	; (800311c <vApplicationGetTimerTaskMemory+0x30>)
 8003102:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800310a:	601a      	str	r2, [r3, #0]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	2000049c 	.word	0x2000049c
 800311c:	20000558 	.word	0x20000558

08003120 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f103 0208 	add.w	r2, r3, #8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f04f 32ff 	mov.w	r2, #4294967295
 8003138:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f103 0208 	add.w	r2, r3, #8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f103 0208 	add.w	r2, r3, #8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800317a:	b480      	push	{r7}
 800317c:	b085      	sub	sp, #20
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	601a      	str	r2, [r3, #0]
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d103      	bne.n	80031e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e00c      	b.n	80031fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3308      	adds	r3, #8
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e002      	b.n	80031f0 <vListInsert+0x2e>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d2f6      	bcs.n	80031ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	601a      	str	r2, [r3, #0]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6892      	ldr	r2, [r2, #8]
 800324a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6852      	ldr	r2, [r2, #4]
 8003254:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d103      	bne.n	8003268 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	1e5a      	subs	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80032b2:	f002 f877 	bl	80053a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	68f9      	ldr	r1, [r7, #12]
 80032c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	441a      	add	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e2:	3b01      	subs	r3, #1
 80032e4:	68f9      	ldr	r1, [r7, #12]
 80032e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	441a      	add	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	22ff      	movs	r2, #255	; 0xff
 80032f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	22ff      	movs	r2, #255	; 0xff
 80032fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d114      	bne.n	8003332 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01a      	beq.n	8003346 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3310      	adds	r3, #16
 8003314:	4618      	mov	r0, r3
 8003316:	f001 f929 	bl	800456c <xTaskRemoveFromEventList>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d012      	beq.n	8003346 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <xQueueGenericReset+0xcc>)
 8003322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	e009      	b.n	8003346 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	3310      	adds	r3, #16
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fef2 	bl	8003120 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3324      	adds	r3, #36	; 0x24
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff feed 	bl	8003120 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003346:	f002 f85d 	bl	8005404 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800334a:	2301      	movs	r3, #1
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	e000ed04 	.word	0xe000ed04

08003358 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08e      	sub	sp, #56	; 0x38
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10a      	bne.n	8003382 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800337e:	bf00      	nop
 8003380:	e7fe      	b.n	8003380 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
}
 800339a:	bf00      	nop
 800339c:	e7fe      	b.n	800339c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <xQueueGenericCreateStatic+0x52>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <xQueueGenericCreateStatic+0x56>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <xQueueGenericCreateStatic+0x58>
 80033ae:	2300      	movs	r3, #0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80033b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	623b      	str	r3, [r7, #32]
}
 80033c6:	bf00      	nop
 80033c8:	e7fe      	b.n	80033c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d102      	bne.n	80033d6 <xQueueGenericCreateStatic+0x7e>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <xQueueGenericCreateStatic+0x82>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <xQueueGenericCreateStatic+0x84>
 80033da:	2300      	movs	r3, #0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	61fb      	str	r3, [r7, #28]
}
 80033f2:	bf00      	nop
 80033f4:	e7fe      	b.n	80033f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033f6:	2350      	movs	r3, #80	; 0x50
 80033f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b50      	cmp	r3, #80	; 0x50
 80033fe:	d00a      	beq.n	8003416 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	61bb      	str	r3, [r7, #24]
}
 8003412:	bf00      	nop
 8003414:	e7fe      	b.n	8003414 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003416:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800342a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	4613      	mov	r3, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f805 	bl	8003448 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003440:	4618      	mov	r0, r3
 8003442:	3730      	adds	r7, #48	; 0x30
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	e002      	b.n	800346a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003476:	2101      	movs	r1, #1
 8003478:	69b8      	ldr	r0, [r7, #24]
 800347a:	f7ff ff05 	bl	8003288 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	78fa      	ldrb	r2, [r7, #3]
 8003482:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08e      	sub	sp, #56	; 0x38
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800349e:	2300      	movs	r3, #0
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <xQueueGenericSend+0x32>
	__asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80034be:	bf00      	nop
 80034c0:	e7fe      	b.n	80034c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d103      	bne.n	80034d0 <xQueueGenericSend+0x40>
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <xQueueGenericSend+0x44>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <xQueueGenericSend+0x46>
 80034d4:	2300      	movs	r3, #0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10a      	bne.n	80034f0 <xQueueGenericSend+0x60>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034ec:	bf00      	nop
 80034ee:	e7fe      	b.n	80034ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d103      	bne.n	80034fe <xQueueGenericSend+0x6e>
 80034f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <xQueueGenericSend+0x72>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <xQueueGenericSend+0x74>
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <xQueueGenericSend+0x8e>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	623b      	str	r3, [r7, #32]
}
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800351e:	f001 f9e7 	bl	80048f0 <xTaskGetSchedulerState>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <xQueueGenericSend+0x9e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <xQueueGenericSend+0xa2>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <xQueueGenericSend+0xa4>
 8003532:	2300      	movs	r3, #0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <xQueueGenericSend+0xbe>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	61fb      	str	r3, [r7, #28]
}
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800354e:	f001 ff29 	bl	80053a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355a:	429a      	cmp	r2, r3
 800355c:	d302      	bcc.n	8003564 <xQueueGenericSend+0xd4>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d129      	bne.n	80035b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800356a:	f000 fa0b 	bl	8003984 <prvCopyDataToQueue>
 800356e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	2b00      	cmp	r3, #0
 8003576:	d010      	beq.n	800359a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	3324      	adds	r3, #36	; 0x24
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fff5 	bl	800456c <xTaskRemoveFromEventList>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003588:	4b3f      	ldr	r3, [pc, #252]	; (8003688 <xQueueGenericSend+0x1f8>)
 800358a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	e00a      	b.n	80035b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80035a0:	4b39      	ldr	r3, [pc, #228]	; (8003688 <xQueueGenericSend+0x1f8>)
 80035a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80035b0:	f001 ff28 	bl	8005404 <vPortExitCritical>
				return pdPASS;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e063      	b.n	8003680 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d103      	bne.n	80035c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035be:	f001 ff21 	bl	8005404 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e05c      	b.n	8003680 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d106      	bne.n	80035da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	4618      	mov	r0, r3
 80035d2:	f001 f82f 	bl	8004634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035d6:	2301      	movs	r3, #1
 80035d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035da:	f001 ff13 	bl	8005404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035de:	f000 fd9b 	bl	8004118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035e2:	f001 fedf 	bl	80053a4 <vPortEnterCritical>
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035ec:	b25b      	sxtb	r3, r3
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d103      	bne.n	80035fc <xQueueGenericSend+0x16c>
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003602:	b25b      	sxtb	r3, r3
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d103      	bne.n	8003612 <xQueueGenericSend+0x182>
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003612:	f001 fef7 	bl	8005404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003616:	1d3a      	adds	r2, r7, #4
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	4611      	mov	r1, r2
 800361e:	4618      	mov	r0, r3
 8003620:	f001 f81e 	bl	8004660 <xTaskCheckForTimeOut>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d124      	bne.n	8003674 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800362a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800362c:	f000 faa2 	bl	8003b74 <prvIsQueueFull>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d018      	beq.n	8003668 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	3310      	adds	r3, #16
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f000 ff44 	bl	80044cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003646:	f000 fa2d 	bl	8003aa4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800364a:	f000 fd73 	bl	8004134 <xTaskResumeAll>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	f47f af7c 	bne.w	800354e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003656:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <xQueueGenericSend+0x1f8>)
 8003658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	e772      	b.n	800354e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800366a:	f000 fa1b 	bl	8003aa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800366e:	f000 fd61 	bl	8004134 <xTaskResumeAll>
 8003672:	e76c      	b.n	800354e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003676:	f000 fa15 	bl	8003aa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800367a:	f000 fd5b 	bl	8004134 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800367e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003680:	4618      	mov	r0, r3
 8003682:	3738      	adds	r7, #56	; 0x38
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	e000ed04 	.word	0xe000ed04

0800368c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b090      	sub	sp, #64	; 0x40
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10a      	bne.n	80036ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036b6:	bf00      	nop
 80036b8:	e7fe      	b.n	80036b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d103      	bne.n	80036c8 <xQueueGenericSendFromISR+0x3c>
 80036c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <xQueueGenericSendFromISR+0x40>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <xQueueGenericSendFromISR+0x42>
 80036cc:	2300      	movs	r3, #0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036e4:	bf00      	nop
 80036e6:	e7fe      	b.n	80036e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d103      	bne.n	80036f6 <xQueueGenericSendFromISR+0x6a>
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <xQueueGenericSendFromISR+0x6e>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <xQueueGenericSendFromISR+0x70>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	623b      	str	r3, [r7, #32]
}
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003716:	f001 ff27 	bl	8005568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800371a:	f3ef 8211 	mrs	r2, BASEPRI
 800371e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	61fa      	str	r2, [r7, #28]
 8003730:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003732:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003734:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	429a      	cmp	r2, r3
 8003740:	d302      	bcc.n	8003748 <xQueueGenericSendFromISR+0xbc>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d12f      	bne.n	80037a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800374e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800375e:	f000 f911 	bl	8003984 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003762:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376a:	d112      	bne.n	8003792 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800376c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	2b00      	cmp	r3, #0
 8003772:	d016      	beq.n	80037a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003776:	3324      	adds	r3, #36	; 0x24
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fef7 	bl	800456c <xTaskRemoveFromEventList>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00e      	beq.n	80037a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	e007      	b.n	80037a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003792:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003796:	3301      	adds	r3, #1
 8003798:	b2db      	uxtb	r3, r3
 800379a:	b25a      	sxtb	r2, r3
 800379c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80037a2:	2301      	movs	r3, #1
 80037a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80037a6:	e001      	b.n	80037ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3740      	adds	r7, #64	; 0x40
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08c      	sub	sp, #48	; 0x30
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80037d0:	2300      	movs	r3, #0
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <xQueueReceive+0x30>
	__asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	623b      	str	r3, [r7, #32]
}
 80037f0:	bf00      	nop
 80037f2:	e7fe      	b.n	80037f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <xQueueReceive+0x3e>
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <xQueueReceive+0x42>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <xQueueReceive+0x44>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <xQueueReceive+0x5e>
	__asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	61fb      	str	r3, [r7, #28]
}
 800381e:	bf00      	nop
 8003820:	e7fe      	b.n	8003820 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003822:	f001 f865 	bl	80048f0 <xTaskGetSchedulerState>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <xQueueReceive+0x6e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <xQueueReceive+0x72>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <xQueueReceive+0x74>
 8003836:	2300      	movs	r3, #0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <xQueueReceive+0x8e>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	61bb      	str	r3, [r7, #24]
}
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003852:	f001 fda7 	bl	80053a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	2b00      	cmp	r3, #0
 8003860:	d01f      	beq.n	80038a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003866:	f000 f8f7 	bl	8003a58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	1e5a      	subs	r2, r3, #1
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00f      	beq.n	800389a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387c:	3310      	adds	r3, #16
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fe74 	bl	800456c <xTaskRemoveFromEventList>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800388a:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <xQueueReceive+0x1bc>)
 800388c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800389a:	f001 fdb3 	bl	8005404 <vPortExitCritical>
				return pdPASS;
 800389e:	2301      	movs	r3, #1
 80038a0:	e069      	b.n	8003976 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d103      	bne.n	80038b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038a8:	f001 fdac 	bl	8005404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80038ac:	2300      	movs	r3, #0
 80038ae:	e062      	b.n	8003976 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038b6:	f107 0310 	add.w	r3, r7, #16
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 feba 	bl	8004634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038c0:	2301      	movs	r3, #1
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038c4:	f001 fd9e 	bl	8005404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038c8:	f000 fc26 	bl	8004118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038cc:	f001 fd6a 	bl	80053a4 <vPortEnterCritical>
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038d6:	b25b      	sxtb	r3, r3
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d103      	bne.n	80038e6 <xQueueReceive+0x122>
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d103      	bne.n	80038fc <xQueueReceive+0x138>
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038fc:	f001 fd82 	bl	8005404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003900:	1d3a      	adds	r2, r7, #4
 8003902:	f107 0310 	add.w	r3, r7, #16
 8003906:	4611      	mov	r1, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fea9 	bl	8004660 <xTaskCheckForTimeOut>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d123      	bne.n	800395c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003916:	f000 f917 	bl	8003b48 <prvIsQueueEmpty>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d017      	beq.n	8003950 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	3324      	adds	r3, #36	; 0x24
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	4611      	mov	r1, r2
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fdcf 	bl	80044cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800392e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003930:	f000 f8b8 	bl	8003aa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003934:	f000 fbfe 	bl	8004134 <xTaskResumeAll>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d189      	bne.n	8003852 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <xQueueReceive+0x1bc>)
 8003940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	e780      	b.n	8003852 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003952:	f000 f8a7 	bl	8003aa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003956:	f000 fbed 	bl	8004134 <xTaskResumeAll>
 800395a:	e77a      	b.n	8003852 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800395c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800395e:	f000 f8a1 	bl	8003aa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003962:	f000 fbe7 	bl	8004134 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003968:	f000 f8ee 	bl	8003b48 <prvIsQueueEmpty>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	f43f af6f 	beq.w	8003852 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003974:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003976:	4618      	mov	r0, r3
 8003978:	3730      	adds	r7, #48	; 0x30
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	e000ed04 	.word	0xe000ed04

08003984 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d14d      	bne.n	8003a46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 ffbc 	bl	800492c <xTaskPriorityDisinherit>
 80039b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	609a      	str	r2, [r3, #8]
 80039bc:	e043      	b.n	8003a46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d119      	bne.n	80039f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6858      	ldr	r0, [r3, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	461a      	mov	r2, r3
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	f002 f81a 	bl	8005a08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	441a      	add	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d32b      	bcc.n	8003a46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	e026      	b.n	8003a46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	68d8      	ldr	r0, [r3, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	461a      	mov	r2, r3
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	f002 f800 	bl	8005a08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	425b      	negs	r3, r3
 8003a12:	441a      	add	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d207      	bcs.n	8003a34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	425b      	negs	r3, r3
 8003a2e:	441a      	add	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d105      	bne.n	8003a46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a4e:	697b      	ldr	r3, [r7, #20]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d018      	beq.n	8003a9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	441a      	add	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d303      	bcc.n	8003a8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68d9      	ldr	r1, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	461a      	mov	r2, r3
 8003a96:	6838      	ldr	r0, [r7, #0]
 8003a98:	f001 ffb6 	bl	8005a08 <memcpy>
	}
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003aac:	f001 fc7a 	bl	80053a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ab6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ab8:	e011      	b.n	8003ade <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d012      	beq.n	8003ae8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3324      	adds	r3, #36	; 0x24
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fd50 	bl	800456c <xTaskRemoveFromEventList>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ad2:	f000 fe27 	bl	8004724 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	dce9      	bgt.n	8003aba <prvUnlockQueue+0x16>
 8003ae6:	e000      	b.n	8003aea <prvUnlockQueue+0x46>
					break;
 8003ae8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	22ff      	movs	r2, #255	; 0xff
 8003aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003af2:	f001 fc87 	bl	8005404 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003af6:	f001 fc55 	bl	80053a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b02:	e011      	b.n	8003b28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d012      	beq.n	8003b32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3310      	adds	r3, #16
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fd2b 	bl	800456c <xTaskRemoveFromEventList>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b1c:	f000 fe02 	bl	8004724 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b20:	7bbb      	ldrb	r3, [r7, #14]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	dce9      	bgt.n	8003b04 <prvUnlockQueue+0x60>
 8003b30:	e000      	b.n	8003b34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	22ff      	movs	r2, #255	; 0xff
 8003b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003b3c:	f001 fc62 	bl	8005404 <vPortExitCritical>
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b50:	f001 fc28 	bl	80053a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d102      	bne.n	8003b62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e001      	b.n	8003b66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b66:	f001 fc4d 	bl	8005404 <vPortExitCritical>

	return xReturn;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b7c:	f001 fc12 	bl	80053a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d102      	bne.n	8003b92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e001      	b.n	8003b96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b96:	f001 fc35 	bl	8005404 <vPortExitCritical>

	return xReturn;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	e014      	b.n	8003bde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003bb4:	4a0f      	ldr	r2, [pc, #60]	; (8003bf4 <vQueueAddToRegistry+0x50>)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003bc0:	490c      	ldr	r1, [pc, #48]	; (8003bf4 <vQueueAddToRegistry+0x50>)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003bca:	4a0a      	ldr	r2, [pc, #40]	; (8003bf4 <vQueueAddToRegistry+0x50>)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003bd6:	e006      	b.n	8003be6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b07      	cmp	r3, #7
 8003be2:	d9e7      	bls.n	8003bb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003be4:	bf00      	nop
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20000958 	.word	0x20000958

08003bf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c08:	f001 fbcc 	bl	80053a4 <vPortEnterCritical>
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c12:	b25b      	sxtb	r3, r3
 8003c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c18:	d103      	bne.n	8003c22 <vQueueWaitForMessageRestricted+0x2a>
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c28:	b25b      	sxtb	r3, r3
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2e:	d103      	bne.n	8003c38 <vQueueWaitForMessageRestricted+0x40>
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c38:	f001 fbe4 	bl	8005404 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d106      	bne.n	8003c52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	3324      	adds	r3, #36	; 0x24
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fc61 	bl	8004514 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c52:	6978      	ldr	r0, [r7, #20]
 8003c54:	f7ff ff26 	bl	8003aa4 <prvUnlockQueue>
	}
 8003c58:	bf00      	nop
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08e      	sub	sp, #56	; 0x38
 8003c64:	af04      	add	r7, sp, #16
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	623b      	str	r3, [r7, #32]
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	61fb      	str	r3, [r7, #28]
}
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ca6:	23bc      	movs	r3, #188	; 0xbc
 8003ca8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2bbc      	cmp	r3, #188	; 0xbc
 8003cae:	d00a      	beq.n	8003cc6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	61bb      	str	r3, [r7, #24]
}
 8003cc2:	bf00      	nop
 8003cc4:	e7fe      	b.n	8003cc4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003cc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d01e      	beq.n	8003d0c <xTaskCreateStatic+0xac>
 8003cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01b      	beq.n	8003d0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	9303      	str	r3, [sp, #12]
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	9302      	str	r3, [sp, #8]
 8003cee:	f107 0314 	add.w	r3, r7, #20
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f850 	bl	8003da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d06:	f000 f8f3 	bl	8003ef0 <prvAddNewTaskToReadyList>
 8003d0a:	e001      	b.n	8003d10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d10:	697b      	ldr	r3, [r7, #20]
	}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3728      	adds	r7, #40	; 0x28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b08c      	sub	sp, #48	; 0x30
 8003d1e:	af04      	add	r7, sp, #16
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	603b      	str	r3, [r7, #0]
 8003d26:	4613      	mov	r3, r2
 8003d28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f001 fc5a 	bl	80055e8 <pvPortMalloc>
 8003d34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00e      	beq.n	8003d5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d3c:	20bc      	movs	r0, #188	; 0xbc
 8003d3e:	f001 fc53 	bl	80055e8 <pvPortMalloc>
 8003d42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d50:	e005      	b.n	8003d5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d52:	6978      	ldr	r0, [r7, #20]
 8003d54:	f001 fd14 	bl	8005780 <vPortFree>
 8003d58:	e001      	b.n	8003d5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d017      	beq.n	8003d94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d6c:	88fa      	ldrh	r2, [r7, #6]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	9303      	str	r3, [sp, #12]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	9302      	str	r3, [sp, #8]
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f80e 	bl	8003da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d88:	69f8      	ldr	r0, [r7, #28]
 8003d8a:	f000 f8b1 	bl	8003ef0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	e002      	b.n	8003d9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295
 8003d98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d9a:	69bb      	ldr	r3, [r7, #24]
	}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3720      	adds	r7, #32
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	461a      	mov	r2, r3
 8003dbc:	21a5      	movs	r1, #165	; 0xa5
 8003dbe:	f001 fe31 	bl	8005a24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f023 0307 	bic.w	r3, r3, #7
 8003dda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <prvInitialiseNewTask+0x58>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	617b      	str	r3, [r7, #20]
}
 8003df8:	bf00      	nop
 8003dfa:	e7fe      	b.n	8003dfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01f      	beq.n	8003e42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	e012      	b.n	8003e2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	7819      	ldrb	r1, [r3, #0]
 8003e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	4413      	add	r3, r2
 8003e16:	3334      	adds	r3, #52	; 0x34
 8003e18:	460a      	mov	r2, r1
 8003e1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	4413      	add	r3, r2
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d006      	beq.n	8003e36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2b0f      	cmp	r3, #15
 8003e32:	d9e9      	bls.n	8003e08 <prvInitialiseNewTask+0x64>
 8003e34:	e000      	b.n	8003e38 <prvInitialiseNewTask+0x94>
			{
				break;
 8003e36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e40:	e003      	b.n	8003e4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	2b37      	cmp	r3, #55	; 0x37
 8003e4e:	d901      	bls.n	8003e54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e50:	2337      	movs	r3, #55	; 0x37
 8003e52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	2200      	movs	r2, #0
 8003e64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff f978 	bl	8003160 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	3318      	adds	r3, #24
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff f973 	bl	8003160 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	3354      	adds	r3, #84	; 0x54
 8003ea4:	2260      	movs	r2, #96	; 0x60
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 fdbb 	bl	8005a24 <memset>
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	4a0c      	ldr	r2, [pc, #48]	; (8003ee4 <prvInitialiseNewTask+0x140>)
 8003eb2:	659a      	str	r2, [r3, #88]	; 0x58
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	4a0c      	ldr	r2, [pc, #48]	; (8003ee8 <prvInitialiseNewTask+0x144>)
 8003eb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	4a0b      	ldr	r2, [pc, #44]	; (8003eec <prvInitialiseNewTask+0x148>)
 8003ebe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	69b8      	ldr	r0, [r7, #24]
 8003ec6:	f001 f941 	bl	800514c <pxPortInitialiseStack>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003edc:	bf00      	nop
 8003ede:	3720      	adds	r7, #32
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	08005ce4 	.word	0x08005ce4
 8003ee8:	08005d04 	.word	0x08005d04
 8003eec:	08005cc4 	.word	0x08005cc4

08003ef0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ef8:	f001 fa54 	bl	80053a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003efc:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <prvAddNewTaskToReadyList+0xc4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3301      	adds	r3, #1
 8003f02:	4a2c      	ldr	r2, [pc, #176]	; (8003fb4 <prvAddNewTaskToReadyList+0xc4>)
 8003f04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f06:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <prvAddNewTaskToReadyList+0xc8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f0e:	4a2a      	ldr	r2, [pc, #168]	; (8003fb8 <prvAddNewTaskToReadyList+0xc8>)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f14:	4b27      	ldr	r3, [pc, #156]	; (8003fb4 <prvAddNewTaskToReadyList+0xc4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d110      	bne.n	8003f3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f1c:	f000 fc26 	bl	800476c <prvInitialiseTaskLists>
 8003f20:	e00d      	b.n	8003f3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f22:	4b26      	ldr	r3, [pc, #152]	; (8003fbc <prvAddNewTaskToReadyList+0xcc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f2a:	4b23      	ldr	r3, [pc, #140]	; (8003fb8 <prvAddNewTaskToReadyList+0xc8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d802      	bhi.n	8003f3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f38:	4a1f      	ldr	r2, [pc, #124]	; (8003fb8 <prvAddNewTaskToReadyList+0xc8>)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f3e:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <prvAddNewTaskToReadyList+0xd0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3301      	adds	r3, #1
 8003f44:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <prvAddNewTaskToReadyList+0xd0>)
 8003f46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f48:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <prvAddNewTaskToReadyList+0xd0>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f54:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <prvAddNewTaskToReadyList+0xd4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d903      	bls.n	8003f64 <prvAddNewTaskToReadyList+0x74>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	4a18      	ldr	r2, [pc, #96]	; (8003fc4 <prvAddNewTaskToReadyList+0xd4>)
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4a15      	ldr	r2, [pc, #84]	; (8003fc8 <prvAddNewTaskToReadyList+0xd8>)
 8003f72:	441a      	add	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	f7ff f8fd 	bl	800317a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f80:	f001 fa40 	bl	8005404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f84:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <prvAddNewTaskToReadyList+0xcc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <prvAddNewTaskToReadyList+0xc8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d207      	bcs.n	8003faa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <prvAddNewTaskToReadyList+0xdc>)
 8003f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000e6c 	.word	0x20000e6c
 8003fb8:	20000998 	.word	0x20000998
 8003fbc:	20000e78 	.word	0x20000e78
 8003fc0:	20000e88 	.word	0x20000e88
 8003fc4:	20000e74 	.word	0x20000e74
 8003fc8:	2000099c 	.word	0x2000099c
 8003fcc:	e000ed04 	.word	0xe000ed04

08003fd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d017      	beq.n	8004012 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fe2:	4b13      	ldr	r3, [pc, #76]	; (8004030 <vTaskDelay+0x60>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <vTaskDelay+0x30>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	60bb      	str	r3, [r7, #8]
}
 8003ffc:	bf00      	nop
 8003ffe:	e7fe      	b.n	8003ffe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004000:	f000 f88a 	bl	8004118 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004004:	2100      	movs	r1, #0
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fcfe 	bl	8004a08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800400c:	f000 f892 	bl	8004134 <xTaskResumeAll>
 8004010:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <vTaskDelay+0x64>)
 800401a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000e94 	.word	0x20000e94
 8004034:	e000ed04 	.word	0xe000ed04

08004038 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	; 0x28
 800403c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004042:	2300      	movs	r3, #0
 8004044:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004046:	463a      	mov	r2, r7
 8004048:	1d39      	adds	r1, r7, #4
 800404a:	f107 0308 	add.w	r3, r7, #8
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff f832 	bl	80030b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004054:	6839      	ldr	r1, [r7, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	9202      	str	r2, [sp, #8]
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	2300      	movs	r3, #0
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	2300      	movs	r3, #0
 8004064:	460a      	mov	r2, r1
 8004066:	4924      	ldr	r1, [pc, #144]	; (80040f8 <vTaskStartScheduler+0xc0>)
 8004068:	4824      	ldr	r0, [pc, #144]	; (80040fc <vTaskStartScheduler+0xc4>)
 800406a:	f7ff fdf9 	bl	8003c60 <xTaskCreateStatic>
 800406e:	4603      	mov	r3, r0
 8004070:	4a23      	ldr	r2, [pc, #140]	; (8004100 <vTaskStartScheduler+0xc8>)
 8004072:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004074:	4b22      	ldr	r3, [pc, #136]	; (8004100 <vTaskStartScheduler+0xc8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800407c:	2301      	movs	r3, #1
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	e001      	b.n	8004086 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d102      	bne.n	8004092 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800408c:	f000 fd10 	bl	8004ab0 <xTimerCreateTimerTask>
 8004090:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d11b      	bne.n	80040d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	613b      	str	r3, [r7, #16]
}
 80040aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80040ac:	4b15      	ldr	r3, [pc, #84]	; (8004104 <vTaskStartScheduler+0xcc>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3354      	adds	r3, #84	; 0x54
 80040b2:	4a15      	ldr	r2, [pc, #84]	; (8004108 <vTaskStartScheduler+0xd0>)
 80040b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <vTaskStartScheduler+0xd4>)
 80040b8:	f04f 32ff 	mov.w	r2, #4294967295
 80040bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040be:	4b14      	ldr	r3, [pc, #80]	; (8004110 <vTaskStartScheduler+0xd8>)
 80040c0:	2201      	movs	r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040c4:	4b13      	ldr	r3, [pc, #76]	; (8004114 <vTaskStartScheduler+0xdc>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040ca:	f001 f8c9 	bl	8005260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040ce:	e00e      	b.n	80040ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d10a      	bne.n	80040ee <vTaskStartScheduler+0xb6>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	60fb      	str	r3, [r7, #12]
}
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <vTaskStartScheduler+0xb4>
}
 80040ee:	bf00      	nop
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	08005c04 	.word	0x08005c04
 80040fc:	0800473d 	.word	0x0800473d
 8004100:	20000e90 	.word	0x20000e90
 8004104:	20000998 	.word	0x20000998
 8004108:	20000014 	.word	0x20000014
 800410c:	20000e8c 	.word	0x20000e8c
 8004110:	20000e78 	.word	0x20000e78
 8004114:	20000e70 	.word	0x20000e70

08004118 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800411c:	4b04      	ldr	r3, [pc, #16]	; (8004130 <vTaskSuspendAll+0x18>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3301      	adds	r3, #1
 8004122:	4a03      	ldr	r2, [pc, #12]	; (8004130 <vTaskSuspendAll+0x18>)
 8004124:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	20000e94 	.word	0x20000e94

08004134 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004142:	4b42      	ldr	r3, [pc, #264]	; (800424c <xTaskResumeAll+0x118>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <xTaskResumeAll+0x2c>
	__asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	603b      	str	r3, [r7, #0]
}
 800415c:	bf00      	nop
 800415e:	e7fe      	b.n	800415e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004160:	f001 f920 	bl	80053a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004164:	4b39      	ldr	r3, [pc, #228]	; (800424c <xTaskResumeAll+0x118>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3b01      	subs	r3, #1
 800416a:	4a38      	ldr	r2, [pc, #224]	; (800424c <xTaskResumeAll+0x118>)
 800416c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800416e:	4b37      	ldr	r3, [pc, #220]	; (800424c <xTaskResumeAll+0x118>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d162      	bne.n	800423c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004176:	4b36      	ldr	r3, [pc, #216]	; (8004250 <xTaskResumeAll+0x11c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d05e      	beq.n	800423c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800417e:	e02f      	b.n	80041e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004180:	4b34      	ldr	r3, [pc, #208]	; (8004254 <xTaskResumeAll+0x120>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3318      	adds	r3, #24
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff f851 	bl	8003234 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3304      	adds	r3, #4
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff f84c 	bl	8003234 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a0:	4b2d      	ldr	r3, [pc, #180]	; (8004258 <xTaskResumeAll+0x124>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d903      	bls.n	80041b0 <xTaskResumeAll+0x7c>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	4a2a      	ldr	r2, [pc, #168]	; (8004258 <xTaskResumeAll+0x124>)
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4a27      	ldr	r2, [pc, #156]	; (800425c <xTaskResumeAll+0x128>)
 80041be:	441a      	add	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f7fe ffd7 	bl	800317a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d0:	4b23      	ldr	r3, [pc, #140]	; (8004260 <xTaskResumeAll+0x12c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d302      	bcc.n	80041e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80041da:	4b22      	ldr	r3, [pc, #136]	; (8004264 <xTaskResumeAll+0x130>)
 80041dc:	2201      	movs	r2, #1
 80041de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041e0:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <xTaskResumeAll+0x120>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1cb      	bne.n	8004180 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041ee:	f000 fb5f 	bl	80048b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041f2:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <xTaskResumeAll+0x134>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d010      	beq.n	8004220 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041fe:	f000 f847 	bl	8004290 <xTaskIncrementTick>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004208:	4b16      	ldr	r3, [pc, #88]	; (8004264 <xTaskResumeAll+0x130>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3b01      	subs	r3, #1
 8004212:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f1      	bne.n	80041fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800421a:	4b13      	ldr	r3, [pc, #76]	; (8004268 <xTaskResumeAll+0x134>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004220:	4b10      	ldr	r3, [pc, #64]	; (8004264 <xTaskResumeAll+0x130>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004228:	2301      	movs	r3, #1
 800422a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800422c:	4b0f      	ldr	r3, [pc, #60]	; (800426c <xTaskResumeAll+0x138>)
 800422e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800423c:	f001 f8e2 	bl	8005404 <vPortExitCritical>

	return xAlreadyYielded;
 8004240:	68bb      	ldr	r3, [r7, #8]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000e94 	.word	0x20000e94
 8004250:	20000e6c 	.word	0x20000e6c
 8004254:	20000e2c 	.word	0x20000e2c
 8004258:	20000e74 	.word	0x20000e74
 800425c:	2000099c 	.word	0x2000099c
 8004260:	20000998 	.word	0x20000998
 8004264:	20000e80 	.word	0x20000e80
 8004268:	20000e7c 	.word	0x20000e7c
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <xTaskGetTickCount+0x1c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800427c:	687b      	ldr	r3, [r7, #4]
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000e70 	.word	0x20000e70

08004290 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800429a:	4b4f      	ldr	r3, [pc, #316]	; (80043d8 <xTaskIncrementTick+0x148>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f040 808f 	bne.w	80043c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042a4:	4b4d      	ldr	r3, [pc, #308]	; (80043dc <xTaskIncrementTick+0x14c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3301      	adds	r3, #1
 80042aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042ac:	4a4b      	ldr	r2, [pc, #300]	; (80043dc <xTaskIncrementTick+0x14c>)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d120      	bne.n	80042fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80042b8:	4b49      	ldr	r3, [pc, #292]	; (80043e0 <xTaskIncrementTick+0x150>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	603b      	str	r3, [r7, #0]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <xTaskIncrementTick+0x46>
 80042d8:	4b41      	ldr	r3, [pc, #260]	; (80043e0 <xTaskIncrementTick+0x150>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	4b41      	ldr	r3, [pc, #260]	; (80043e4 <xTaskIncrementTick+0x154>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a3f      	ldr	r2, [pc, #252]	; (80043e0 <xTaskIncrementTick+0x150>)
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4a3f      	ldr	r2, [pc, #252]	; (80043e4 <xTaskIncrementTick+0x154>)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	4b3e      	ldr	r3, [pc, #248]	; (80043e8 <xTaskIncrementTick+0x158>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3301      	adds	r3, #1
 80042f2:	4a3d      	ldr	r2, [pc, #244]	; (80043e8 <xTaskIncrementTick+0x158>)
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	f000 fadb 	bl	80048b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042fa:	4b3c      	ldr	r3, [pc, #240]	; (80043ec <xTaskIncrementTick+0x15c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	429a      	cmp	r2, r3
 8004302:	d349      	bcc.n	8004398 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004304:	4b36      	ldr	r3, [pc, #216]	; (80043e0 <xTaskIncrementTick+0x150>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d104      	bne.n	8004318 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800430e:	4b37      	ldr	r3, [pc, #220]	; (80043ec <xTaskIncrementTick+0x15c>)
 8004310:	f04f 32ff 	mov.w	r2, #4294967295
 8004314:	601a      	str	r2, [r3, #0]
					break;
 8004316:	e03f      	b.n	8004398 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004318:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <xTaskIncrementTick+0x150>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	429a      	cmp	r2, r3
 800432e:	d203      	bcs.n	8004338 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004330:	4a2e      	ldr	r2, [pc, #184]	; (80043ec <xTaskIncrementTick+0x15c>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004336:	e02f      	b.n	8004398 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	3304      	adds	r3, #4
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe ff79 	bl	8003234 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	3318      	adds	r3, #24
 800434e:	4618      	mov	r0, r3
 8004350:	f7fe ff70 	bl	8003234 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <xTaskIncrementTick+0x160>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d903      	bls.n	8004368 <xTaskIncrementTick+0xd8>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	4a22      	ldr	r2, [pc, #136]	; (80043f0 <xTaskIncrementTick+0x160>)
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <xTaskIncrementTick+0x164>)
 8004376:	441a      	add	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	3304      	adds	r3, #4
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	f7fe fefb 	bl	800317a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <xTaskIncrementTick+0x168>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	429a      	cmp	r2, r3
 8004390:	d3b8      	bcc.n	8004304 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004392:	2301      	movs	r3, #1
 8004394:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004396:	e7b5      	b.n	8004304 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004398:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <xTaskIncrementTick+0x168>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439e:	4915      	ldr	r1, [pc, #84]	; (80043f4 <xTaskIncrementTick+0x164>)
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d901      	bls.n	80043b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80043b0:	2301      	movs	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80043b4:	4b11      	ldr	r3, [pc, #68]	; (80043fc <xTaskIncrementTick+0x16c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80043bc:	2301      	movs	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e004      	b.n	80043cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043c2:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <xTaskIncrementTick+0x170>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3301      	adds	r3, #1
 80043c8:	4a0d      	ldr	r2, [pc, #52]	; (8004400 <xTaskIncrementTick+0x170>)
 80043ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043cc:	697b      	ldr	r3, [r7, #20]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000e94 	.word	0x20000e94
 80043dc:	20000e70 	.word	0x20000e70
 80043e0:	20000e24 	.word	0x20000e24
 80043e4:	20000e28 	.word	0x20000e28
 80043e8:	20000e84 	.word	0x20000e84
 80043ec:	20000e8c 	.word	0x20000e8c
 80043f0:	20000e74 	.word	0x20000e74
 80043f4:	2000099c 	.word	0x2000099c
 80043f8:	20000998 	.word	0x20000998
 80043fc:	20000e80 	.word	0x20000e80
 8004400:	20000e7c 	.word	0x20000e7c

08004404 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800440a:	4b2a      	ldr	r3, [pc, #168]	; (80044b4 <vTaskSwitchContext+0xb0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004412:	4b29      	ldr	r3, [pc, #164]	; (80044b8 <vTaskSwitchContext+0xb4>)
 8004414:	2201      	movs	r2, #1
 8004416:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004418:	e046      	b.n	80044a8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800441a:	4b27      	ldr	r3, [pc, #156]	; (80044b8 <vTaskSwitchContext+0xb4>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004420:	4b26      	ldr	r3, [pc, #152]	; (80044bc <vTaskSwitchContext+0xb8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	e010      	b.n	800444a <vTaskSwitchContext+0x46>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10a      	bne.n	8004444 <vTaskSwitchContext+0x40>
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	607b      	str	r3, [r7, #4]
}
 8004440:	bf00      	nop
 8004442:	e7fe      	b.n	8004442 <vTaskSwitchContext+0x3e>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3b01      	subs	r3, #1
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	491d      	ldr	r1, [pc, #116]	; (80044c0 <vTaskSwitchContext+0xbc>)
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0e4      	beq.n	8004428 <vTaskSwitchContext+0x24>
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4a15      	ldr	r2, [pc, #84]	; (80044c0 <vTaskSwitchContext+0xbc>)
 800446a:	4413      	add	r3, r2
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	3308      	adds	r3, #8
 8004480:	429a      	cmp	r2, r3
 8004482:	d104      	bne.n	800448e <vTaskSwitchContext+0x8a>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <vTaskSwitchContext+0xc0>)
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	4a08      	ldr	r2, [pc, #32]	; (80044bc <vTaskSwitchContext+0xb8>)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <vTaskSwitchContext+0xc0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3354      	adds	r3, #84	; 0x54
 80044a4:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <vTaskSwitchContext+0xc4>)
 80044a6:	6013      	str	r3, [r2, #0]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	20000e94 	.word	0x20000e94
 80044b8:	20000e80 	.word	0x20000e80
 80044bc:	20000e74 	.word	0x20000e74
 80044c0:	2000099c 	.word	0x2000099c
 80044c4:	20000998 	.word	0x20000998
 80044c8:	20000014 	.word	0x20000014

080044cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	60fb      	str	r3, [r7, #12]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044f2:	4b07      	ldr	r3, [pc, #28]	; (8004510 <vTaskPlaceOnEventList+0x44>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3318      	adds	r3, #24
 80044f8:	4619      	mov	r1, r3
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fe fe61 	bl	80031c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004500:	2101      	movs	r1, #1
 8004502:	6838      	ldr	r0, [r7, #0]
 8004504:	f000 fa80 	bl	8004a08 <prvAddCurrentTaskToDelayedList>
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20000998 	.word	0x20000998

08004514 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10a      	bne.n	800453c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	617b      	str	r3, [r7, #20]
}
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <vTaskPlaceOnEventListRestricted+0x54>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3318      	adds	r3, #24
 8004542:	4619      	mov	r1, r3
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7fe fe18 	bl	800317a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004550:	f04f 33ff 	mov.w	r3, #4294967295
 8004554:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	68b8      	ldr	r0, [r7, #8]
 800455a:	f000 fa55 	bl	8004a08 <prvAddCurrentTaskToDelayedList>
	}
 800455e:	bf00      	nop
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000998 	.word	0x20000998

0800456c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	60fb      	str	r3, [r7, #12]
}
 8004594:	bf00      	nop
 8004596:	e7fe      	b.n	8004596 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	3318      	adds	r3, #24
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe fe49 	bl	8003234 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a2:	4b1e      	ldr	r3, [pc, #120]	; (800461c <xTaskRemoveFromEventList+0xb0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11d      	bne.n	80045e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe fe40 	bl	8003234 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4b19      	ldr	r3, [pc, #100]	; (8004620 <xTaskRemoveFromEventList+0xb4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d903      	bls.n	80045c8 <xTaskRemoveFromEventList+0x5c>
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	4a16      	ldr	r2, [pc, #88]	; (8004620 <xTaskRemoveFromEventList+0xb4>)
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4a13      	ldr	r2, [pc, #76]	; (8004624 <xTaskRemoveFromEventList+0xb8>)
 80045d6:	441a      	add	r2, r3
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f7fe fdcb 	bl	800317a <vListInsertEnd>
 80045e4:	e005      	b.n	80045f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	3318      	adds	r3, #24
 80045ea:	4619      	mov	r1, r3
 80045ec:	480e      	ldr	r0, [pc, #56]	; (8004628 <xTaskRemoveFromEventList+0xbc>)
 80045ee:	f7fe fdc4 	bl	800317a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <xTaskRemoveFromEventList+0xc0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d905      	bls.n	800460c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004600:	2301      	movs	r3, #1
 8004602:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004604:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <xTaskRemoveFromEventList+0xc4>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e001      	b.n	8004610 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004610:	697b      	ldr	r3, [r7, #20]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000e94 	.word	0x20000e94
 8004620:	20000e74 	.word	0x20000e74
 8004624:	2000099c 	.word	0x2000099c
 8004628:	20000e2c 	.word	0x20000e2c
 800462c:	20000998 	.word	0x20000998
 8004630:	20000e80 	.word	0x20000e80

08004634 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <vTaskInternalSetTimeOutState+0x24>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <vTaskInternalSetTimeOutState+0x28>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	605a      	str	r2, [r3, #4]
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	20000e84 	.word	0x20000e84
 800465c:	20000e70 	.word	0x20000e70

08004660 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	613b      	str	r3, [r7, #16]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	60fb      	str	r3, [r7, #12]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80046a2:	f000 fe7f 	bl	80053a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046a6:	4b1d      	ldr	r3, [pc, #116]	; (800471c <xTaskCheckForTimeOut+0xbc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d102      	bne.n	80046c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	e023      	b.n	800470e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <xTaskCheckForTimeOut+0xc0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d007      	beq.n	80046e2 <xTaskCheckForTimeOut+0x82>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d302      	bcc.n	80046e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046dc:	2301      	movs	r3, #1
 80046de:	61fb      	str	r3, [r7, #28]
 80046e0:	e015      	b.n	800470e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d20b      	bcs.n	8004704 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad2      	subs	r2, r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff ff9b 	bl	8004634 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	e004      	b.n	800470e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800470a:	2301      	movs	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800470e:	f000 fe79 	bl	8005404 <vPortExitCritical>

	return xReturn;
 8004712:	69fb      	ldr	r3, [r7, #28]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000e70 	.word	0x20000e70
 8004720:	20000e84 	.word	0x20000e84

08004724 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004728:	4b03      	ldr	r3, [pc, #12]	; (8004738 <vTaskMissedYield+0x14>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]
}
 800472e:	bf00      	nop
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	20000e80 	.word	0x20000e80

0800473c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004744:	f000 f852 	bl	80047ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <prvIdleTask+0x28>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d9f9      	bls.n	8004744 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <prvIdleTask+0x2c>)
 8004752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004760:	e7f0      	b.n	8004744 <prvIdleTask+0x8>
 8004762:	bf00      	nop
 8004764:	2000099c 	.word	0x2000099c
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004772:	2300      	movs	r3, #0
 8004774:	607b      	str	r3, [r7, #4]
 8004776:	e00c      	b.n	8004792 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4a12      	ldr	r2, [pc, #72]	; (80047cc <prvInitialiseTaskLists+0x60>)
 8004784:	4413      	add	r3, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fcca 	bl	8003120 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3301      	adds	r3, #1
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b37      	cmp	r3, #55	; 0x37
 8004796:	d9ef      	bls.n	8004778 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004798:	480d      	ldr	r0, [pc, #52]	; (80047d0 <prvInitialiseTaskLists+0x64>)
 800479a:	f7fe fcc1 	bl	8003120 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800479e:	480d      	ldr	r0, [pc, #52]	; (80047d4 <prvInitialiseTaskLists+0x68>)
 80047a0:	f7fe fcbe 	bl	8003120 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047a4:	480c      	ldr	r0, [pc, #48]	; (80047d8 <prvInitialiseTaskLists+0x6c>)
 80047a6:	f7fe fcbb 	bl	8003120 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047aa:	480c      	ldr	r0, [pc, #48]	; (80047dc <prvInitialiseTaskLists+0x70>)
 80047ac:	f7fe fcb8 	bl	8003120 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047b0:	480b      	ldr	r0, [pc, #44]	; (80047e0 <prvInitialiseTaskLists+0x74>)
 80047b2:	f7fe fcb5 	bl	8003120 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047b6:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <prvInitialiseTaskLists+0x78>)
 80047b8:	4a05      	ldr	r2, [pc, #20]	; (80047d0 <prvInitialiseTaskLists+0x64>)
 80047ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <prvInitialiseTaskLists+0x7c>)
 80047be:	4a05      	ldr	r2, [pc, #20]	; (80047d4 <prvInitialiseTaskLists+0x68>)
 80047c0:	601a      	str	r2, [r3, #0]
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	2000099c 	.word	0x2000099c
 80047d0:	20000dfc 	.word	0x20000dfc
 80047d4:	20000e10 	.word	0x20000e10
 80047d8:	20000e2c 	.word	0x20000e2c
 80047dc:	20000e40 	.word	0x20000e40
 80047e0:	20000e58 	.word	0x20000e58
 80047e4:	20000e24 	.word	0x20000e24
 80047e8:	20000e28 	.word	0x20000e28

080047ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047f2:	e019      	b.n	8004828 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047f4:	f000 fdd6 	bl	80053a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f8:	4b10      	ldr	r3, [pc, #64]	; (800483c <prvCheckTasksWaitingTermination+0x50>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3304      	adds	r3, #4
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe fd15 	bl	8003234 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800480a:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <prvCheckTasksWaitingTermination+0x54>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3b01      	subs	r3, #1
 8004810:	4a0b      	ldr	r2, [pc, #44]	; (8004840 <prvCheckTasksWaitingTermination+0x54>)
 8004812:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <prvCheckTasksWaitingTermination+0x58>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3b01      	subs	r3, #1
 800481a:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <prvCheckTasksWaitingTermination+0x58>)
 800481c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800481e:	f000 fdf1 	bl	8005404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f810 	bl	8004848 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004828:	4b06      	ldr	r3, [pc, #24]	; (8004844 <prvCheckTasksWaitingTermination+0x58>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e1      	bne.n	80047f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000e40 	.word	0x20000e40
 8004840:	20000e6c 	.word	0x20000e6c
 8004844:	20000e54 	.word	0x20000e54

08004848 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3354      	adds	r3, #84	; 0x54
 8004854:	4618      	mov	r0, r3
 8004856:	f001 f8fb 	bl	8005a50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004860:	2b00      	cmp	r3, #0
 8004862:	d108      	bne.n	8004876 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	4618      	mov	r0, r3
 800486a:	f000 ff89 	bl	8005780 <vPortFree>
				vPortFree( pxTCB );
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 ff86 	bl	8005780 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004874:	e018      	b.n	80048a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800487c:	2b01      	cmp	r3, #1
 800487e:	d103      	bne.n	8004888 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 ff7d 	bl	8005780 <vPortFree>
	}
 8004886:	e00f      	b.n	80048a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800488e:	2b02      	cmp	r3, #2
 8004890:	d00a      	beq.n	80048a8 <prvDeleteTCB+0x60>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	60fb      	str	r3, [r7, #12]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <prvDeleteTCB+0x5e>
	}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048b6:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <prvResetNextTaskUnblockTime+0x38>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d104      	bne.n	80048ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048c0:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <prvResetNextTaskUnblockTime+0x3c>)
 80048c2:	f04f 32ff 	mov.w	r2, #4294967295
 80048c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048c8:	e008      	b.n	80048dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ca:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <prvResetNextTaskUnblockTime+0x38>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4a04      	ldr	r2, [pc, #16]	; (80048ec <prvResetNextTaskUnblockTime+0x3c>)
 80048da:	6013      	str	r3, [r2, #0]
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	20000e24 	.word	0x20000e24
 80048ec:	20000e8c 	.word	0x20000e8c

080048f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048f6:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <xTaskGetSchedulerState+0x34>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d102      	bne.n	8004904 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048fe:	2301      	movs	r3, #1
 8004900:	607b      	str	r3, [r7, #4]
 8004902:	e008      	b.n	8004916 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004904:	4b08      	ldr	r3, [pc, #32]	; (8004928 <xTaskGetSchedulerState+0x38>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d102      	bne.n	8004912 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800490c:	2302      	movs	r3, #2
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	e001      	b.n	8004916 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004912:	2300      	movs	r3, #0
 8004914:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004916:	687b      	ldr	r3, [r7, #4]
	}
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	20000e78 	.word	0x20000e78
 8004928:	20000e94 	.word	0x20000e94

0800492c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d056      	beq.n	80049f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004942:	4b2e      	ldr	r3, [pc, #184]	; (80049fc <xTaskPriorityDisinherit+0xd0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	429a      	cmp	r2, r3
 800494a:	d00a      	beq.n	8004962 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	60fb      	str	r3, [r7, #12]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10a      	bne.n	8004980 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	60bb      	str	r3, [r7, #8]
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004984:	1e5a      	subs	r2, r3, #1
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004992:	429a      	cmp	r2, r3
 8004994:	d02c      	beq.n	80049f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499a:	2b00      	cmp	r3, #0
 800499c:	d128      	bne.n	80049f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	3304      	adds	r3, #4
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fe fc46 	bl	8003234 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <xTaskPriorityDisinherit+0xd4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d903      	bls.n	80049d0 <xTaskPriorityDisinherit+0xa4>
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	4a0c      	ldr	r2, [pc, #48]	; (8004a00 <xTaskPriorityDisinherit+0xd4>)
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4a09      	ldr	r2, [pc, #36]	; (8004a04 <xTaskPriorityDisinherit+0xd8>)
 80049de:	441a      	add	r2, r3
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f7fe fbc7 	bl	800317a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049ec:	2301      	movs	r3, #1
 80049ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049f0:	697b      	ldr	r3, [r7, #20]
	}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000998 	.word	0x20000998
 8004a00:	20000e74 	.word	0x20000e74
 8004a04:	2000099c 	.word	0x2000099c

08004a08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a12:	4b21      	ldr	r3, [pc, #132]	; (8004a98 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a18:	4b20      	ldr	r3, [pc, #128]	; (8004a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe fc08 	bl	8003234 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2a:	d10a      	bne.n	8004a42 <prvAddCurrentTaskToDelayedList+0x3a>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a32:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4819      	ldr	r0, [pc, #100]	; (8004aa0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a3c:	f7fe fb9d 	bl	800317a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a40:	e026      	b.n	8004a90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4413      	add	r3, r2
 8004a48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a4a:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d209      	bcs.n	8004a6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a5a:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4619      	mov	r1, r3
 8004a66:	4610      	mov	r0, r2
 8004a68:	f7fe fbab 	bl	80031c2 <vListInsert>
}
 8004a6c:	e010      	b.n	8004a90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3304      	adds	r3, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f7fe fba1 	bl	80031c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d202      	bcs.n	8004a90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a8a:	4a08      	ldr	r2, [pc, #32]	; (8004aac <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	6013      	str	r3, [r2, #0]
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20000e70 	.word	0x20000e70
 8004a9c:	20000998 	.word	0x20000998
 8004aa0:	20000e58 	.word	0x20000e58
 8004aa4:	20000e28 	.word	0x20000e28
 8004aa8:	20000e24 	.word	0x20000e24
 8004aac:	20000e8c 	.word	0x20000e8c

08004ab0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	; 0x28
 8004ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004aba:	f000 fb07 	bl	80050cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004abe:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <xTimerCreateTimerTask+0x80>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d021      	beq.n	8004b0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ace:	1d3a      	adds	r2, r7, #4
 8004ad0:	f107 0108 	add.w	r1, r7, #8
 8004ad4:	f107 030c 	add.w	r3, r7, #12
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fe fb07 	bl	80030ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	9202      	str	r2, [sp, #8]
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	2302      	movs	r3, #2
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	2300      	movs	r3, #0
 8004aee:	460a      	mov	r2, r1
 8004af0:	4910      	ldr	r1, [pc, #64]	; (8004b34 <xTimerCreateTimerTask+0x84>)
 8004af2:	4811      	ldr	r0, [pc, #68]	; (8004b38 <xTimerCreateTimerTask+0x88>)
 8004af4:	f7ff f8b4 	bl	8003c60 <xTaskCreateStatic>
 8004af8:	4603      	mov	r3, r0
 8004afa:	4a10      	ldr	r2, [pc, #64]	; (8004b3c <xTimerCreateTimerTask+0x8c>)
 8004afc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004afe:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <xTimerCreateTimerTask+0x8c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b06:	2301      	movs	r3, #1
 8004b08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	613b      	str	r3, [r7, #16]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b26:	697b      	ldr	r3, [r7, #20]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	20000ec8 	.word	0x20000ec8
 8004b34:	08005c0c 	.word	0x08005c0c
 8004b38:	08004c75 	.word	0x08004c75
 8004b3c:	20000ecc 	.word	0x20000ecc

08004b40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	; 0x28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	623b      	str	r3, [r7, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b6e:	4b1a      	ldr	r3, [pc, #104]	; (8004bd8 <xTimerGenericCommand+0x98>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d02a      	beq.n	8004bcc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	dc18      	bgt.n	8004bba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b88:	f7ff feb2 	bl	80048f0 <xTaskGetSchedulerState>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d109      	bne.n	8004ba6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b92:	4b11      	ldr	r3, [pc, #68]	; (8004bd8 <xTimerGenericCommand+0x98>)
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	f107 0110 	add.w	r1, r7, #16
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b9e:	f7fe fc77 	bl	8003490 <xQueueGenericSend>
 8004ba2:	6278      	str	r0, [r7, #36]	; 0x24
 8004ba4:	e012      	b.n	8004bcc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <xTimerGenericCommand+0x98>)
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	f107 0110 	add.w	r1, r7, #16
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f7fe fc6d 	bl	8003490 <xQueueGenericSend>
 8004bb6:	6278      	str	r0, [r7, #36]	; 0x24
 8004bb8:	e008      	b.n	8004bcc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004bba:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <xTimerGenericCommand+0x98>)
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	f107 0110 	add.w	r1, r7, #16
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	f7fe fd61 	bl	800368c <xQueueGenericSendFromISR>
 8004bca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3728      	adds	r7, #40	; 0x28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000ec8 	.word	0x20000ec8

08004bdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004be6:	4b22      	ldr	r3, [pc, #136]	; (8004c70 <prvProcessExpiredTimer+0x94>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe fb1d 	bl	8003234 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d022      	beq.n	8004c4e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	699a      	ldr	r2, [r3, #24]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	18d1      	adds	r1, r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	6978      	ldr	r0, [r7, #20]
 8004c16:	f000 f8d1 	bl	8004dbc <prvInsertTimerInActiveList>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01f      	beq.n	8004c60 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c20:	2300      	movs	r3, #0
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	2300      	movs	r3, #0
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	2100      	movs	r1, #0
 8004c2a:	6978      	ldr	r0, [r7, #20]
 8004c2c:	f7ff ff88 	bl	8004b40 <xTimerGenericCommand>
 8004c30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d113      	bne.n	8004c60 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	60fb      	str	r3, [r7, #12]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	6978      	ldr	r0, [r7, #20]
 8004c66:	4798      	blx	r3
}
 8004c68:	bf00      	nop
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000ec0 	.word	0x20000ec0

08004c74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c7c:	f107 0308 	add.w	r3, r7, #8
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 f857 	bl	8004d34 <prvGetNextExpireTime>
 8004c86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f803 	bl	8004c98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c92:	f000 f8d5 	bl	8004e40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c96:	e7f1      	b.n	8004c7c <prvTimerTask+0x8>

08004c98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ca2:	f7ff fa39 	bl	8004118 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ca6:	f107 0308 	add.w	r3, r7, #8
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 f866 	bl	8004d7c <prvSampleTimeNow>
 8004cb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d130      	bne.n	8004d1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <prvProcessTimerOrBlockTask+0x3c>
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d806      	bhi.n	8004cd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004cc6:	f7ff fa35 	bl	8004134 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004cca:	68f9      	ldr	r1, [r7, #12]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff85 	bl	8004bdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004cd2:	e024      	b.n	8004d1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d008      	beq.n	8004cec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004cda:	4b13      	ldr	r3, [pc, #76]	; (8004d28 <prvProcessTimerOrBlockTask+0x90>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <prvProcessTimerOrBlockTask+0x50>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <prvProcessTimerOrBlockTask+0x52>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004cec:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <prvProcessTimerOrBlockTask+0x94>)
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f7fe ff7d 	bl	8003bf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004cfe:	f7ff fa19 	bl	8004134 <xTaskResumeAll>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d08:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <prvProcessTimerOrBlockTask+0x98>)
 8004d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	f3bf 8f6f 	isb	sy
}
 8004d18:	e001      	b.n	8004d1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d1a:	f7ff fa0b 	bl	8004134 <xTaskResumeAll>
}
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000ec4 	.word	0x20000ec4
 8004d2c:	20000ec8 	.word	0x20000ec8
 8004d30:	e000ed04 	.word	0xe000ed04

08004d34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d3c:	4b0e      	ldr	r3, [pc, #56]	; (8004d78 <prvGetNextExpireTime+0x44>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <prvGetNextExpireTime+0x16>
 8004d46:	2201      	movs	r2, #1
 8004d48:	e000      	b.n	8004d4c <prvGetNextExpireTime+0x18>
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d105      	bne.n	8004d64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d58:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <prvGetNextExpireTime+0x44>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	e001      	b.n	8004d68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d68:	68fb      	ldr	r3, [r7, #12]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000ec0 	.word	0x20000ec0

08004d7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d84:	f7ff fa74 	bl	8004270 <xTaskGetTickCount>
 8004d88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d8a:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <prvSampleTimeNow+0x3c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d205      	bcs.n	8004da0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d94:	f000 f936 	bl	8005004 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	e002      	b.n	8004da6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004da6:	4a04      	ldr	r2, [pc, #16]	; (8004db8 <prvSampleTimeNow+0x3c>)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004dac:	68fb      	ldr	r3, [r7, #12]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000ed0 	.word	0x20000ed0

08004dbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d812      	bhi.n	8004e08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	1ad2      	subs	r2, r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d302      	bcc.n	8004df6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004df0:	2301      	movs	r3, #1
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	e01b      	b.n	8004e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004df6:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <prvInsertTimerInActiveList+0x7c>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4610      	mov	r0, r2
 8004e02:	f7fe f9de 	bl	80031c2 <vListInsert>
 8004e06:	e012      	b.n	8004e2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d206      	bcs.n	8004e1e <prvInsertTimerInActiveList+0x62>
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d302      	bcc.n	8004e1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	e007      	b.n	8004e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e1e:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <prvInsertTimerInActiveList+0x80>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3304      	adds	r3, #4
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f7fe f9ca 	bl	80031c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e2e:	697b      	ldr	r3, [r7, #20]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000ec4 	.word	0x20000ec4
 8004e3c:	20000ec0 	.word	0x20000ec0

08004e40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08e      	sub	sp, #56	; 0x38
 8004e44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e46:	e0ca      	b.n	8004fde <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	da18      	bge.n	8004e80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e4e:	1d3b      	adds	r3, r7, #4
 8004e50:	3304      	adds	r3, #4
 8004e52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	61fb      	str	r3, [r7, #28]
}
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e76:	6850      	ldr	r0, [r2, #4]
 8004e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e7a:	6892      	ldr	r2, [r2, #8]
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f2c0 80aa 	blt.w	8004fdc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	3304      	adds	r3, #4
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fe f9cb 	bl	8003234 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e9e:	463b      	mov	r3, r7
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff ff6b 	bl	8004d7c <prvSampleTimeNow>
 8004ea6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b09      	cmp	r3, #9
 8004eac:	f200 8097 	bhi.w	8004fde <prvProcessReceivedCommands+0x19e>
 8004eb0:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <prvProcessReceivedCommands+0x78>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004ee1 	.word	0x08004ee1
 8004ebc:	08004ee1 	.word	0x08004ee1
 8004ec0:	08004ee1 	.word	0x08004ee1
 8004ec4:	08004f55 	.word	0x08004f55
 8004ec8:	08004f69 	.word	0x08004f69
 8004ecc:	08004fb3 	.word	0x08004fb3
 8004ed0:	08004ee1 	.word	0x08004ee1
 8004ed4:	08004ee1 	.word	0x08004ee1
 8004ed8:	08004f55 	.word	0x08004f55
 8004edc:	08004f69 	.word	0x08004f69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	18d1      	adds	r1, r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f00:	f7ff ff5c 	bl	8004dbc <prvInsertTimerInActiveList>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d069      	beq.n	8004fde <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d05e      	beq.n	8004fde <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	441a      	add	r2, r3
 8004f28:	2300      	movs	r3, #0
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2100      	movs	r1, #0
 8004f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f32:	f7ff fe05 	bl	8004b40 <xTimerGenericCommand>
 8004f36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d14f      	bne.n	8004fde <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	61bb      	str	r3, [r7, #24]
}
 8004f50:	bf00      	nop
 8004f52:	e7fe      	b.n	8004f52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f5a:	f023 0301 	bic.w	r3, r3, #1
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004f66:	e03a      	b.n	8004fde <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	617b      	str	r3, [r7, #20]
}
 8004f9a:	bf00      	nop
 8004f9c:	e7fe      	b.n	8004f9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	18d1      	adds	r1, r2, r3
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fac:	f7ff ff06 	bl	8004dbc <prvInsertTimerInActiveList>
					break;
 8004fb0:	e015      	b.n	8004fde <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d103      	bne.n	8004fc8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc2:	f000 fbdd 	bl	8005780 <vPortFree>
 8004fc6:	e00a      	b.n	8004fde <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fce:	f023 0301 	bic.w	r3, r3, #1
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004fda:	e000      	b.n	8004fde <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004fdc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fde:	4b08      	ldr	r3, [pc, #32]	; (8005000 <prvProcessReceivedCommands+0x1c0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	1d39      	adds	r1, r7, #4
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fbec 	bl	80037c4 <xQueueReceive>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f47f af2a 	bne.w	8004e48 <prvProcessReceivedCommands+0x8>
	}
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop
 8004ff8:	3730      	adds	r7, #48	; 0x30
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000ec8 	.word	0x20000ec8

08005004 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800500a:	e048      	b.n	800509e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800500c:	4b2d      	ldr	r3, [pc, #180]	; (80050c4 <prvSwitchTimerLists+0xc0>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005016:	4b2b      	ldr	r3, [pc, #172]	; (80050c4 <prvSwitchTimerLists+0xc0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3304      	adds	r3, #4
 8005024:	4618      	mov	r0, r3
 8005026:	f7fe f905 	bl	8003234 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	d02e      	beq.n	800509e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4413      	add	r3, r2
 8005048:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	429a      	cmp	r2, r3
 8005050:	d90e      	bls.n	8005070 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800505e:	4b19      	ldr	r3, [pc, #100]	; (80050c4 <prvSwitchTimerLists+0xc0>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3304      	adds	r3, #4
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f7fe f8aa 	bl	80031c2 <vListInsert>
 800506e:	e016      	b.n	800509e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005070:	2300      	movs	r3, #0
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	2300      	movs	r3, #0
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	2100      	movs	r1, #0
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7ff fd60 	bl	8004b40 <xTimerGenericCommand>
 8005080:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	603b      	str	r3, [r7, #0]
}
 800509a:	bf00      	nop
 800509c:	e7fe      	b.n	800509c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800509e:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <prvSwitchTimerLists+0xc0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1b1      	bne.n	800500c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050a8:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <prvSwitchTimerLists+0xc0>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <prvSwitchTimerLists+0xc4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a04      	ldr	r2, [pc, #16]	; (80050c4 <prvSwitchTimerLists+0xc0>)
 80050b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80050b6:	4a04      	ldr	r2, [pc, #16]	; (80050c8 <prvSwitchTimerLists+0xc4>)
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	6013      	str	r3, [r2, #0]
}
 80050bc:	bf00      	nop
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	20000ec0 	.word	0x20000ec0
 80050c8:	20000ec4 	.word	0x20000ec4

080050cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050d2:	f000 f967 	bl	80053a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <prvCheckForValidListAndQueue+0x60>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d120      	bne.n	8005120 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80050de:	4814      	ldr	r0, [pc, #80]	; (8005130 <prvCheckForValidListAndQueue+0x64>)
 80050e0:	f7fe f81e 	bl	8003120 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80050e4:	4813      	ldr	r0, [pc, #76]	; (8005134 <prvCheckForValidListAndQueue+0x68>)
 80050e6:	f7fe f81b 	bl	8003120 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80050ea:	4b13      	ldr	r3, [pc, #76]	; (8005138 <prvCheckForValidListAndQueue+0x6c>)
 80050ec:	4a10      	ldr	r2, [pc, #64]	; (8005130 <prvCheckForValidListAndQueue+0x64>)
 80050ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80050f0:	4b12      	ldr	r3, [pc, #72]	; (800513c <prvCheckForValidListAndQueue+0x70>)
 80050f2:	4a10      	ldr	r2, [pc, #64]	; (8005134 <prvCheckForValidListAndQueue+0x68>)
 80050f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80050f6:	2300      	movs	r3, #0
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	4b11      	ldr	r3, [pc, #68]	; (8005140 <prvCheckForValidListAndQueue+0x74>)
 80050fc:	4a11      	ldr	r2, [pc, #68]	; (8005144 <prvCheckForValidListAndQueue+0x78>)
 80050fe:	2110      	movs	r1, #16
 8005100:	200a      	movs	r0, #10
 8005102:	f7fe f929 	bl	8003358 <xQueueGenericCreateStatic>
 8005106:	4603      	mov	r3, r0
 8005108:	4a08      	ldr	r2, [pc, #32]	; (800512c <prvCheckForValidListAndQueue+0x60>)
 800510a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800510c:	4b07      	ldr	r3, [pc, #28]	; (800512c <prvCheckForValidListAndQueue+0x60>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <prvCheckForValidListAndQueue+0x60>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	490b      	ldr	r1, [pc, #44]	; (8005148 <prvCheckForValidListAndQueue+0x7c>)
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe fd42 	bl	8003ba4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005120:	f000 f970 	bl	8005404 <vPortExitCritical>
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000ec8 	.word	0x20000ec8
 8005130:	20000e98 	.word	0x20000e98
 8005134:	20000eac 	.word	0x20000eac
 8005138:	20000ec0 	.word	0x20000ec0
 800513c:	20000ec4 	.word	0x20000ec4
 8005140:	20000f74 	.word	0x20000f74
 8005144:	20000ed4 	.word	0x20000ed4
 8005148:	08005c14 	.word	0x08005c14

0800514c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3b04      	subs	r3, #4
 800515c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3b04      	subs	r3, #4
 800516a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f023 0201 	bic.w	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3b04      	subs	r3, #4
 800517a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800517c:	4a0c      	ldr	r2, [pc, #48]	; (80051b0 <pxPortInitialiseStack+0x64>)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3b14      	subs	r3, #20
 8005186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3b04      	subs	r3, #4
 8005192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f06f 0202 	mvn.w	r2, #2
 800519a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3b20      	subs	r3, #32
 80051a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051a2:	68fb      	ldr	r3, [r7, #12]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	080051b5 	.word	0x080051b5

080051b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <prvTaskExitError+0x54>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d00a      	beq.n	80051de <prvTaskExitError+0x2a>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	60fb      	str	r3, [r7, #12]
}
 80051da:	bf00      	nop
 80051dc:	e7fe      	b.n	80051dc <prvTaskExitError+0x28>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	60bb      	str	r3, [r7, #8]
}
 80051f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051f2:	bf00      	nop
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0fc      	beq.n	80051f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	20000010 	.word	0x20000010
 800520c:	00000000 	.word	0x00000000

08005210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <pxCurrentTCBConst2>)
 8005212:	6819      	ldr	r1, [r3, #0]
 8005214:	6808      	ldr	r0, [r1, #0]
 8005216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521a:	f380 8809 	msr	PSP, r0
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f04f 0000 	mov.w	r0, #0
 8005226:	f380 8811 	msr	BASEPRI, r0
 800522a:	4770      	bx	lr
 800522c:	f3af 8000 	nop.w

08005230 <pxCurrentTCBConst2>:
 8005230:	20000998 	.word	0x20000998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop

08005238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005238:	4808      	ldr	r0, [pc, #32]	; (800525c <prvPortStartFirstTask+0x24>)
 800523a:	6800      	ldr	r0, [r0, #0]
 800523c:	6800      	ldr	r0, [r0, #0]
 800523e:	f380 8808 	msr	MSP, r0
 8005242:	f04f 0000 	mov.w	r0, #0
 8005246:	f380 8814 	msr	CONTROL, r0
 800524a:	b662      	cpsie	i
 800524c:	b661      	cpsie	f
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	df00      	svc	0
 8005258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800525a:	bf00      	nop
 800525c:	e000ed08 	.word	0xe000ed08

08005260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005266:	4b46      	ldr	r3, [pc, #280]	; (8005380 <xPortStartScheduler+0x120>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a46      	ldr	r2, [pc, #280]	; (8005384 <xPortStartScheduler+0x124>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d10a      	bne.n	8005286 <xPortStartScheduler+0x26>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	613b      	str	r3, [r7, #16]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005286:	4b3e      	ldr	r3, [pc, #248]	; (8005380 <xPortStartScheduler+0x120>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a3f      	ldr	r2, [pc, #252]	; (8005388 <xPortStartScheduler+0x128>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d10a      	bne.n	80052a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	60fb      	str	r3, [r7, #12]
}
 80052a2:	bf00      	nop
 80052a4:	e7fe      	b.n	80052a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052a6:	4b39      	ldr	r3, [pc, #228]	; (800538c <xPortStartScheduler+0x12c>)
 80052a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	22ff      	movs	r2, #255	; 0xff
 80052b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	4b31      	ldr	r3, [pc, #196]	; (8005390 <xPortStartScheduler+0x130>)
 80052cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052ce:	4b31      	ldr	r3, [pc, #196]	; (8005394 <xPortStartScheduler+0x134>)
 80052d0:	2207      	movs	r2, #7
 80052d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052d4:	e009      	b.n	80052ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80052d6:	4b2f      	ldr	r3, [pc, #188]	; (8005394 <xPortStartScheduler+0x134>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3b01      	subs	r3, #1
 80052dc:	4a2d      	ldr	r2, [pc, #180]	; (8005394 <xPortStartScheduler+0x134>)
 80052de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ea:	78fb      	ldrb	r3, [r7, #3]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f2:	2b80      	cmp	r3, #128	; 0x80
 80052f4:	d0ef      	beq.n	80052d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052f6:	4b27      	ldr	r3, [pc, #156]	; (8005394 <xPortStartScheduler+0x134>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f1c3 0307 	rsb	r3, r3, #7
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d00a      	beq.n	8005318 <xPortStartScheduler+0xb8>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	60bb      	str	r3, [r7, #8]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005318:	4b1e      	ldr	r3, [pc, #120]	; (8005394 <xPortStartScheduler+0x134>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	4a1d      	ldr	r2, [pc, #116]	; (8005394 <xPortStartScheduler+0x134>)
 8005320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005322:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <xPortStartScheduler+0x134>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800532a:	4a1a      	ldr	r2, [pc, #104]	; (8005394 <xPortStartScheduler+0x134>)
 800532c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005336:	4b18      	ldr	r3, [pc, #96]	; (8005398 <xPortStartScheduler+0x138>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a17      	ldr	r2, [pc, #92]	; (8005398 <xPortStartScheduler+0x138>)
 800533c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005342:	4b15      	ldr	r3, [pc, #84]	; (8005398 <xPortStartScheduler+0x138>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a14      	ldr	r2, [pc, #80]	; (8005398 <xPortStartScheduler+0x138>)
 8005348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800534c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800534e:	f000 f8dd 	bl	800550c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005352:	4b12      	ldr	r3, [pc, #72]	; (800539c <xPortStartScheduler+0x13c>)
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005358:	f000 f8fc 	bl	8005554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800535c:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <xPortStartScheduler+0x140>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a0f      	ldr	r2, [pc, #60]	; (80053a0 <xPortStartScheduler+0x140>)
 8005362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005368:	f7ff ff66 	bl	8005238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800536c:	f7ff f84a 	bl	8004404 <vTaskSwitchContext>
	prvTaskExitError();
 8005370:	f7ff ff20 	bl	80051b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	e000ed00 	.word	0xe000ed00
 8005384:	410fc271 	.word	0x410fc271
 8005388:	410fc270 	.word	0x410fc270
 800538c:	e000e400 	.word	0xe000e400
 8005390:	20000fc4 	.word	0x20000fc4
 8005394:	20000fc8 	.word	0x20000fc8
 8005398:	e000ed20 	.word	0xe000ed20
 800539c:	20000010 	.word	0x20000010
 80053a0:	e000ef34 	.word	0xe000ef34

080053a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	607b      	str	r3, [r7, #4]
}
 80053bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053be:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <vPortEnterCritical+0x58>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3301      	adds	r3, #1
 80053c4:	4a0d      	ldr	r2, [pc, #52]	; (80053fc <vPortEnterCritical+0x58>)
 80053c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053c8:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <vPortEnterCritical+0x58>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d10f      	bne.n	80053f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <vPortEnterCritical+0x5c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	603b      	str	r3, [r7, #0]
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <vPortEnterCritical+0x4a>
	}
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	20000010 	.word	0x20000010
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800540a:	4b12      	ldr	r3, [pc, #72]	; (8005454 <vPortExitCritical+0x50>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <vPortExitCritical+0x24>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	607b      	str	r3, [r7, #4]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <vPortExitCritical+0x50>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3b01      	subs	r3, #1
 800542e:	4a09      	ldr	r2, [pc, #36]	; (8005454 <vPortExitCritical+0x50>)
 8005430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005432:	4b08      	ldr	r3, [pc, #32]	; (8005454 <vPortExitCritical+0x50>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d105      	bne.n	8005446 <vPortExitCritical+0x42>
 800543a:	2300      	movs	r3, #0
 800543c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	f383 8811 	msr	BASEPRI, r3
}
 8005444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	20000010 	.word	0x20000010
	...

08005460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005460:	f3ef 8009 	mrs	r0, PSP
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <pxCurrentTCBConst>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	f01e 0f10 	tst.w	lr, #16
 8005470:	bf08      	it	eq
 8005472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547a:	6010      	str	r0, [r2, #0]
 800547c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005484:	f380 8811 	msr	BASEPRI, r0
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f7fe ffb8 	bl	8004404 <vTaskSwitchContext>
 8005494:	f04f 0000 	mov.w	r0, #0
 8005498:	f380 8811 	msr	BASEPRI, r0
 800549c:	bc09      	pop	{r0, r3}
 800549e:	6819      	ldr	r1, [r3, #0]
 80054a0:	6808      	ldr	r0, [r1, #0]
 80054a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a6:	f01e 0f10 	tst.w	lr, #16
 80054aa:	bf08      	it	eq
 80054ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054b0:	f380 8809 	msr	PSP, r0
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	f3af 8000 	nop.w

080054c0 <pxCurrentTCBConst>:
 80054c0:	20000998 	.word	0x20000998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop

080054c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	607b      	str	r3, [r7, #4]
}
 80054e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054e2:	f7fe fed5 	bl	8004290 <xTaskIncrementTick>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054ec:	4b06      	ldr	r3, [pc, #24]	; (8005508 <xPortSysTickHandler+0x40>)
 80054ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	2300      	movs	r3, #0
 80054f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f383 8811 	msr	BASEPRI, r3
}
 80054fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005500:	bf00      	nop
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	e000ed04 	.word	0xe000ed04

0800550c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <vPortSetupTimerInterrupt+0x34>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005516:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <vPortSetupTimerInterrupt+0x38>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800551c:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <vPortSetupTimerInterrupt+0x3c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a0a      	ldr	r2, [pc, #40]	; (800554c <vPortSetupTimerInterrupt+0x40>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	099b      	lsrs	r3, r3, #6
 8005528:	4a09      	ldr	r2, [pc, #36]	; (8005550 <vPortSetupTimerInterrupt+0x44>)
 800552a:	3b01      	subs	r3, #1
 800552c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800552e:	4b04      	ldr	r3, [pc, #16]	; (8005540 <vPortSetupTimerInterrupt+0x34>)
 8005530:	2207      	movs	r2, #7
 8005532:	601a      	str	r2, [r3, #0]
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	e000e010 	.word	0xe000e010
 8005544:	e000e018 	.word	0xe000e018
 8005548:	20000004 	.word	0x20000004
 800554c:	10624dd3 	.word	0x10624dd3
 8005550:	e000e014 	.word	0xe000e014

08005554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005564 <vPortEnableVFP+0x10>
 8005558:	6801      	ldr	r1, [r0, #0]
 800555a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800555e:	6001      	str	r1, [r0, #0]
 8005560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005562:	bf00      	nop
 8005564:	e000ed88 	.word	0xe000ed88

08005568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800556e:	f3ef 8305 	mrs	r3, IPSR
 8005572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b0f      	cmp	r3, #15
 8005578:	d914      	bls.n	80055a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800557a:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <vPortValidateInterruptPriority+0x70>)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005584:	4b15      	ldr	r3, [pc, #84]	; (80055dc <vPortValidateInterruptPriority+0x74>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	7afa      	ldrb	r2, [r7, #11]
 800558a:	429a      	cmp	r2, r3
 800558c:	d20a      	bcs.n	80055a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	607b      	str	r3, [r7, #4]
}
 80055a0:	bf00      	nop
 80055a2:	e7fe      	b.n	80055a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055a4:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <vPortValidateInterruptPriority+0x78>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055ac:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <vPortValidateInterruptPriority+0x7c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d90a      	bls.n	80055ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	603b      	str	r3, [r7, #0]
}
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <vPortValidateInterruptPriority+0x60>
	}
 80055ca:	bf00      	nop
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	e000e3f0 	.word	0xe000e3f0
 80055dc:	20000fc4 	.word	0x20000fc4
 80055e0:	e000ed0c 	.word	0xe000ed0c
 80055e4:	20000fc8 	.word	0x20000fc8

080055e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	; 0x28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055f4:	f7fe fd90 	bl	8004118 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055f8:	4b5b      	ldr	r3, [pc, #364]	; (8005768 <pvPortMalloc+0x180>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005600:	f000 f920 	bl	8005844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005604:	4b59      	ldr	r3, [pc, #356]	; (800576c <pvPortMalloc+0x184>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4013      	ands	r3, r2
 800560c:	2b00      	cmp	r3, #0
 800560e:	f040 8093 	bne.w	8005738 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01d      	beq.n	8005654 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005618:	2208      	movs	r2, #8
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4413      	add	r3, r2
 800561e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	2b00      	cmp	r3, #0
 8005628:	d014      	beq.n	8005654 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f023 0307 	bic.w	r3, r3, #7
 8005630:	3308      	adds	r3, #8
 8005632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <pvPortMalloc+0x6c>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	617b      	str	r3, [r7, #20]
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d06e      	beq.n	8005738 <pvPortMalloc+0x150>
 800565a:	4b45      	ldr	r3, [pc, #276]	; (8005770 <pvPortMalloc+0x188>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d869      	bhi.n	8005738 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005664:	4b43      	ldr	r3, [pc, #268]	; (8005774 <pvPortMalloc+0x18c>)
 8005666:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005668:	4b42      	ldr	r3, [pc, #264]	; (8005774 <pvPortMalloc+0x18c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800566e:	e004      	b.n	800567a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	429a      	cmp	r2, r3
 8005682:	d903      	bls.n	800568c <pvPortMalloc+0xa4>
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1f1      	bne.n	8005670 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800568c:	4b36      	ldr	r3, [pc, #216]	; (8005768 <pvPortMalloc+0x180>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005692:	429a      	cmp	r2, r3
 8005694:	d050      	beq.n	8005738 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2208      	movs	r2, #8
 800569c:	4413      	add	r3, r2
 800569e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	1ad2      	subs	r2, r2, r3
 80056b0:	2308      	movs	r3, #8
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d91f      	bls.n	80056f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4413      	add	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <pvPortMalloc+0xf8>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	613b      	str	r3, [r7, #16]
}
 80056dc:	bf00      	nop
 80056de:	e7fe      	b.n	80056de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	1ad2      	subs	r2, r2, r3
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056f2:	69b8      	ldr	r0, [r7, #24]
 80056f4:	f000 f908 	bl	8005908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056f8:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <pvPortMalloc+0x188>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	4a1b      	ldr	r2, [pc, #108]	; (8005770 <pvPortMalloc+0x188>)
 8005704:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005706:	4b1a      	ldr	r3, [pc, #104]	; (8005770 <pvPortMalloc+0x188>)
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4b1b      	ldr	r3, [pc, #108]	; (8005778 <pvPortMalloc+0x190>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d203      	bcs.n	800571a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005712:	4b17      	ldr	r3, [pc, #92]	; (8005770 <pvPortMalloc+0x188>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a18      	ldr	r2, [pc, #96]	; (8005778 <pvPortMalloc+0x190>)
 8005718:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	4b13      	ldr	r3, [pc, #76]	; (800576c <pvPortMalloc+0x184>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	431a      	orrs	r2, r3
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800572e:	4b13      	ldr	r3, [pc, #76]	; (800577c <pvPortMalloc+0x194>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3301      	adds	r3, #1
 8005734:	4a11      	ldr	r2, [pc, #68]	; (800577c <pvPortMalloc+0x194>)
 8005736:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005738:	f7fe fcfc 	bl	8004134 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <pvPortMalloc+0x174>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	60fb      	str	r3, [r7, #12]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <pvPortMalloc+0x172>
	return pvReturn;
 800575c:	69fb      	ldr	r3, [r7, #28]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3728      	adds	r7, #40	; 0x28
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20004bd4 	.word	0x20004bd4
 800576c:	20004be8 	.word	0x20004be8
 8005770:	20004bd8 	.word	0x20004bd8
 8005774:	20004bcc 	.word	0x20004bcc
 8005778:	20004bdc 	.word	0x20004bdc
 800577c:	20004be0 	.word	0x20004be0

08005780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d04d      	beq.n	800582e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005792:	2308      	movs	r3, #8
 8005794:	425b      	negs	r3, r3
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4413      	add	r3, r2
 800579a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	4b24      	ldr	r3, [pc, #144]	; (8005838 <vPortFree+0xb8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10a      	bne.n	80057c4 <vPortFree+0x44>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	60fb      	str	r3, [r7, #12]
}
 80057c0:	bf00      	nop
 80057c2:	e7fe      	b.n	80057c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <vPortFree+0x62>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	60bb      	str	r3, [r7, #8]
}
 80057de:	bf00      	nop
 80057e0:	e7fe      	b.n	80057e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	4b14      	ldr	r3, [pc, #80]	; (8005838 <vPortFree+0xb8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4013      	ands	r3, r2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01e      	beq.n	800582e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d11a      	bne.n	800582e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	4b0e      	ldr	r3, [pc, #56]	; (8005838 <vPortFree+0xb8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	43db      	mvns	r3, r3
 8005802:	401a      	ands	r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005808:	f7fe fc86 	bl	8004118 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	4b0a      	ldr	r3, [pc, #40]	; (800583c <vPortFree+0xbc>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4413      	add	r3, r2
 8005816:	4a09      	ldr	r2, [pc, #36]	; (800583c <vPortFree+0xbc>)
 8005818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800581a:	6938      	ldr	r0, [r7, #16]
 800581c:	f000 f874 	bl	8005908 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005820:	4b07      	ldr	r3, [pc, #28]	; (8005840 <vPortFree+0xc0>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3301      	adds	r3, #1
 8005826:	4a06      	ldr	r2, [pc, #24]	; (8005840 <vPortFree+0xc0>)
 8005828:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800582a:	f7fe fc83 	bl	8004134 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800582e:	bf00      	nop
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20004be8 	.word	0x20004be8
 800583c:	20004bd8 	.word	0x20004bd8
 8005840:	20004be4 	.word	0x20004be4

08005844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800584a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800584e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005850:	4b27      	ldr	r3, [pc, #156]	; (80058f0 <prvHeapInit+0xac>)
 8005852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00c      	beq.n	8005878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3307      	adds	r3, #7
 8005862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0307 	bic.w	r3, r3, #7
 800586a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	4a1f      	ldr	r2, [pc, #124]	; (80058f0 <prvHeapInit+0xac>)
 8005874:	4413      	add	r3, r2
 8005876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800587c:	4a1d      	ldr	r2, [pc, #116]	; (80058f4 <prvHeapInit+0xb0>)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005882:	4b1c      	ldr	r3, [pc, #112]	; (80058f4 <prvHeapInit+0xb0>)
 8005884:	2200      	movs	r2, #0
 8005886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	4413      	add	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005890:	2208      	movs	r2, #8
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0307 	bic.w	r3, r3, #7
 800589e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <prvHeapInit+0xb4>)
 80058a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058a6:	4b14      	ldr	r3, [pc, #80]	; (80058f8 <prvHeapInit+0xb4>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2200      	movs	r2, #0
 80058ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058ae:	4b12      	ldr	r3, [pc, #72]	; (80058f8 <prvHeapInit+0xb4>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	1ad2      	subs	r2, r2, r3
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058c4:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <prvHeapInit+0xb4>)
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	4a0a      	ldr	r2, [pc, #40]	; (80058fc <prvHeapInit+0xb8>)
 80058d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	4a09      	ldr	r2, [pc, #36]	; (8005900 <prvHeapInit+0xbc>)
 80058da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058dc:	4b09      	ldr	r3, [pc, #36]	; (8005904 <prvHeapInit+0xc0>)
 80058de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058e2:	601a      	str	r2, [r3, #0]
}
 80058e4:	bf00      	nop
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	20000fcc 	.word	0x20000fcc
 80058f4:	20004bcc 	.word	0x20004bcc
 80058f8:	20004bd4 	.word	0x20004bd4
 80058fc:	20004bdc 	.word	0x20004bdc
 8005900:	20004bd8 	.word	0x20004bd8
 8005904:	20004be8 	.word	0x20004be8

08005908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005910:	4b28      	ldr	r3, [pc, #160]	; (80059b4 <prvInsertBlockIntoFreeList+0xac>)
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	e002      	b.n	800591c <prvInsertBlockIntoFreeList+0x14>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	429a      	cmp	r2, r3
 8005924:	d8f7      	bhi.n	8005916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	4413      	add	r3, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	429a      	cmp	r2, r3
 8005936:	d108      	bne.n	800594a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	441a      	add	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	441a      	add	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d118      	bne.n	8005990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4b15      	ldr	r3, [pc, #84]	; (80059b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d00d      	beq.n	8005986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	441a      	add	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	e008      	b.n	8005998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005986:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	e003      	b.n	8005998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	429a      	cmp	r2, r3
 800599e:	d002      	beq.n	80059a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	20004bcc 	.word	0x20004bcc
 80059b8:	20004bd4 	.word	0x20004bd4

080059bc <__libc_init_array>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	4d0d      	ldr	r5, [pc, #52]	; (80059f4 <__libc_init_array+0x38>)
 80059c0:	4c0d      	ldr	r4, [pc, #52]	; (80059f8 <__libc_init_array+0x3c>)
 80059c2:	1b64      	subs	r4, r4, r5
 80059c4:	10a4      	asrs	r4, r4, #2
 80059c6:	2600      	movs	r6, #0
 80059c8:	42a6      	cmp	r6, r4
 80059ca:	d109      	bne.n	80059e0 <__libc_init_array+0x24>
 80059cc:	4d0b      	ldr	r5, [pc, #44]	; (80059fc <__libc_init_array+0x40>)
 80059ce:	4c0c      	ldr	r4, [pc, #48]	; (8005a00 <__libc_init_array+0x44>)
 80059d0:	f000 f8f2 	bl	8005bb8 <_init>
 80059d4:	1b64      	subs	r4, r4, r5
 80059d6:	10a4      	asrs	r4, r4, #2
 80059d8:	2600      	movs	r6, #0
 80059da:	42a6      	cmp	r6, r4
 80059dc:	d105      	bne.n	80059ea <__libc_init_array+0x2e>
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e4:	4798      	blx	r3
 80059e6:	3601      	adds	r6, #1
 80059e8:	e7ee      	b.n	80059c8 <__libc_init_array+0xc>
 80059ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ee:	4798      	blx	r3
 80059f0:	3601      	adds	r6, #1
 80059f2:	e7f2      	b.n	80059da <__libc_init_array+0x1e>
 80059f4:	08005d2c 	.word	0x08005d2c
 80059f8:	08005d2c 	.word	0x08005d2c
 80059fc:	08005d2c 	.word	0x08005d2c
 8005a00:	08005d30 	.word	0x08005d30

08005a04 <__retarget_lock_acquire_recursive>:
 8005a04:	4770      	bx	lr

08005a06 <__retarget_lock_release_recursive>:
 8005a06:	4770      	bx	lr

08005a08 <memcpy>:
 8005a08:	440a      	add	r2, r1
 8005a0a:	4291      	cmp	r1, r2
 8005a0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a10:	d100      	bne.n	8005a14 <memcpy+0xc>
 8005a12:	4770      	bx	lr
 8005a14:	b510      	push	{r4, lr}
 8005a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a1e:	4291      	cmp	r1, r2
 8005a20:	d1f9      	bne.n	8005a16 <memcpy+0xe>
 8005a22:	bd10      	pop	{r4, pc}

08005a24 <memset>:
 8005a24:	4402      	add	r2, r0
 8005a26:	4603      	mov	r3, r0
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d100      	bne.n	8005a2e <memset+0xa>
 8005a2c:	4770      	bx	lr
 8005a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a32:	e7f9      	b.n	8005a28 <memset+0x4>

08005a34 <cleanup_glue>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	460c      	mov	r4, r1
 8005a38:	6809      	ldr	r1, [r1, #0]
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	b109      	cbz	r1, 8005a42 <cleanup_glue+0xe>
 8005a3e:	f7ff fff9 	bl	8005a34 <cleanup_glue>
 8005a42:	4621      	mov	r1, r4
 8005a44:	4628      	mov	r0, r5
 8005a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a4a:	f000 b869 	b.w	8005b20 <_free_r>
	...

08005a50 <_reclaim_reent>:
 8005a50:	4b2c      	ldr	r3, [pc, #176]	; (8005b04 <_reclaim_reent+0xb4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4283      	cmp	r3, r0
 8005a56:	b570      	push	{r4, r5, r6, lr}
 8005a58:	4604      	mov	r4, r0
 8005a5a:	d051      	beq.n	8005b00 <_reclaim_reent+0xb0>
 8005a5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a5e:	b143      	cbz	r3, 8005a72 <_reclaim_reent+0x22>
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d14a      	bne.n	8005afc <_reclaim_reent+0xac>
 8005a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a68:	6819      	ldr	r1, [r3, #0]
 8005a6a:	b111      	cbz	r1, 8005a72 <_reclaim_reent+0x22>
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f000 f857 	bl	8005b20 <_free_r>
 8005a72:	6961      	ldr	r1, [r4, #20]
 8005a74:	b111      	cbz	r1, 8005a7c <_reclaim_reent+0x2c>
 8005a76:	4620      	mov	r0, r4
 8005a78:	f000 f852 	bl	8005b20 <_free_r>
 8005a7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005a7e:	b111      	cbz	r1, 8005a86 <_reclaim_reent+0x36>
 8005a80:	4620      	mov	r0, r4
 8005a82:	f000 f84d 	bl	8005b20 <_free_r>
 8005a86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005a88:	b111      	cbz	r1, 8005a90 <_reclaim_reent+0x40>
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 f848 	bl	8005b20 <_free_r>
 8005a90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005a92:	b111      	cbz	r1, 8005a9a <_reclaim_reent+0x4a>
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 f843 	bl	8005b20 <_free_r>
 8005a9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005a9c:	b111      	cbz	r1, 8005aa4 <_reclaim_reent+0x54>
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f000 f83e 	bl	8005b20 <_free_r>
 8005aa4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005aa6:	b111      	cbz	r1, 8005aae <_reclaim_reent+0x5e>
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 f839 	bl	8005b20 <_free_r>
 8005aae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005ab0:	b111      	cbz	r1, 8005ab8 <_reclaim_reent+0x68>
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 f834 	bl	8005b20 <_free_r>
 8005ab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aba:	b111      	cbz	r1, 8005ac2 <_reclaim_reent+0x72>
 8005abc:	4620      	mov	r0, r4
 8005abe:	f000 f82f 	bl	8005b20 <_free_r>
 8005ac2:	69a3      	ldr	r3, [r4, #24]
 8005ac4:	b1e3      	cbz	r3, 8005b00 <_reclaim_reent+0xb0>
 8005ac6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ac8:	4620      	mov	r0, r4
 8005aca:	4798      	blx	r3
 8005acc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005ace:	b1b9      	cbz	r1, 8005b00 <_reclaim_reent+0xb0>
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ad6:	f7ff bfad 	b.w	8005a34 <cleanup_glue>
 8005ada:	5949      	ldr	r1, [r1, r5]
 8005adc:	b941      	cbnz	r1, 8005af0 <_reclaim_reent+0xa0>
 8005ade:	3504      	adds	r5, #4
 8005ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ae2:	2d80      	cmp	r5, #128	; 0x80
 8005ae4:	68d9      	ldr	r1, [r3, #12]
 8005ae6:	d1f8      	bne.n	8005ada <_reclaim_reent+0x8a>
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 f819 	bl	8005b20 <_free_r>
 8005aee:	e7ba      	b.n	8005a66 <_reclaim_reent+0x16>
 8005af0:	680e      	ldr	r6, [r1, #0]
 8005af2:	4620      	mov	r0, r4
 8005af4:	f000 f814 	bl	8005b20 <_free_r>
 8005af8:	4631      	mov	r1, r6
 8005afa:	e7ef      	b.n	8005adc <_reclaim_reent+0x8c>
 8005afc:	2500      	movs	r5, #0
 8005afe:	e7ef      	b.n	8005ae0 <_reclaim_reent+0x90>
 8005b00:	bd70      	pop	{r4, r5, r6, pc}
 8005b02:	bf00      	nop
 8005b04:	20000014 	.word	0x20000014

08005b08 <__malloc_lock>:
 8005b08:	4801      	ldr	r0, [pc, #4]	; (8005b10 <__malloc_lock+0x8>)
 8005b0a:	f7ff bf7b 	b.w	8005a04 <__retarget_lock_acquire_recursive>
 8005b0e:	bf00      	nop
 8005b10:	20004bec 	.word	0x20004bec

08005b14 <__malloc_unlock>:
 8005b14:	4801      	ldr	r0, [pc, #4]	; (8005b1c <__malloc_unlock+0x8>)
 8005b16:	f7ff bf76 	b.w	8005a06 <__retarget_lock_release_recursive>
 8005b1a:	bf00      	nop
 8005b1c:	20004bec 	.word	0x20004bec

08005b20 <_free_r>:
 8005b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b22:	2900      	cmp	r1, #0
 8005b24:	d044      	beq.n	8005bb0 <_free_r+0x90>
 8005b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b2a:	9001      	str	r0, [sp, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005b32:	bfb8      	it	lt
 8005b34:	18e4      	addlt	r4, r4, r3
 8005b36:	f7ff ffe7 	bl	8005b08 <__malloc_lock>
 8005b3a:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <_free_r+0x94>)
 8005b3c:	9801      	ldr	r0, [sp, #4]
 8005b3e:	6813      	ldr	r3, [r2, #0]
 8005b40:	b933      	cbnz	r3, 8005b50 <_free_r+0x30>
 8005b42:	6063      	str	r3, [r4, #4]
 8005b44:	6014      	str	r4, [r2, #0]
 8005b46:	b003      	add	sp, #12
 8005b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b4c:	f7ff bfe2 	b.w	8005b14 <__malloc_unlock>
 8005b50:	42a3      	cmp	r3, r4
 8005b52:	d908      	bls.n	8005b66 <_free_r+0x46>
 8005b54:	6825      	ldr	r5, [r4, #0]
 8005b56:	1961      	adds	r1, r4, r5
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	bf01      	itttt	eq
 8005b5c:	6819      	ldreq	r1, [r3, #0]
 8005b5e:	685b      	ldreq	r3, [r3, #4]
 8005b60:	1949      	addeq	r1, r1, r5
 8005b62:	6021      	streq	r1, [r4, #0]
 8005b64:	e7ed      	b.n	8005b42 <_free_r+0x22>
 8005b66:	461a      	mov	r2, r3
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	b10b      	cbz	r3, 8005b70 <_free_r+0x50>
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	d9fa      	bls.n	8005b66 <_free_r+0x46>
 8005b70:	6811      	ldr	r1, [r2, #0]
 8005b72:	1855      	adds	r5, r2, r1
 8005b74:	42a5      	cmp	r5, r4
 8005b76:	d10b      	bne.n	8005b90 <_free_r+0x70>
 8005b78:	6824      	ldr	r4, [r4, #0]
 8005b7a:	4421      	add	r1, r4
 8005b7c:	1854      	adds	r4, r2, r1
 8005b7e:	42a3      	cmp	r3, r4
 8005b80:	6011      	str	r1, [r2, #0]
 8005b82:	d1e0      	bne.n	8005b46 <_free_r+0x26>
 8005b84:	681c      	ldr	r4, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	6053      	str	r3, [r2, #4]
 8005b8a:	4421      	add	r1, r4
 8005b8c:	6011      	str	r1, [r2, #0]
 8005b8e:	e7da      	b.n	8005b46 <_free_r+0x26>
 8005b90:	d902      	bls.n	8005b98 <_free_r+0x78>
 8005b92:	230c      	movs	r3, #12
 8005b94:	6003      	str	r3, [r0, #0]
 8005b96:	e7d6      	b.n	8005b46 <_free_r+0x26>
 8005b98:	6825      	ldr	r5, [r4, #0]
 8005b9a:	1961      	adds	r1, r4, r5
 8005b9c:	428b      	cmp	r3, r1
 8005b9e:	bf04      	itt	eq
 8005ba0:	6819      	ldreq	r1, [r3, #0]
 8005ba2:	685b      	ldreq	r3, [r3, #4]
 8005ba4:	6063      	str	r3, [r4, #4]
 8005ba6:	bf04      	itt	eq
 8005ba8:	1949      	addeq	r1, r1, r5
 8005baa:	6021      	streq	r1, [r4, #0]
 8005bac:	6054      	str	r4, [r2, #4]
 8005bae:	e7ca      	b.n	8005b46 <_free_r+0x26>
 8005bb0:	b003      	add	sp, #12
 8005bb2:	bd30      	pop	{r4, r5, pc}
 8005bb4:	20004bf0 	.word	0x20004bf0

08005bb8 <_init>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	bf00      	nop
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr

08005bc4 <_fini>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	bf00      	nop
 8005bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bca:	bc08      	pop	{r3}
 8005bcc:	469e      	mov	lr, r3
 8005bce:	4770      	bx	lr
