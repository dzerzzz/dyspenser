
dyspenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c20  08008c90  08008c90  00018c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8b0  0800a8b0  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8b0  0800a8b0  0001a8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8b8  0800a8b8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8b8  0800a8b8  0001a8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8bc  0800a8bc  0001a8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a8c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050cc  20000184  0800aa44  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005250  0800aa44  00025250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c82f  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e1d  00000000  00000000  0003c9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  00040800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001917f  00000000  00000000  00041f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a385  00000000  00000000  0005b0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009ad38  00000000  00000000  00075464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0011019c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000015c8  00000000  00000000  001101f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000064cc  00000000  00000000  001117b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c78 	.word	0x08008c78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	08008c78 	.word	0x08008c78

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ResetPosition>:
{
	__HAL_TIM_SET_COUNTER(&htim3, value * 4); //TODO: Remove this after test;
}

void ResetPosition(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <ResetPosition+0x18>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000029c 	.word	0x2000029c

08000500 <SetAnimationTime>:

int flagDirectionPut = 0;
int animation = 0;
int flagDirectionSearch = 0;
int fluid = 40;
void SetAnimationTime(void){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim11);
 8000504:	481f      	ldr	r0, [pc, #124]	; (8000584 <SetAnimationTime+0x84>)
 8000506:	f004 ff77 	bl	80053f8 <HAL_TIM_Base_Stop_IT>

	if (animation == 0)
 800050a:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <SetAnimationTime+0x88>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d121      	bne.n	8000556 <SetAnimationTime+0x56>
	{
		if (flagDirectionPut == 0)
 8000512:	4b1e      	ldr	r3, [pc, #120]	; (800058c <SetAnimationTime+0x8c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d106      	bne.n	8000528 <SetAnimationTime+0x28>
		{
			flagDirectionPut = 1;
 800051a:	4b1c      	ldr	r3, [pc, #112]	; (800058c <SetAnimationTime+0x8c>)
 800051c:	2201      	movs	r2, #1
 800051e:	601a      	str	r2, [r3, #0]
			animation = 20;
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <SetAnimationTime+0x88>)
 8000522:	2214      	movs	r2, #20
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	e005      	b.n	8000534 <SetAnimationTime+0x34>
		}
		else
		{
			flagDirectionPut = 0;
 8000528:	4b18      	ldr	r3, [pc, #96]	; (800058c <SetAnimationTime+0x8c>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
			animation = 10;
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <SetAnimationTime+0x88>)
 8000530:	220a      	movs	r2, #10
 8000532:	601a      	str	r2, [r3, #0]
		}

		if (flagDirectionSearch == 0)
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <SetAnimationTime+0x90>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d106      	bne.n	800054a <SetAnimationTime+0x4a>
		{
			flagDirectionSearch = 1;
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <SetAnimationTime+0x90>)
 800053e:	2201      	movs	r2, #1
 8000540:	601a      	str	r2, [r3, #0]
			animation = 20;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <SetAnimationTime+0x88>)
 8000544:	2214      	movs	r2, #20
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	e005      	b.n	8000556 <SetAnimationTime+0x56>
		}
		else
		{
			flagDirectionSearch = 0;
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <SetAnimationTime+0x90>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
			animation = 20;
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <SetAnimationTime+0x88>)
 8000552:	2214      	movs	r2, #20
 8000554:	601a      	str	r2, [r3, #0]
		}
	}

	if (fluid == 0)
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <SetAnimationTime+0x94>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d102      	bne.n	8000564 <SetAnimationTime+0x64>
	{
		fluid = 40;
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <SetAnimationTime+0x94>)
 8000560:	2228      	movs	r2, #40	; 0x28
 8000562:	601a      	str	r2, [r3, #0]
	}
	fluid--;
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <SetAnimationTime+0x94>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3b01      	subs	r3, #1
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <SetAnimationTime+0x94>)
 800056c:	6013      	str	r3, [r2, #0]

	animation--;
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <SetAnimationTime+0x88>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	3b01      	subs	r3, #1
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <SetAnimationTime+0x88>)
 8000576:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim11);
 8000578:	4802      	ldr	r0, [pc, #8]	; (8000584 <SetAnimationTime+0x84>)
 800057a:	f004 fedb 	bl	8005334 <HAL_TIM_Base_Start_IT>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000374 	.word	0x20000374
 8000588:	200001a4 	.word	0x200001a4
 800058c:	200001a0 	.word	0x200001a0
 8000590:	200001a8 	.word	0x200001a8
 8000594:	20000000 	.word	0x20000000

08000598 <DrawShotSearching>:

void DrawShotSearching(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af02      	add	r7, sp, #8
	if (flagDirectionSearch == 1)
 800059e:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <DrawShotSearching+0x7c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d119      	bne.n	80005da <DrawShotSearching+0x42>
	{
		SSD1306_DrawFilledRectangle(10, 0, 100, 60, 0);
 80005a6:	2300      	movs	r3, #0
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	233c      	movs	r3, #60	; 0x3c
 80005ac:	2264      	movs	r2, #100	; 0x64
 80005ae:	2100      	movs	r1, #0
 80005b0:	200a      	movs	r0, #10
 80005b2:	f002 fcbf 	bl	8002f34 <SSD1306_DrawFilledRectangle>
		SSD1306_DrawBitmap(20+animation, 0, lupa, 60, 58, 1);
 80005b6:	4b18      	ldr	r3, [pc, #96]	; (8000618 <DrawShotSearching+0x80>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	3314      	adds	r3, #20
 80005be:	b29b      	uxth	r3, r3
 80005c0:	b218      	sxth	r0, r3
 80005c2:	2301      	movs	r3, #1
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	233a      	movs	r3, #58	; 0x3a
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	233c      	movs	r3, #60	; 0x3c
 80005cc:	4a13      	ldr	r2, [pc, #76]	; (800061c <DrawShotSearching+0x84>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	f002 f8bd 	bl	800274e <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80005d4:	f002 f9e8 	bl	80029a8 <SSD1306_UpdateScreen>
	{
		SSD1306_DrawFilledRectangle(10, 0, 100, 60, 0);
		SSD1306_DrawBitmap(40-animation, 0, lupa, 60, 58, 1);
		SSD1306_UpdateScreen();
	}
}
 80005d8:	e019      	b.n	800060e <DrawShotSearching+0x76>
		SSD1306_DrawFilledRectangle(10, 0, 100, 60, 0);
 80005da:	2300      	movs	r3, #0
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	233c      	movs	r3, #60	; 0x3c
 80005e0:	2264      	movs	r2, #100	; 0x64
 80005e2:	2100      	movs	r1, #0
 80005e4:	200a      	movs	r0, #10
 80005e6:	f002 fca5 	bl	8002f34 <SSD1306_DrawFilledRectangle>
		SSD1306_DrawBitmap(40-animation, 0, lupa, 60, 58, 1);
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <DrawShotSearching+0x80>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	b218      	sxth	r0, r3
 80005f8:	2301      	movs	r3, #1
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	233a      	movs	r3, #58	; 0x3a
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	233c      	movs	r3, #60	; 0x3c
 8000602:	4a06      	ldr	r2, [pc, #24]	; (800061c <DrawShotSearching+0x84>)
 8000604:	2100      	movs	r1, #0
 8000606:	f002 f8a2 	bl	800274e <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 800060a:	f002 f9cd 	bl	80029a8 <SSD1306_UpdateScreen>
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200001a8 	.word	0x200001a8
 8000618:	200001a4 	.word	0x200001a4
 800061c:	08008d54 	.word	0x08008d54

08000620 <DrawShotFill>:

void DrawShotFill(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af02      	add	r7, sp, #8
		SSD1306_DrawBitmap(40, 0, kielon, 40, 60, 1);
 8000626:	2301      	movs	r3, #1
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	233c      	movs	r3, #60	; 0x3c
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2328      	movs	r3, #40	; 0x28
 8000630:	4a2e      	ldr	r2, [pc, #184]	; (80006ec <DrawShotFill+0xcc>)
 8000632:	2100      	movs	r1, #0
 8000634:	2028      	movs	r0, #40	; 0x28
 8000636:	f002 f88a 	bl	800274e <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 800063a:	f002 f9b5 	bl	80029a8 <SSD1306_UpdateScreen>
		//ciecz
		int16_t byteWidth = (30 + 7) / 8;
 800063e:	2304      	movs	r3, #4
 8000640:	80fb      	strh	r3, [r7, #6]
		uint8_t byte = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	73fb      	strb	r3, [r7, #15]
		int16_t x = 45;
 8000646:	232d      	movs	r3, #45	; 0x2d
 8000648:	80bb      	strh	r3, [r7, #4]
		int16_t y = 44;
 800064a:	232c      	movs	r3, #44	; 0x2c
 800064c:	81bb      	strh	r3, [r7, #12]
		for (int16_t j = 40; j > fluid; j--, y--) {
 800064e:	2328      	movs	r3, #40	; 0x28
 8000650:	817b      	strh	r3, [r7, #10]
 8000652:	e03f      	b.n	80006d4 <DrawShotFill+0xb4>
			for (int16_t i = 0; i < 30; i++) {
 8000654:	2300      	movs	r3, #0
 8000656:	813b      	strh	r3, [r7, #8]
 8000658:	e02c      	b.n	80006b4 <DrawShotFill+0x94>
				if (i & 7) {
 800065a:	893b      	ldrh	r3, [r7, #8]
 800065c:	f003 0307 	and.w	r3, r3, #7
 8000660:	2b00      	cmp	r3, #0
 8000662:	d003      	beq.n	800066c <DrawShotFill+0x4c>
					byte <<= 1;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	73fb      	strb	r3, [r7, #15]
 800066a:	e010      	b.n	800068e <DrawShotFill+0x6e>
				} else {
					byte = (*(const unsigned char*) (&ciecz[j * byteWidth
 800066c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000670:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000674:	fb03 f202 	mul.w	r2, r3, r2
							+ i / 8]));
 8000678:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <DrawShotFill+0x62>
 8000680:	3307      	adds	r3, #7
 8000682:	10db      	asrs	r3, r3, #3
 8000684:	b21b      	sxth	r3, r3
 8000686:	4413      	add	r3, r2
					byte = (*(const unsigned char*) (&ciecz[j * byteWidth
 8000688:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <DrawShotFill+0xd0>)
 800068a:	5cd3      	ldrb	r3, [r2, r3]
 800068c:	73fb      	strb	r3, [r7, #15]
				}
				if (byte & 0x80)
 800068e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000692:	2b00      	cmp	r3, #0
 8000694:	da08      	bge.n	80006a8 <DrawShotFill+0x88>
					SSD1306_DrawPixel(x + i, y, 1);
 8000696:	88ba      	ldrh	r2, [r7, #4]
 8000698:	893b      	ldrh	r3, [r7, #8]
 800069a:	4413      	add	r3, r2
 800069c:	b29b      	uxth	r3, r3
 800069e:	89b9      	ldrh	r1, [r7, #12]
 80006a0:	2201      	movs	r2, #1
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 f9c6 	bl	8002a34 <SSD1306_DrawPixel>
			for (int16_t i = 0; i < 30; i++) {
 80006a8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	3301      	adds	r3, #1
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	813b      	strh	r3, [r7, #8]
 80006b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80006b8:	2b1d      	cmp	r3, #29
 80006ba:	ddce      	ble.n	800065a <DrawShotFill+0x3a>
		for (int16_t j = 40; j > fluid; j--, y--) {
 80006bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	3b01      	subs	r3, #1
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	817b      	strh	r3, [r7, #10]
 80006c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	3b01      	subs	r3, #1
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	81bb      	strh	r3, [r7, #12]
 80006d4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <DrawShotFill+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dcb9      	bgt.n	8000654 <DrawShotFill+0x34>
			}
	}
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	08008f24 	.word	0x08008f24
 80006f0:	08009050 	.word	0x08009050
 80006f4:	20000000 	.word	0x20000000

080006f8 <Print>:

void Print(GuiState state) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d10b      	bne.n	8000720 <Print+0x28>
	case StartLayer:
//		if(animation>10)
//		{
			SSD1306_GotoXY(0, 25);
 8000708:	2119      	movs	r1, #25
 800070a:	2000      	movs	r0, #0
 800070c:	f002 f9f2 	bl	8002af4 <SSD1306_GotoXY>
			SSD1306_Puts("Press key to start", &Font_7x10, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	4906      	ldr	r1, [pc, #24]	; (800072c <Print+0x34>)
 8000714:	4806      	ldr	r0, [pc, #24]	; (8000730 <Print+0x38>)
 8000716:	f002 fa83 	bl	8002c20 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 800071a:	f002 f945 	bl	80029a8 <SSD1306_UpdateScreen>
//		}
//		else
//		{
//			ClearScreen();
//		}
		break;
 800071e:	e000      	b.n	8000722 <Print+0x2a>
	default:
		break;
 8000720:	bf00      	nop
	}
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000104 	.word	0x20000104
 8000730:	08008c90 	.word	0x08008c90

08000734 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 0 */

uint32_t encoderPosition = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	encoderPosition = __HAL_TIM_GET_COUNTER(&htim3) >>2;
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HAL_TIM_IC_CaptureCallback+0x20>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000742:	089b      	lsrs	r3, r3, #2
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	2000029c 	.word	0x2000029c
 8000758:	200003cc 	.word	0x200003cc

0800075c <StopPump>:
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); //TODO: Remove this after tests
	HAL_TIM_Base_Start_IT(&htim10);

}

void StopPump(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	status = Idle;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <StopPump+0x2c>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //TODO: Remove this after tests
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	4807      	ldr	r0, [pc, #28]	; (800078c <StopPump+0x30>)
 800076e:	f002 ffb5 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PUMPIN1_GPIO_Port, PUMPIN1_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2120      	movs	r1, #32
 8000776:	4806      	ldr	r0, [pc, #24]	; (8000790 <StopPump+0x34>)
 8000778:	f002 ffb0 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim10);
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <StopPump+0x38>)
 800077e:	f004 fe3b 	bl	80053f8 <HAL_TIM_Base_Stop_IT>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200003d0 	.word	0x200003d0
 800078c:	40020800 	.word	0x40020800
 8000790:	40020400 	.word	0x40020400
 8000794:	2000032c 	.word	0x2000032c

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079c:	f002 fcba 	bl	8003114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a0:	f000 f880 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a4:	f000 fa66 	bl	8000c74 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007a8:	f000 f942 	bl	8000a30 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007ac:	f000 f98c 	bl	8000ac8 <MX_TIM3_Init>
  MX_I2C1_Init();
 80007b0:	f000 f8e2 	bl	8000978 <MX_I2C1_Init>
  MX_TIM10_Init();
 80007b4:	f000 fa16 	bl	8000be4 <MX_TIM10_Init>
  MX_TIM4_Init();
 80007b8:	f000 f9da 	bl	8000b70 <MX_TIM4_Init>
  MX_TIM11_Init();
 80007bc:	f000 fa36 	bl	8000c2c <MX_TIM11_Init>
  MX_I2C2_Init();
 80007c0:	f000 f908 	bl	80009d4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */


	HAL_TIM_Base_Start(&htim2);
 80007c4:	4826      	ldr	r0, [pc, #152]	; (8000860 <main+0xc8>)
 80007c6:	f004 fd5b 	bl	8005280 <HAL_TIM_Base_Start>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80007ca:	213c      	movs	r1, #60	; 0x3c
 80007cc:	4825      	ldr	r0, [pc, #148]	; (8000864 <main+0xcc>)
 80007ce:	f004 ff38 	bl	8005642 <HAL_TIM_Encoder_Start_IT>
	SSD1306_Init();
 80007d2:	f002 f825 	bl	8002820 <SSD1306_Init>
	TIM10->EGR = TIM_EGR_UG; /* Force update for prescaler value. */
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <main+0xd0>)
 80007d8:	2201      	movs	r2, #1
 80007da:	615a      	str	r2, [r3, #20]
	TIM10->SR = 0; /* Clear update flag. */
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <main+0xd0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
	TIM11->EGR = TIM_EGR_UG; /* Force update for prescaler value. */
 80007e2:	4b22      	ldr	r3, [pc, #136]	; (800086c <main+0xd4>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	615a      	str	r2, [r3, #20]
	TIM11->SR = 0; /* Clear update flag. */
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <main+0xd4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
 80007ee:	2200      	movs	r2, #0
 80007f0:	2102      	movs	r1, #2
 80007f2:	481f      	ldr	r0, [pc, #124]	; (8000870 <main+0xd8>)
 80007f4:	f002 ff72 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80007f8:	2014      	movs	r0, #20
 80007fa:	f002 fccd 	bl	8003198 <HAL_Delay>
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
 80007fe:	2201      	movs	r2, #1
 8000800:	2102      	movs	r1, #2
 8000802:	481b      	ldr	r0, [pc, #108]	; (8000870 <main+0xd8>)
 8000804:	f002 ff6a 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000808:	2014      	movs	r0, #20
 800080a:	f002 fcc5 	bl	8003198 <HAL_Delay>


	tofInit(1); // set long range mode (up to 2m)
 800080e:	2001      	movs	r0, #1
 8000810:	f001 f8f6 	bl	8001a00 <tofInit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000814:	f005 fbb6 	bl	8005f84 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 8000818:	4a16      	ldr	r2, [pc, #88]	; (8000874 <main+0xdc>)
 800081a:	2100      	movs	r1, #0
 800081c:	4816      	ldr	r0, [pc, #88]	; (8000878 <main+0xe0>)
 800081e:	f005 fbfb 	bl	8006018 <osThreadNew>
 8000822:	4603      	mov	r3, r0
 8000824:	4a15      	ldr	r2, [pc, #84]	; (800087c <main+0xe4>)
 8000826:	6013      	str	r3, [r2, #0]

  /* creation of debouncingTask */
  debouncingTaskHandle = osThreadNew(StartDebouncingTask, NULL, &debouncingTask_attributes);
 8000828:	4a15      	ldr	r2, [pc, #84]	; (8000880 <main+0xe8>)
 800082a:	2100      	movs	r1, #0
 800082c:	4815      	ldr	r0, [pc, #84]	; (8000884 <main+0xec>)
 800082e:	f005 fbf3 	bl	8006018 <osThreadNew>
 8000832:	4603      	mov	r3, r0
 8000834:	4a14      	ldr	r2, [pc, #80]	; (8000888 <main+0xf0>)
 8000836:	6013      	str	r3, [r2, #0]

  /* creation of pumpTask */
  pumpTaskHandle = osThreadNew(StartPumpTask, NULL, &pumpTask_attributes);
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <main+0xf4>)
 800083a:	2100      	movs	r1, #0
 800083c:	4814      	ldr	r0, [pc, #80]	; (8000890 <main+0xf8>)
 800083e:	f005 fbeb 	bl	8006018 <osThreadNew>
 8000842:	4603      	mov	r3, r0
 8000844:	4a13      	ldr	r2, [pc, #76]	; (8000894 <main+0xfc>)
 8000846:	6013      	str	r3, [r2, #0]

  /* creation of oledTask */
  oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 8000848:	4a13      	ldr	r2, [pc, #76]	; (8000898 <main+0x100>)
 800084a:	2100      	movs	r1, #0
 800084c:	4813      	ldr	r0, [pc, #76]	; (800089c <main+0x104>)
 800084e:	f005 fbe3 	bl	8006018 <osThreadNew>
 8000852:	4603      	mov	r3, r0
 8000854:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <main+0x108>)
 8000856:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000858:	f005 fbb8 	bl	8005fcc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800085c:	e7fe      	b.n	800085c <main+0xc4>
 800085e:	bf00      	nop
 8000860:	20000254 	.word	0x20000254
 8000864:	2000029c 	.word	0x2000029c
 8000868:	40014400 	.word	0x40014400
 800086c:	40014800 	.word	0x40014800
 8000870:	40020400 	.word	0x40020400
 8000874:	080092e0 	.word	0x080092e0
 8000878:	08000db9 	.word	0x08000db9
 800087c:	200003bc 	.word	0x200003bc
 8000880:	08009304 	.word	0x08009304
 8000884:	08000df1 	.word	0x08000df1
 8000888:	200003c0 	.word	0x200003c0
 800088c:	08009328 	.word	0x08009328
 8000890:	08000e49 	.word	0x08000e49
 8000894:	200003c4 	.word	0x200003c4
 8000898:	0800934c 	.word	0x0800934c
 800089c:	08000e59 	.word	0x08000e59
 80008a0:	200003c8 	.word	0x200003c8

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	; 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0320 	add.w	r3, r7, #32
 80008ae:	2230      	movs	r2, #48	; 0x30
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f008 f916 	bl	8008ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	4b28      	ldr	r3, [pc, #160]	; (8000970 <SystemClock_Config+0xcc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	4a27      	ldr	r2, [pc, #156]	; (8000970 <SystemClock_Config+0xcc>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	; 0x40
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <SystemClock_Config+0xcc>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f0:	4a20      	ldr	r2, [pc, #128]	; (8000974 <SystemClock_Config+0xd0>)
 80008f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <SystemClock_Config+0xd0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000908:	2301      	movs	r3, #1
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800090c:	2310      	movs	r3, #16
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000910:	2302      	movs	r3, #2
 8000912:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000914:	2300      	movs	r3, #0
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000918:	2308      	movs	r3, #8
 800091a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800091c:	2348      	movs	r3, #72	; 0x48
 800091e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000924:	2304      	movs	r3, #4
 8000926:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 0320 	add.w	r3, r7, #32
 800092c:	4618      	mov	r0, r3
 800092e:	f003 ffcd 	bl	80048cc <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000938:	f000 fd04 	bl	8001344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093c:	230f      	movs	r3, #15
 800093e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000940:	2302      	movs	r3, #2
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	2102      	movs	r1, #2
 8000958:	4618      	mov	r0, r3
 800095a:	f004 fa2f 	bl	8004dbc <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000964:	f000 fcee 	bl	8001344 <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	3750      	adds	r7, #80	; 0x50
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	40007000 	.word	0x40007000

08000978 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_I2C1_Init+0x50>)
 800097e:	4a13      	ldr	r2, [pc, #76]	; (80009cc <MX_I2C1_Init+0x54>)
 8000980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_I2C1_Init+0x50>)
 8000984:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_I2C1_Init+0x58>)
 8000986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_I2C1_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_I2C1_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_I2C1_Init+0x50>)
 8000996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800099a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_I2C1_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_I2C1_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_I2C1_Init+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_I2C1_Init+0x50>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_I2C1_Init+0x50>)
 80009b6:	f002 fec5 	bl	8003744 <HAL_I2C_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009c0:	f000 fcc0 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200001ac 	.word	0x200001ac
 80009cc:	40005400 	.word	0x40005400
 80009d0:	00061a80 	.word	0x00061a80

080009d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_I2C2_Init+0x50>)
 80009da:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <MX_I2C2_Init+0x54>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_I2C2_Init+0x50>)
 80009e0:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_I2C2_Init+0x58>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_I2C2_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_I2C2_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_I2C2_Init+0x50>)
 80009f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_I2C2_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_I2C2_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MX_I2C2_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_I2C2_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_I2C2_Init+0x50>)
 8000a12:	f002 fe97 	bl	8003744 <HAL_I2C_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a1c:	f000 fc92 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000200 	.word	0x20000200
 8000a28:	40005800 	.word	0x40005800
 8000a2c:	00061a80 	.word	0x00061a80

08000a30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_TIM2_Init+0x94>)
 8000a4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_TIM2_Init+0x94>)
 8000a56:	2247      	movs	r2, #71	; 0x47
 8000a58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_TIM2_Init+0x94>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_TIM2_Init+0x94>)
 8000a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_TIM2_Init+0x94>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_TIM2_Init+0x94>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a74:	4813      	ldr	r0, [pc, #76]	; (8000ac4 <MX_TIM2_Init+0x94>)
 8000a76:	f004 fbb3 	bl	80051e0 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a80:	f000 fc60 	bl	8001344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <MX_TIM2_Init+0x94>)
 8000a92:	f004 ff8c 	bl	80059ae <HAL_TIM_ConfigClockSource>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a9c:	f000 fc52 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_TIM2_Init+0x94>)
 8000aae:	f005 f9a3 	bl	8005df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ab8:	f000 fc44 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000254 	.word	0x20000254

08000ac8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	; 0x30
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	2224      	movs	r2, #36	; 0x24
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f008 f804 	bl	8008ae4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000ae6:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <MX_TIM3_Init+0xa4>)
 8000ae8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000af8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000afc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b12:	2301      	movs	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b22:	2301      	movs	r3, #1
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000b36:	f004 fcde 	bl	80054f6 <HAL_TIM_Encoder_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b40:	f000 fc00 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000b52:	f005 f951 	bl	8005df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b5c:	f000 fbf2 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3730      	adds	r7, #48	; 0x30
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000029c 	.word	0x2000029c
 8000b6c:	40000400 	.word	0x40000400

08000b70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b76:	463b      	mov	r3, r7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_TIM4_Init+0x6c>)
 8000b80:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <MX_TIM4_Init+0x70>)
 8000b82:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_TIM4_Init+0x6c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_TIM4_Init+0x6c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_TIM4_Init+0x6c>)
 8000b92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_TIM4_Init+0x6c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_TIM4_Init+0x6c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_TIM4_Init+0x6c>)
 8000ba8:	f004 fc55 	bl	8005456 <HAL_TIM_OnePulse_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM4_Init+0x46>
  {
    Error_Handler();
 8000bb2:	f000 fbc7 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_TIM4_Init+0x6c>)
 8000bc4:	f005 f918 	bl	8005df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000bce:	f000 fbb9 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200002e4 	.word	0x200002e4
 8000be0:	40000800 	.word	0x40000800

08000be4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_TIM10_Init+0x40>)
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <MX_TIM10_Init+0x44>)
 8000bec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 19999;
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MX_TIM10_Init+0x40>)
 8000bf0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000bf4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_TIM10_Init+0x40>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 3599;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_TIM10_Init+0x40>)
 8000bfe:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000c02:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <MX_TIM10_Init+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_TIM10_Init+0x40>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_TIM10_Init+0x40>)
 8000c12:	f004 fae5 	bl	80051e0 <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000c1c:	f000 fb92 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000032c 	.word	0x2000032c
 8000c28:	40014400 	.word	0x40014400

08000c2c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_TIM11_Init+0x40>)
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <MX_TIM11_Init+0x44>)
 8000c34:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 499;
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <MX_TIM11_Init+0x40>)
 8000c38:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000c3c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_TIM11_Init+0x40>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 35999;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_TIM11_Init+0x40>)
 8000c46:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000c4a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <MX_TIM11_Init+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_TIM11_Init+0x40>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_TIM11_Init+0x40>)
 8000c5a:	f004 fac1 	bl	80051e0 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000c64:	f000 fb6e 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000374 	.word	0x20000374
 8000c70:	40014800 	.word	0x40014800

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b46      	ldr	r3, [pc, #280]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a45      	ldr	r2, [pc, #276]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b43      	ldr	r3, [pc, #268]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b3f      	ldr	r3, [pc, #252]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a3e      	ldr	r2, [pc, #248]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b3c      	ldr	r3, [pc, #240]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	4b38      	ldr	r3, [pc, #224]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a37      	ldr	r2, [pc, #220]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b35      	ldr	r3, [pc, #212]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b31      	ldr	r3, [pc, #196]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a30      	ldr	r2, [pc, #192]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d00:	482a      	ldr	r0, [pc, #168]	; (8000dac <MX_GPIO_Init+0x138>)
 8000d02:	f002 fceb 	bl	80036dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEPIN1_Pin|STEPIN2_Pin|STEPIN3_Pin|STEPIN4_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	211e      	movs	r1, #30
 8000d0a:	4829      	ldr	r0, [pc, #164]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000d0c:	f002 fce6 	bl	80036dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOF_XSHUT_Pin|PUMPIN1_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2122      	movs	r1, #34	; 0x22
 8000d14:	4827      	ldr	r0, [pc, #156]	; (8000db4 <MX_GPIO_Init+0x140>)
 8000d16:	f002 fce1 	bl	80036dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	481e      	ldr	r0, [pc, #120]	; (8000dac <MX_GPIO_Init+0x138>)
 8000d34:	f002 fb36 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_Pin PA5 */
  GPIO_InitStruct.Pin = KEY_Pin|GPIO_PIN_5;
 8000d38:	2321      	movs	r3, #33	; 0x21
 8000d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4819      	ldr	r0, [pc, #100]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000d4c:	f002 fb2a 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPIN1_Pin STEPIN2_Pin STEPIN3_Pin STEPIN4_Pin */
  GPIO_InitStruct.Pin = STEPIN1_Pin|STEPIN2_Pin|STEPIN3_Pin|STEPIN4_Pin;
 8000d50:	231e      	movs	r3, #30
 8000d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4812      	ldr	r0, [pc, #72]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000d68:	f002 fb1c 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480d      	ldr	r0, [pc, #52]	; (8000db4 <MX_GPIO_Init+0x140>)
 8000d80:	f002 fb10 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_XSHUT_Pin PUMPIN1_Pin */
  GPIO_InitStruct.Pin = TOF_XSHUT_Pin|PUMPIN1_Pin;
 8000d84:	2322      	movs	r3, #34	; 0x22
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <MX_GPIO_Init+0x140>)
 8000d9c:	f002 fb02 	bl	80033a4 <HAL_GPIO_Init>

}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020800 	.word	0x40020800
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020400 	.word	0x40020400

08000db8 <StartMainTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		distance = (uint16_t)tofReadDistance();
 8000dc0:	f001 fc4a 	bl	8002658 <tofReadDistance>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <StartMainTask+0x30>)
 8000dca:	801a      	strh	r2, [r3, #0]

		if (distance < 100)
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <StartMainTask+0x30>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	2b63      	cmp	r3, #99	; 0x63
 8000dd2:	d804      	bhi.n	8000dde <StartMainTask+0x26>
		{
			stepper_step_angle(45, 13);
 8000dd4:	200d      	movs	r0, #13
 8000dd6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000dec <StartMainTask+0x34>
 8000dda:	f000 fbaf 	bl	800153c <stepper_step_angle>
		}
		osDelay(40 / portTICK_PERIOD_MS);
 8000dde:	2028      	movs	r0, #40	; 0x28
 8000de0:	f005 f9ac 	bl	800613c <osDelay>
		distance = (uint16_t)tofReadDistance();
 8000de4:	e7ec      	b.n	8000dc0 <StartMainTask+0x8>
 8000de6:	bf00      	nop
 8000de8:	200003d8 	.word	0x200003d8
 8000dec:	42340000 	.word	0x42340000

08000df0 <StartDebouncingTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDebouncingTask */
void StartDebouncingTask(void *argument)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebouncingTask */

	/* Infinite loop */
	for (;;) {
		GPIO_PinState new_state = HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin);
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4810      	ldr	r0, [pc, #64]	; (8000e3c <StartDebouncingTask+0x4c>)
 8000dfc:	f002 fc56 	bl	80036ac <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	73fb      	strb	r3, [r7, #15]

		if (new_state != key_state && new_state == GPIO_PIN_RESET) {
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <StartDebouncingTask+0x50>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d007      	beq.n	8000e20 <StartDebouncingTask+0x30>
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d104      	bne.n	8000e20 <StartDebouncingTask+0x30>
			ResetPosition();
 8000e16:	f7ff fb65 	bl	80004e4 <ResetPosition>
			press = 1;
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <StartDebouncingTask+0x54>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
		}

		if(press == 1)
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <StartDebouncingTask+0x54>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d101      	bne.n	8000e2c <StartDebouncingTask+0x3c>
		{
			SSD1306_Clear();
 8000e28:	f002 f8d1 	bl	8002fce <SSD1306_Clear>
		}

		key_state = new_state;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <StartDebouncingTask+0x50>)
 8000e32:	801a      	strh	r2, [r3, #0]

		osDelay(100 / portTICK_PERIOD_MS);
 8000e34:	2064      	movs	r0, #100	; 0x64
 8000e36:	f005 f981 	bl	800613c <osDelay>
	for (;;) {
 8000e3a:	e7dd      	b.n	8000df8 <StartDebouncingTask+0x8>
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	20000004 	.word	0x20000004
 8000e44:	200003d4 	.word	0x200003d4

08000e48 <StartPumpTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPumpTask */
void StartPumpTask(void *argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
//			ChangePumpPourTime(3000);
//			StartPump();
//		} else {
//}
//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		osDelay(200 / portTICK_PERIOD_MS);
 8000e50:	20c8      	movs	r0, #200	; 0xc8
 8000e52:	f005 f973 	bl	800613c <osDelay>
 8000e56:	e7fb      	b.n	8000e50 <StartPumpTask+0x8>

08000e58 <StartOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
	/* Infinite loop */
	for (;;) {

		SetAnimationTime();
 8000e60:	f7ff fb4e 	bl	8000500 <SetAnimationTime>
		switch (statusOled) {
 8000e64:	4b9d      	ldr	r3, [pc, #628]	; (80010dc <StartOledTask+0x284>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	f200 822d 	bhi.w	80012c8 <StartOledTask+0x470>
 8000e6e:	a201      	add	r2, pc, #4	; (adr r2, 8000e74 <StartOledTask+0x1c>)
 8000e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e74:	08000e89 	.word	0x08000e89
 8000e78:	08001221 	.word	0x08001221
 8000e7c:	08001121 	.word	0x08001121
 8000e80:	08000fad 	.word	0x08000fad
 8000e84:	080011e9 	.word	0x080011e9
		case StartLayer:
			if(press == 1) statusOled = MenuLayer;
 8000e88:	4b95      	ldr	r3, [pc, #596]	; (80010e0 <StartOledTask+0x288>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d102      	bne.n	8000e96 <StartOledTask+0x3e>
 8000e90:	4b92      	ldr	r3, [pc, #584]	; (80010dc <StartOledTask+0x284>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
			SSD1306_GotoXY(0, 52);
 8000e96:	2134      	movs	r1, #52	; 0x34
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f001 fe2b 	bl	8002af4 <SSD1306_GotoXY>
			distancemm[0] = '0' + ((int)distance % 10000/1000);
 8000e9e:	4b91      	ldr	r3, [pc, #580]	; (80010e4 <StartOledTask+0x28c>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	4a91      	ldr	r2, [pc, #580]	; (80010e8 <StartOledTask+0x290>)
 8000ea4:	fba2 1203 	umull	r1, r2, r2, r3
 8000ea8:	0b52      	lsrs	r2, r2, #13
 8000eaa:	f242 7110 	movw	r1, #10000	; 0x2710
 8000eae:	fb01 f202 	mul.w	r2, r1, r2
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4a8d      	ldr	r2, [pc, #564]	; (80010ec <StartOledTask+0x294>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	099b      	lsrs	r3, r3, #6
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	3330      	adds	r3, #48	; 0x30
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b8a      	ldr	r3, [pc, #552]	; (80010f0 <StartOledTask+0x298>)
 8000ec8:	701a      	strb	r2, [r3, #0]
			distancemm[1] = '0' + ((int)distance % 1000/100);
 8000eca:	4b86      	ldr	r3, [pc, #536]	; (80010e4 <StartOledTask+0x28c>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	4a87      	ldr	r2, [pc, #540]	; (80010ec <StartOledTask+0x294>)
 8000ed0:	fba2 1203 	umull	r1, r2, r2, r3
 8000ed4:	0992      	lsrs	r2, r2, #6
 8000ed6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000eda:	fb01 f202 	mul.w	r2, r1, r2
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	4a84      	ldr	r2, [pc, #528]	; (80010f4 <StartOledTask+0x29c>)
 8000ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee8:	095b      	lsrs	r3, r3, #5
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	3330      	adds	r3, #48	; 0x30
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b7f      	ldr	r3, [pc, #508]	; (80010f0 <StartOledTask+0x298>)
 8000ef4:	705a      	strb	r2, [r3, #1]
			distancemm[2] = '0' + ((int)distance % 100/10);
 8000ef6:	4b7b      	ldr	r3, [pc, #492]	; (80010e4 <StartOledTask+0x28c>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	4a7e      	ldr	r2, [pc, #504]	; (80010f4 <StartOledTask+0x29c>)
 8000efc:	fba2 1203 	umull	r1, r2, r2, r3
 8000f00:	0952      	lsrs	r2, r2, #5
 8000f02:	2164      	movs	r1, #100	; 0x64
 8000f04:	fb01 f202 	mul.w	r2, r1, r2
 8000f08:	1a9b      	subs	r3, r3, r2
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	4a7a      	ldr	r2, [pc, #488]	; (80010f8 <StartOledTask+0x2a0>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	08db      	lsrs	r3, r3, #3
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	3330      	adds	r3, #48	; 0x30
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b74      	ldr	r3, [pc, #464]	; (80010f0 <StartOledTask+0x298>)
 8000f1e:	709a      	strb	r2, [r3, #2]
			distancemm[3] = '0' + ((int)distance % 10);
 8000f20:	4b70      	ldr	r3, [pc, #448]	; (80010e4 <StartOledTask+0x28c>)
 8000f22:	881a      	ldrh	r2, [r3, #0]
 8000f24:	4b74      	ldr	r3, [pc, #464]	; (80010f8 <StartOledTask+0x2a0>)
 8000f26:	fba3 1302 	umull	r1, r3, r3, r2
 8000f2a:	08d9      	lsrs	r1, r3, #3
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	3330      	adds	r3, #48	; 0x30
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b6c      	ldr	r3, [pc, #432]	; (80010f0 <StartOledTask+0x298>)
 8000f40:	70da      	strb	r2, [r3, #3]
			SSD1306_Puts("Distance:    mm", &Font_7x10, 1);
 8000f42:	2201      	movs	r2, #1
 8000f44:	496d      	ldr	r1, [pc, #436]	; (80010fc <StartOledTask+0x2a4>)
 8000f46:	486e      	ldr	r0, [pc, #440]	; (8001100 <StartOledTask+0x2a8>)
 8000f48:	f001 fe6a 	bl	8002c20 <SSD1306_Puts>
			SSD1306_GotoXY(62, 52);
 8000f4c:	2134      	movs	r1, #52	; 0x34
 8000f4e:	203e      	movs	r0, #62	; 0x3e
 8000f50:	f001 fdd0 	bl	8002af4 <SSD1306_GotoXY>
			SSD1306_Putc(distancemm[0], &Font_7x10, 1);
 8000f54:	4b66      	ldr	r3, [pc, #408]	; (80010f0 <StartOledTask+0x298>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4968      	ldr	r1, [pc, #416]	; (80010fc <StartOledTask+0x2a4>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 fddf 	bl	8002b20 <SSD1306_Putc>
			SSD1306_GotoXY(69, 52);
 8000f62:	2134      	movs	r1, #52	; 0x34
 8000f64:	2045      	movs	r0, #69	; 0x45
 8000f66:	f001 fdc5 	bl	8002af4 <SSD1306_GotoXY>
			SSD1306_Putc(distancemm[1], &Font_7x10, 1);
 8000f6a:	4b61      	ldr	r3, [pc, #388]	; (80010f0 <StartOledTask+0x298>)
 8000f6c:	785b      	ldrb	r3, [r3, #1]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4962      	ldr	r1, [pc, #392]	; (80010fc <StartOledTask+0x2a4>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 fdd4 	bl	8002b20 <SSD1306_Putc>
			SSD1306_GotoXY(76, 52);
 8000f78:	2134      	movs	r1, #52	; 0x34
 8000f7a:	204c      	movs	r0, #76	; 0x4c
 8000f7c:	f001 fdba 	bl	8002af4 <SSD1306_GotoXY>
			SSD1306_Putc(distancemm[2], &Font_7x10, 1);
 8000f80:	4b5b      	ldr	r3, [pc, #364]	; (80010f0 <StartOledTask+0x298>)
 8000f82:	789b      	ldrb	r3, [r3, #2]
 8000f84:	2201      	movs	r2, #1
 8000f86:	495d      	ldr	r1, [pc, #372]	; (80010fc <StartOledTask+0x2a4>)
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 fdc9 	bl	8002b20 <SSD1306_Putc>
			SSD1306_GotoXY(83, 52);
 8000f8e:	2134      	movs	r1, #52	; 0x34
 8000f90:	2053      	movs	r0, #83	; 0x53
 8000f92:	f001 fdaf 	bl	8002af4 <SSD1306_GotoXY>
			SSD1306_Putc(distancemm[3], &Font_7x10, 1);
 8000f96:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <StartOledTask+0x298>)
 8000f98:	78db      	ldrb	r3, [r3, #3]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4957      	ldr	r1, [pc, #348]	; (80010fc <StartOledTask+0x2a4>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fdbe 	bl	8002b20 <SSD1306_Putc>
			Print(StartLayer);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff fba7 	bl	80006f8 <Print>
			break;
 8000faa:	e18d      	b.n	80012c8 <StartOledTask+0x470>
		case SettingsLayer:
			if(press == 1) statusOled = MenuLayer;
 8000fac:	4b4c      	ldr	r3, [pc, #304]	; (80010e0 <StartOledTask+0x288>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d102      	bne.n	8000fba <StartOledTask+0x162>
 8000fb4:	4b49      	ldr	r3, [pc, #292]	; (80010dc <StartOledTask+0x284>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
			liquidVolume = encoderPosition%50;
 8000fba:	4b52      	ldr	r3, [pc, #328]	; (8001104 <StartOledTask+0x2ac>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b4d      	ldr	r3, [pc, #308]	; (80010f4 <StartOledTask+0x29c>)
 8000fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8000fc4:	091b      	lsrs	r3, r3, #4
 8000fc6:	2132      	movs	r1, #50	; 0x32
 8000fc8:	fb01 f303 	mul.w	r3, r1, r3
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b4d      	ldr	r3, [pc, #308]	; (8001108 <StartOledTask+0x2b0>)
 8000fd2:	601a      	str	r2, [r3, #0]
			SSD1306_GotoXY(10, 0);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	200a      	movs	r0, #10
 8000fd8:	f001 fd8c 	bl	8002af4 <SSD1306_GotoXY>
			SSD1306_Puts(" SETTINGS ", &Font_11x18, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	494b      	ldr	r1, [pc, #300]	; (800110c <StartOledTask+0x2b4>)
 8000fe0:	484b      	ldr	r0, [pc, #300]	; (8001110 <StartOledTask+0x2b8>)
 8000fe2:	f001 fe1d 	bl	8002c20 <SSD1306_Puts>
			SSD1306_GotoXY(0, 52);
 8000fe6:	2134      	movs	r1, #52	; 0x34
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f001 fd83 	bl	8002af4 <SSD1306_GotoXY>
			volume[0] = '0' + ((int)liquidVolume % 100 / 10);
 8000fee:	4b46      	ldr	r3, [pc, #280]	; (8001108 <StartOledTask+0x2b0>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <StartOledTask+0x29c>)
 8000ff4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ff8:	1159      	asrs	r1, r3, #5
 8000ffa:	17d3      	asrs	r3, r2, #31
 8000ffc:	1acb      	subs	r3, r1, r3
 8000ffe:	2164      	movs	r1, #100	; 0x64
 8001000:	fb01 f303 	mul.w	r3, r1, r3
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	4a43      	ldr	r2, [pc, #268]	; (8001114 <StartOledTask+0x2bc>)
 8001008:	fb82 1203 	smull	r1, r2, r2, r3
 800100c:	1092      	asrs	r2, r2, #2
 800100e:	17db      	asrs	r3, r3, #31
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3330      	adds	r3, #48	; 0x30
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b3f      	ldr	r3, [pc, #252]	; (8001118 <StartOledTask+0x2c0>)
 800101a:	701a      	strb	r2, [r3, #0]
			volume[1] = '0' + ((int)liquidVolume % 10);
 800101c:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <StartOledTask+0x2b0>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b3c      	ldr	r3, [pc, #240]	; (8001114 <StartOledTask+0x2bc>)
 8001022:	fb83 1302 	smull	r1, r3, r3, r2
 8001026:	1099      	asrs	r1, r3, #2
 8001028:	17d3      	asrs	r3, r2, #31
 800102a:	1ac9      	subs	r1, r1, r3
 800102c:	460b      	mov	r3, r1
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	1ad1      	subs	r1, r2, r3
 8001036:	b2cb      	uxtb	r3, r1
 8001038:	3330      	adds	r3, #48	; 0x30
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <StartOledTask+0x2c0>)
 800103e:	705a      	strb	r2, [r3, #1]
			SSD1306_Puts("Liquid volume:  ml", &Font_7x10, 1);
 8001040:	2201      	movs	r2, #1
 8001042:	492e      	ldr	r1, [pc, #184]	; (80010fc <StartOledTask+0x2a4>)
 8001044:	4835      	ldr	r0, [pc, #212]	; (800111c <StartOledTask+0x2c4>)
 8001046:	f001 fdeb 	bl	8002c20 <SSD1306_Puts>
			SSD1306_GotoXY(98, 52);
 800104a:	2134      	movs	r1, #52	; 0x34
 800104c:	2062      	movs	r0, #98	; 0x62
 800104e:	f001 fd51 	bl	8002af4 <SSD1306_GotoXY>
			SSD1306_Putc(volume[0], &Font_7x10, 1);
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <StartOledTask+0x2c0>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	4928      	ldr	r1, [pc, #160]	; (80010fc <StartOledTask+0x2a4>)
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fd60 	bl	8002b20 <SSD1306_Putc>
			SSD1306_GotoXY(105, 52);
 8001060:	2134      	movs	r1, #52	; 0x34
 8001062:	2069      	movs	r0, #105	; 0x69
 8001064:	f001 fd46 	bl	8002af4 <SSD1306_GotoXY>
			SSD1306_Putc(volume[1], &Font_7x10, 1);
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <StartOledTask+0x2c0>)
 800106a:	785b      	ldrb	r3, [r3, #1]
 800106c:	2201      	movs	r2, #1
 800106e:	4923      	ldr	r1, [pc, #140]	; (80010fc <StartOledTask+0x2a4>)
 8001070:	4618      	mov	r0, r3
 8001072:	f001 fd55 	bl	8002b20 <SSD1306_Putc>
			SSD1306_DrawFilledRectangle(13, 29, liquidVolume*2, 12, 1);
 8001076:	4b24      	ldr	r3, [pc, #144]	; (8001108 <StartOledTask+0x2b0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	b29b      	uxth	r3, r3
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	b29a      	uxth	r2, r3
 8001080:	2301      	movs	r3, #1
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	230c      	movs	r3, #12
 8001086:	211d      	movs	r1, #29
 8001088:	200d      	movs	r0, #13
 800108a:	f001 ff53 	bl	8002f34 <SSD1306_DrawFilledRectangle>
			SSD1306_DrawFilledRectangle(14+liquidVolume*2, 29, 100-liquidVolume*2, 12, 0);
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <StartOledTask+0x2b0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3307      	adds	r3, #7
 8001094:	b29b      	uxth	r3, r3
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	b298      	uxth	r0, r3
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <StartOledTask+0x2b0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	2300      	movs	r3, #0
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	230c      	movs	r3, #12
 80010ae:	211d      	movs	r1, #29
 80010b0:	f001 ff40 	bl	8002f34 <SSD1306_DrawFilledRectangle>
			SSD1306_DrawRectangle(13, 28, 102, 14, 1);
 80010b4:	2301      	movs	r3, #1
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	230e      	movs	r3, #14
 80010ba:	2266      	movs	r2, #102	; 0x66
 80010bc:	211c      	movs	r1, #28
 80010be:	200d      	movs	r0, #13
 80010c0:	f001 fece 	bl	8002e60 <SSD1306_DrawRectangle>
			SSD1306_DrawRectangle(14, 29, 100, 12, 1);
 80010c4:	2301      	movs	r3, #1
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	230c      	movs	r3, #12
 80010ca:	2264      	movs	r2, #100	; 0x64
 80010cc:	211d      	movs	r1, #29
 80010ce:	200e      	movs	r0, #14
 80010d0:	f001 fec6 	bl	8002e60 <SSD1306_DrawRectangle>
			SSD1306_UpdateScreen();
 80010d4:	f001 fc68 	bl	80029a8 <SSD1306_UpdateScreen>
			break;
 80010d8:	e0f6      	b.n	80012c8 <StartOledTask+0x470>
 80010da:	bf00      	nop
 80010dc:	200003d1 	.word	0x200003d1
 80010e0:	200003d4 	.word	0x200003d4
 80010e4:	200003d8 	.word	0x200003d8
 80010e8:	d1b71759 	.word	0xd1b71759
 80010ec:	10624dd3 	.word	0x10624dd3
 80010f0:	20000010 	.word	0x20000010
 80010f4:	51eb851f 	.word	0x51eb851f
 80010f8:	cccccccd 	.word	0xcccccccd
 80010fc:	20000104 	.word	0x20000104
 8001100:	08008cd8 	.word	0x08008cd8
 8001104:	200003cc 	.word	0x200003cc
 8001108:	20000008 	.word	0x20000008
 800110c:	2000010c 	.word	0x2000010c
 8001110:	08008ce8 	.word	0x08008ce8
 8001114:	66666667 	.word	0x66666667
 8001118:	2000000c 	.word	0x2000000c
 800111c:	08008cf4 	.word	0x08008cf4
		case PutShot:
			if(press == 1) statusOled = Searching;
 8001120:	4b6d      	ldr	r3, [pc, #436]	; (80012d8 <StartOledTask+0x480>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d102      	bne.n	800112e <StartOledTask+0x2d6>
 8001128:	4b6c      	ldr	r3, [pc, #432]	; (80012dc <StartOledTask+0x484>)
 800112a:	2204      	movs	r2, #4
 800112c:	701a      	strb	r2, [r3, #0]
			SSD1306_GotoXY(0, 53);
 800112e:	2135      	movs	r1, #53	; 0x35
 8001130:	2000      	movs	r0, #0
 8001132:	f001 fcdf 	bl	8002af4 <SSD1306_GotoXY>
			SSD1306_Puts("Put shot to feeder", &Font_7x10, 1);
 8001136:	2201      	movs	r2, #1
 8001138:	4969      	ldr	r1, [pc, #420]	; (80012e0 <StartOledTask+0x488>)
 800113a:	486a      	ldr	r0, [pc, #424]	; (80012e4 <StartOledTask+0x48c>)
 800113c:	f001 fd70 	bl	8002c20 <SSD1306_Puts>
			if (flagDirectionPut == 1)
 8001140:	4b69      	ldr	r3, [pc, #420]	; (80012e8 <StartOledTask+0x490>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d12b      	bne.n	80011a0 <StartOledTask+0x348>
			{
				SSD1306_DrawFilledRectangle(20, 0, 75, 50, 0);
 8001148:	2300      	movs	r3, #0
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2332      	movs	r3, #50	; 0x32
 800114e:	224b      	movs	r2, #75	; 0x4b
 8001150:	2100      	movs	r1, #0
 8001152:	2014      	movs	r0, #20
 8001154:	f001 feee 	bl	8002f34 <SSD1306_DrawFilledRectangle>
				SSD1306_DrawBitmap(25, -animation-12, put, 68, 50, 1);
 8001158:	4b64      	ldr	r3, [pc, #400]	; (80012ec <StartOledTask+0x494>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	b29a      	uxth	r2, r3
 800115e:	f06f 030b 	mvn.w	r3, #11
 8001162:	1a9b      	subs	r3, r3, r2
 8001164:	b29b      	uxth	r3, r3
 8001166:	b219      	sxth	r1, r3
 8001168:	2301      	movs	r3, #1
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	2332      	movs	r3, #50	; 0x32
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2344      	movs	r3, #68	; 0x44
 8001172:	4a5f      	ldr	r2, [pc, #380]	; (80012f0 <StartOledTask+0x498>)
 8001174:	2019      	movs	r0, #25
 8001176:	f001 faea 	bl	800274e <SSD1306_DrawBitmap>
				SSD1306_DrawBitmap(58, -animation+27, put2, 14, 20, 1);
 800117a:	4b5c      	ldr	r3, [pc, #368]	; (80012ec <StartOledTask+0x494>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	f1c3 031b 	rsb	r3, r3, #27
 8001184:	b29b      	uxth	r3, r3
 8001186:	b219      	sxth	r1, r3
 8001188:	2301      	movs	r3, #1
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	2314      	movs	r3, #20
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	230e      	movs	r3, #14
 8001192:	4a58      	ldr	r2, [pc, #352]	; (80012f4 <StartOledTask+0x49c>)
 8001194:	203a      	movs	r0, #58	; 0x3a
 8001196:	f001 fada 	bl	800274e <SSD1306_DrawBitmap>
				SSD1306_UpdateScreen();
 800119a:	f001 fc05 	bl	80029a8 <SSD1306_UpdateScreen>
				SSD1306_DrawFilledRectangle(20, 0, 75, 50, 0);
				SSD1306_DrawBitmap(25, animation-32, put, 68, 50, 1);
				SSD1306_DrawBitmap(58, 27, put2, 14, 20, 1);
				SSD1306_UpdateScreen();
			}
			break;
 800119e:	e093      	b.n	80012c8 <StartOledTask+0x470>
				SSD1306_DrawFilledRectangle(20, 0, 75, 50, 0);
 80011a0:	2300      	movs	r3, #0
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2332      	movs	r3, #50	; 0x32
 80011a6:	224b      	movs	r2, #75	; 0x4b
 80011a8:	2100      	movs	r1, #0
 80011aa:	2014      	movs	r0, #20
 80011ac:	f001 fec2 	bl	8002f34 <SSD1306_DrawFilledRectangle>
				SSD1306_DrawBitmap(25, animation-32, put, 68, 50, 1);
 80011b0:	4b4e      	ldr	r3, [pc, #312]	; (80012ec <StartOledTask+0x494>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	3b20      	subs	r3, #32
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b219      	sxth	r1, r3
 80011bc:	2301      	movs	r3, #1
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	2332      	movs	r3, #50	; 0x32
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2344      	movs	r3, #68	; 0x44
 80011c6:	4a4a      	ldr	r2, [pc, #296]	; (80012f0 <StartOledTask+0x498>)
 80011c8:	2019      	movs	r0, #25
 80011ca:	f001 fac0 	bl	800274e <SSD1306_DrawBitmap>
				SSD1306_DrawBitmap(58, 27, put2, 14, 20, 1);
 80011ce:	2301      	movs	r3, #1
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	2314      	movs	r3, #20
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	230e      	movs	r3, #14
 80011d8:	4a46      	ldr	r2, [pc, #280]	; (80012f4 <StartOledTask+0x49c>)
 80011da:	211b      	movs	r1, #27
 80011dc:	203a      	movs	r0, #58	; 0x3a
 80011de:	f001 fab6 	bl	800274e <SSD1306_DrawBitmap>
				SSD1306_UpdateScreen();
 80011e2:	f001 fbe1 	bl	80029a8 <SSD1306_UpdateScreen>
			break;
 80011e6:	e06f      	b.n	80012c8 <StartOledTask+0x470>
		case Searching:
			switch(status)
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <StartOledTask+0x4a0>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <StartOledTask+0x39e>
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d00a      	beq.n	800120a <StartOledTask+0x3b2>
			case Pouring:
				if(press == 1) statusOled = MenuLayer;
				DrawShotFill();
				break;
			}
			break;
 80011f4:	e068      	b.n	80012c8 <StartOledTask+0x470>
				if(press == 1) status = Pouring;
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <StartOledTask+0x480>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d102      	bne.n	8001204 <StartOledTask+0x3ac>
 80011fe:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <StartOledTask+0x4a0>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
				DrawShotSearching();
 8001204:	f7ff f9c8 	bl	8000598 <DrawShotSearching>
				break;
 8001208:	e009      	b.n	800121e <StartOledTask+0x3c6>
				if(press == 1) statusOled = MenuLayer;
 800120a:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <StartOledTask+0x480>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d102      	bne.n	8001218 <StartOledTask+0x3c0>
 8001212:	4b32      	ldr	r3, [pc, #200]	; (80012dc <StartOledTask+0x484>)
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
				DrawShotFill();
 8001218:	f7ff fa02 	bl	8000620 <DrawShotFill>
				break;
 800121c:	bf00      	nop
			break;
 800121e:	e053      	b.n	80012c8 <StartOledTask+0x470>
		case MenuLayer:
			switch(encoderPosition%2)
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <StartOledTask+0x4a4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <StartOledTask+0x3da>
 800122c:	2b01      	cmp	r3, #1
 800122e:	d025      	beq.n	800127c <StartOledTask+0x424>
				SSD1306_GotoXY(19, 39);
				SSD1306_Puts("Settings", &Font_11x18, 0);
				SSD1306_UpdateScreen();
				break;
			}
			break;
 8001230:	e049      	b.n	80012c6 <StartOledTask+0x46e>
				if(press == 1) statusOled = PutShot;
 8001232:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <StartOledTask+0x480>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d102      	bne.n	8001240 <StartOledTask+0x3e8>
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <StartOledTask+0x484>)
 800123c:	2202      	movs	r2, #2
 800123e:	701a      	strb	r2, [r3, #0]
				SSD1306_GotoXY(8, 0);
 8001240:	2100      	movs	r1, #0
 8001242:	2008      	movs	r0, #8
 8001244:	f001 fc56 	bl	8002af4 <SSD1306_GotoXY>
				SSD1306_Puts("   MENU   ", &Font_11x18, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	492d      	ldr	r1, [pc, #180]	; (8001300 <StartOledTask+0x4a8>)
 800124c:	482d      	ldr	r0, [pc, #180]	; (8001304 <StartOledTask+0x4ac>)
 800124e:	f001 fce7 	bl	8002c20 <SSD1306_Puts>
				SSD1306_GotoXY(35, 20);
 8001252:	2114      	movs	r1, #20
 8001254:	2023      	movs	r0, #35	; 0x23
 8001256:	f001 fc4d 	bl	8002af4 <SSD1306_GotoXY>
				SSD1306_Puts("Start", &Font_11x18, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	4928      	ldr	r1, [pc, #160]	; (8001300 <StartOledTask+0x4a8>)
 800125e:	482a      	ldr	r0, [pc, #168]	; (8001308 <StartOledTask+0x4b0>)
 8001260:	f001 fcde 	bl	8002c20 <SSD1306_Puts>
				SSD1306_GotoXY(19, 39);
 8001264:	2127      	movs	r1, #39	; 0x27
 8001266:	2013      	movs	r0, #19
 8001268:	f001 fc44 	bl	8002af4 <SSD1306_GotoXY>
				SSD1306_Puts("Settings", &Font_11x18, 1);
 800126c:	2201      	movs	r2, #1
 800126e:	4924      	ldr	r1, [pc, #144]	; (8001300 <StartOledTask+0x4a8>)
 8001270:	4826      	ldr	r0, [pc, #152]	; (800130c <StartOledTask+0x4b4>)
 8001272:	f001 fcd5 	bl	8002c20 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8001276:	f001 fb97 	bl	80029a8 <SSD1306_UpdateScreen>
				break;
 800127a:	e024      	b.n	80012c6 <StartOledTask+0x46e>
				if(press == 1) statusOled = SettingsLayer;
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <StartOledTask+0x480>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d102      	bne.n	800128a <StartOledTask+0x432>
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <StartOledTask+0x484>)
 8001286:	2203      	movs	r2, #3
 8001288:	701a      	strb	r2, [r3, #0]
				SSD1306_GotoXY(8, 0);
 800128a:	2100      	movs	r1, #0
 800128c:	2008      	movs	r0, #8
 800128e:	f001 fc31 	bl	8002af4 <SSD1306_GotoXY>
				SSD1306_Puts("   MENU   ", &Font_11x18, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	491a      	ldr	r1, [pc, #104]	; (8001300 <StartOledTask+0x4a8>)
 8001296:	481b      	ldr	r0, [pc, #108]	; (8001304 <StartOledTask+0x4ac>)
 8001298:	f001 fcc2 	bl	8002c20 <SSD1306_Puts>
				SSD1306_GotoXY(35, 20);
 800129c:	2114      	movs	r1, #20
 800129e:	2023      	movs	r0, #35	; 0x23
 80012a0:	f001 fc28 	bl	8002af4 <SSD1306_GotoXY>
				SSD1306_Puts("Start", &Font_11x18, 1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	4916      	ldr	r1, [pc, #88]	; (8001300 <StartOledTask+0x4a8>)
 80012a8:	4817      	ldr	r0, [pc, #92]	; (8001308 <StartOledTask+0x4b0>)
 80012aa:	f001 fcb9 	bl	8002c20 <SSD1306_Puts>
				SSD1306_GotoXY(19, 39);
 80012ae:	2127      	movs	r1, #39	; 0x27
 80012b0:	2013      	movs	r0, #19
 80012b2:	f001 fc1f 	bl	8002af4 <SSD1306_GotoXY>
				SSD1306_Puts("Settings", &Font_11x18, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	4911      	ldr	r1, [pc, #68]	; (8001300 <StartOledTask+0x4a8>)
 80012ba:	4814      	ldr	r0, [pc, #80]	; (800130c <StartOledTask+0x4b4>)
 80012bc:	f001 fcb0 	bl	8002c20 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 80012c0:	f001 fb72 	bl	80029a8 <SSD1306_UpdateScreen>
				break;
 80012c4:	bf00      	nop
			break;
 80012c6:	bf00      	nop
		}

			press = 0;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <StartOledTask+0x480>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
		osDelay(40 / portTICK_PERIOD_MS);
 80012ce:	2028      	movs	r0, #40	; 0x28
 80012d0:	f004 ff34 	bl	800613c <osDelay>
		SetAnimationTime();
 80012d4:	e5c4      	b.n	8000e60 <StartOledTask+0x8>
 80012d6:	bf00      	nop
 80012d8:	200003d4 	.word	0x200003d4
 80012dc:	200003d1 	.word	0x200003d1
 80012e0:	20000104 	.word	0x20000104
 80012e4:	08008d08 	.word	0x08008d08
 80012e8:	200001a0 	.word	0x200001a0
 80012ec:	200001a4 	.word	0x200001a4
 80012f0:	080090f4 	.word	0x080090f4
 80012f4:	080092b8 	.word	0x080092b8
 80012f8:	200003d0 	.word	0x200003d0
 80012fc:	200003cc 	.word	0x200003cc
 8001300:	2000010c 	.word	0x2000010c
 8001304:	08008d1c 	.word	0x08008d1c
 8001308:	08008d28 	.word	0x08008d28
 800130c:	08008d30 	.word	0x08008d30

08001310 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001322:	f001 ff19 	bl	8003158 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM10) {
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d101      	bne.n	8001334 <HAL_TIM_PeriodElapsedCallback+0x24>
		StopPump();
 8001330:	f7ff fa14 	bl	800075c <StopPump>

	if (htim->Instance == TIM11) {

	}
  /* USER CODE END Callback 1 */
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40010000 	.word	0x40010000
 8001340:	40014400 	.word	0x40014400

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800134c:	e7fe      	b.n	800134c <Error_Handler+0x8>
	...

08001350 <delay>:
 *  Created on: 10 Nov 2022
 *      Author: Jaroslaw
 */
#include "stepper.h"

void delay(uint16_t us) {
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <delay+0x30>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 8001362:	bf00      	nop
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <delay+0x30>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	429a      	cmp	r2, r3
 800136e:	d3f9      	bcc.n	8001364 <delay+0x14>
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000254 	.word	0x20000254

08001384 <stepper_set_rpm>:

void stepper_set_rpm(int rpm) // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	delay(60000000 / stepsperrev / rpm);
 800138c:	f643 1238 	movw	r2, #14648	; 0x3938
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	fb92 f3f3 	sdiv	r3, r2, r3
 8001396:	b29b      	uxth	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ffd9 	bl	8001350 <delay>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <stepper_half_drive>:

void stepper_half_drive(int step) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	switch (step) {
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b07      	cmp	r3, #7
 80013b4:	f200 80bc 	bhi.w	8001530 <stepper_half_drive+0x188>
 80013b8:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <stepper_half_drive+0x18>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	080013e1 	.word	0x080013e1
 80013c4:	0800140b 	.word	0x0800140b
 80013c8:	08001435 	.word	0x08001435
 80013cc:	0800145f 	.word	0x0800145f
 80013d0:	08001489 	.word	0x08001489
 80013d4:	080014b3 	.word	0x080014b3
 80013d8:	080014dd 	.word	0x080014dd
 80013dc:	08001507 	.word	0x08001507
	case 0:
		HAL_GPIO_WritePin(STEPIN1_GPIO_Port, STEPIN1_Pin, GPIO_PIN_SET);   // IN1
 80013e0:	2201      	movs	r2, #1
 80013e2:	2102      	movs	r1, #2
 80013e4:	4854      	ldr	r0, [pc, #336]	; (8001538 <stepper_half_drive+0x190>)
 80013e6:	f002 f979 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN2_GPIO_Port, STEPIN2_Pin, GPIO_PIN_RESET);   // IN2
 80013ea:	2200      	movs	r2, #0
 80013ec:	2104      	movs	r1, #4
 80013ee:	4852      	ldr	r0, [pc, #328]	; (8001538 <stepper_half_drive+0x190>)
 80013f0:	f002 f974 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN3_GPIO_Port, STEPIN3_Pin, GPIO_PIN_RESET);   // IN3
 80013f4:	2200      	movs	r2, #0
 80013f6:	2108      	movs	r1, #8
 80013f8:	484f      	ldr	r0, [pc, #316]	; (8001538 <stepper_half_drive+0x190>)
 80013fa:	f002 f96f 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN4_GPIO_Port, STEPIN4_Pin, GPIO_PIN_RESET);   // IN4
 80013fe:	2200      	movs	r2, #0
 8001400:	2110      	movs	r1, #16
 8001402:	484d      	ldr	r0, [pc, #308]	; (8001538 <stepper_half_drive+0x190>)
 8001404:	f002 f96a 	bl	80036dc <HAL_GPIO_WritePin>
		break;
 8001408:	e092      	b.n	8001530 <stepper_half_drive+0x188>

	case 1:
		HAL_GPIO_WritePin(STEPIN1_GPIO_Port, STEPIN1_Pin, GPIO_PIN_SET);   // IN1
 800140a:	2201      	movs	r2, #1
 800140c:	2102      	movs	r1, #2
 800140e:	484a      	ldr	r0, [pc, #296]	; (8001538 <stepper_half_drive+0x190>)
 8001410:	f002 f964 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN2_GPIO_Port, STEPIN2_Pin, GPIO_PIN_SET);   // IN2
 8001414:	2201      	movs	r2, #1
 8001416:	2104      	movs	r1, #4
 8001418:	4847      	ldr	r0, [pc, #284]	; (8001538 <stepper_half_drive+0x190>)
 800141a:	f002 f95f 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN3_GPIO_Port, STEPIN3_Pin, GPIO_PIN_RESET);   // IN3
 800141e:	2200      	movs	r2, #0
 8001420:	2108      	movs	r1, #8
 8001422:	4845      	ldr	r0, [pc, #276]	; (8001538 <stepper_half_drive+0x190>)
 8001424:	f002 f95a 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN4_GPIO_Port, STEPIN4_Pin, GPIO_PIN_RESET);   // IN4
 8001428:	2200      	movs	r2, #0
 800142a:	2110      	movs	r1, #16
 800142c:	4842      	ldr	r0, [pc, #264]	; (8001538 <stepper_half_drive+0x190>)
 800142e:	f002 f955 	bl	80036dc <HAL_GPIO_WritePin>
		break;
 8001432:	e07d      	b.n	8001530 <stepper_half_drive+0x188>

	case 2:
		HAL_GPIO_WritePin(STEPIN1_GPIO_Port, STEPIN1_Pin, GPIO_PIN_RESET);   // IN1
 8001434:	2200      	movs	r2, #0
 8001436:	2102      	movs	r1, #2
 8001438:	483f      	ldr	r0, [pc, #252]	; (8001538 <stepper_half_drive+0x190>)
 800143a:	f002 f94f 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN2_GPIO_Port, STEPIN2_Pin, GPIO_PIN_SET);   // IN2
 800143e:	2201      	movs	r2, #1
 8001440:	2104      	movs	r1, #4
 8001442:	483d      	ldr	r0, [pc, #244]	; (8001538 <stepper_half_drive+0x190>)
 8001444:	f002 f94a 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN3_GPIO_Port, STEPIN3_Pin, GPIO_PIN_RESET);   // IN3
 8001448:	2200      	movs	r2, #0
 800144a:	2108      	movs	r1, #8
 800144c:	483a      	ldr	r0, [pc, #232]	; (8001538 <stepper_half_drive+0x190>)
 800144e:	f002 f945 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN4_GPIO_Port, STEPIN4_Pin, GPIO_PIN_RESET);   // IN4
 8001452:	2200      	movs	r2, #0
 8001454:	2110      	movs	r1, #16
 8001456:	4838      	ldr	r0, [pc, #224]	; (8001538 <stepper_half_drive+0x190>)
 8001458:	f002 f940 	bl	80036dc <HAL_GPIO_WritePin>
		break;
 800145c:	e068      	b.n	8001530 <stepper_half_drive+0x188>

	case 3:
		HAL_GPIO_WritePin(STEPIN1_GPIO_Port, STEPIN1_Pin, GPIO_PIN_RESET);   // IN1
 800145e:	2200      	movs	r2, #0
 8001460:	2102      	movs	r1, #2
 8001462:	4835      	ldr	r0, [pc, #212]	; (8001538 <stepper_half_drive+0x190>)
 8001464:	f002 f93a 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN2_GPIO_Port, STEPIN2_Pin, GPIO_PIN_SET);   // IN2
 8001468:	2201      	movs	r2, #1
 800146a:	2104      	movs	r1, #4
 800146c:	4832      	ldr	r0, [pc, #200]	; (8001538 <stepper_half_drive+0x190>)
 800146e:	f002 f935 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN3_GPIO_Port, STEPIN3_Pin, GPIO_PIN_SET);   // IN3
 8001472:	2201      	movs	r2, #1
 8001474:	2108      	movs	r1, #8
 8001476:	4830      	ldr	r0, [pc, #192]	; (8001538 <stepper_half_drive+0x190>)
 8001478:	f002 f930 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN4_GPIO_Port, STEPIN4_Pin, GPIO_PIN_RESET);   // IN4
 800147c:	2200      	movs	r2, #0
 800147e:	2110      	movs	r1, #16
 8001480:	482d      	ldr	r0, [pc, #180]	; (8001538 <stepper_half_drive+0x190>)
 8001482:	f002 f92b 	bl	80036dc <HAL_GPIO_WritePin>
		break;
 8001486:	e053      	b.n	8001530 <stepper_half_drive+0x188>

	case 4:
		HAL_GPIO_WritePin(STEPIN1_GPIO_Port, STEPIN1_Pin, GPIO_PIN_RESET);   // IN1
 8001488:	2200      	movs	r2, #0
 800148a:	2102      	movs	r1, #2
 800148c:	482a      	ldr	r0, [pc, #168]	; (8001538 <stepper_half_drive+0x190>)
 800148e:	f002 f925 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN2_GPIO_Port, STEPIN2_Pin, GPIO_PIN_RESET);   // IN2
 8001492:	2200      	movs	r2, #0
 8001494:	2104      	movs	r1, #4
 8001496:	4828      	ldr	r0, [pc, #160]	; (8001538 <stepper_half_drive+0x190>)
 8001498:	f002 f920 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN3_GPIO_Port, STEPIN3_Pin, GPIO_PIN_SET);   // IN3
 800149c:	2201      	movs	r2, #1
 800149e:	2108      	movs	r1, #8
 80014a0:	4825      	ldr	r0, [pc, #148]	; (8001538 <stepper_half_drive+0x190>)
 80014a2:	f002 f91b 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN4_GPIO_Port, STEPIN4_Pin, GPIO_PIN_RESET);   // IN4
 80014a6:	2200      	movs	r2, #0
 80014a8:	2110      	movs	r1, #16
 80014aa:	4823      	ldr	r0, [pc, #140]	; (8001538 <stepper_half_drive+0x190>)
 80014ac:	f002 f916 	bl	80036dc <HAL_GPIO_WritePin>
		break;
 80014b0:	e03e      	b.n	8001530 <stepper_half_drive+0x188>

	case 5:
		HAL_GPIO_WritePin(STEPIN1_GPIO_Port, STEPIN1_Pin, GPIO_PIN_RESET);   // IN1
 80014b2:	2200      	movs	r2, #0
 80014b4:	2102      	movs	r1, #2
 80014b6:	4820      	ldr	r0, [pc, #128]	; (8001538 <stepper_half_drive+0x190>)
 80014b8:	f002 f910 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN2_GPIO_Port, STEPIN2_Pin, GPIO_PIN_RESET);   // IN2
 80014bc:	2200      	movs	r2, #0
 80014be:	2104      	movs	r1, #4
 80014c0:	481d      	ldr	r0, [pc, #116]	; (8001538 <stepper_half_drive+0x190>)
 80014c2:	f002 f90b 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN3_GPIO_Port, STEPIN3_Pin, GPIO_PIN_SET);   // IN3
 80014c6:	2201      	movs	r2, #1
 80014c8:	2108      	movs	r1, #8
 80014ca:	481b      	ldr	r0, [pc, #108]	; (8001538 <stepper_half_drive+0x190>)
 80014cc:	f002 f906 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN4_GPIO_Port, STEPIN4_Pin, GPIO_PIN_SET);   // IN4
 80014d0:	2201      	movs	r2, #1
 80014d2:	2110      	movs	r1, #16
 80014d4:	4818      	ldr	r0, [pc, #96]	; (8001538 <stepper_half_drive+0x190>)
 80014d6:	f002 f901 	bl	80036dc <HAL_GPIO_WritePin>
		break;
 80014da:	e029      	b.n	8001530 <stepper_half_drive+0x188>

	case 6:
		HAL_GPIO_WritePin(STEPIN1_GPIO_Port, STEPIN1_Pin, GPIO_PIN_RESET);   // IN1
 80014dc:	2200      	movs	r2, #0
 80014de:	2102      	movs	r1, #2
 80014e0:	4815      	ldr	r0, [pc, #84]	; (8001538 <stepper_half_drive+0x190>)
 80014e2:	f002 f8fb 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN2_GPIO_Port, STEPIN2_Pin, GPIO_PIN_RESET);   // IN2
 80014e6:	2200      	movs	r2, #0
 80014e8:	2104      	movs	r1, #4
 80014ea:	4813      	ldr	r0, [pc, #76]	; (8001538 <stepper_half_drive+0x190>)
 80014ec:	f002 f8f6 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN3_GPIO_Port, STEPIN3_Pin, GPIO_PIN_RESET);   // IN3
 80014f0:	2200      	movs	r2, #0
 80014f2:	2108      	movs	r1, #8
 80014f4:	4810      	ldr	r0, [pc, #64]	; (8001538 <stepper_half_drive+0x190>)
 80014f6:	f002 f8f1 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN4_GPIO_Port, STEPIN4_Pin, GPIO_PIN_SET);   // IN4
 80014fa:	2201      	movs	r2, #1
 80014fc:	2110      	movs	r1, #16
 80014fe:	480e      	ldr	r0, [pc, #56]	; (8001538 <stepper_half_drive+0x190>)
 8001500:	f002 f8ec 	bl	80036dc <HAL_GPIO_WritePin>
		break;
 8001504:	e014      	b.n	8001530 <stepper_half_drive+0x188>

	case 7:
		HAL_GPIO_WritePin(STEPIN1_GPIO_Port, STEPIN1_Pin, GPIO_PIN_SET);   // IN1
 8001506:	2201      	movs	r2, #1
 8001508:	2102      	movs	r1, #2
 800150a:	480b      	ldr	r0, [pc, #44]	; (8001538 <stepper_half_drive+0x190>)
 800150c:	f002 f8e6 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN2_GPIO_Port, STEPIN2_Pin, GPIO_PIN_RESET);   // IN2
 8001510:	2200      	movs	r2, #0
 8001512:	2104      	movs	r1, #4
 8001514:	4808      	ldr	r0, [pc, #32]	; (8001538 <stepper_half_drive+0x190>)
 8001516:	f002 f8e1 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN3_GPIO_Port, STEPIN3_Pin, GPIO_PIN_RESET);   // IN3
 800151a:	2200      	movs	r2, #0
 800151c:	2108      	movs	r1, #8
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <stepper_half_drive+0x190>)
 8001520:	f002 f8dc 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPIN4_GPIO_Port, STEPIN4_Pin, GPIO_PIN_SET);   // IN4
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <stepper_half_drive+0x190>)
 800152a:	f002 f8d7 	bl	80036dc <HAL_GPIO_WritePin>
		break;
 800152e:	bf00      	nop
	}
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40020000 	.word	0x40020000

0800153c <stepper_step_angle>:

void stepper_step_angle(float angle, int rpm) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	ed87 0a01 	vstr	s0, [r7, #4]
 8001546:	6038      	str	r0, [r7, #0]
	float anglepersequence = 0.703125;  // 360 = 512 sequences
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <stepper_step_angle+0x64>)
 800154a:	60fb      	str	r3, [r7, #12]
	int numberofsequences = (int) (angle / anglepersequence);
 800154c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001550:	ed97 7a03 	vldr	s14, [r7, #12]
 8001554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155c:	ee17 3a90 	vmov	r3, s15
 8001560:	60bb      	str	r3, [r7, #8]

	for (int seq = 0; seq < numberofsequences; seq++) {
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e011      	b.n	800158c <stepper_step_angle+0x50>
		for (int step = 7; step >= 0; step--) {
 8001568:	2307      	movs	r3, #7
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	e008      	b.n	8001580 <stepper_step_angle+0x44>
			stepper_half_drive(step);
 800156e:	6938      	ldr	r0, [r7, #16]
 8001570:	f7ff ff1a 	bl	80013a8 <stepper_half_drive>
			stepper_set_rpm(rpm);
 8001574:	6838      	ldr	r0, [r7, #0]
 8001576:	f7ff ff05 	bl	8001384 <stepper_set_rpm>
		for (int step = 7; step >= 0; step--) {
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	3b01      	subs	r3, #1
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	daf3      	bge.n	800156e <stepper_step_angle+0x32>
	for (int seq = 0; seq < numberofsequences; seq++) {
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbe9      	blt.n	8001568 <stepper_step_angle+0x2c>
		}
	}
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	3f340000 	.word	0x3f340000

080015a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_MspInit+0x54>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <HAL_MspInit+0x54>)
 80015b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_MspInit+0x54>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_MspInit+0x54>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_MspInit+0x54>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_MspInit+0x54>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	210f      	movs	r1, #15
 80015e6:	f06f 0001 	mvn.w	r0, #1
 80015ea:	f001 feb1 	bl	8003350 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800

080015fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08c      	sub	sp, #48	; 0x30
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a3a      	ldr	r2, [pc, #232]	; (8001704 <HAL_I2C_MspInit+0x108>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d12c      	bne.n	8001678 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	4b39      	ldr	r3, [pc, #228]	; (8001708 <HAL_I2C_MspInit+0x10c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a38      	ldr	r2, [pc, #224]	; (8001708 <HAL_I2C_MspInit+0x10c>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b36      	ldr	r3, [pc, #216]	; (8001708 <HAL_I2C_MspInit+0x10c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800163a:	23c0      	movs	r3, #192	; 0xc0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163e:	2312      	movs	r3, #18
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800164a:	2304      	movs	r3, #4
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4619      	mov	r1, r3
 8001654:	482d      	ldr	r0, [pc, #180]	; (800170c <HAL_I2C_MspInit+0x110>)
 8001656:	f001 fea5 	bl	80033a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <HAL_I2C_MspInit+0x10c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a29      	ldr	r2, [pc, #164]	; (8001708 <HAL_I2C_MspInit+0x10c>)
 8001664:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b27      	ldr	r3, [pc, #156]	; (8001708 <HAL_I2C_MspInit+0x10c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001676:	e041      	b.n	80016fc <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a24      	ldr	r2, [pc, #144]	; (8001710 <HAL_I2C_MspInit+0x114>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d13c      	bne.n	80016fc <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_I2C_MspInit+0x10c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <HAL_I2C_MspInit+0x10c>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_I2C_MspInit+0x10c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800169e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a4:	2312      	movs	r3, #18
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016b0:	2304      	movs	r3, #4
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4814      	ldr	r0, [pc, #80]	; (800170c <HAL_I2C_MspInit+0x110>)
 80016bc:	f001 fe72 	bl	80033a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016c0:	2308      	movs	r3, #8
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c4:	2312      	movs	r3, #18
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80016d0:	2309      	movs	r3, #9
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	480c      	ldr	r0, [pc, #48]	; (800170c <HAL_I2C_MspInit+0x110>)
 80016dc:	f001 fe62 	bl	80033a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_I2C_MspInit+0x10c>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_I2C_MspInit+0x10c>)
 80016ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ee:	6413      	str	r3, [r2, #64]	; 0x40
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_I2C_MspInit+0x10c>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3730      	adds	r7, #48	; 0x30
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40005400 	.word	0x40005400
 8001708:	40023800 	.word	0x40023800
 800170c:	40020400 	.word	0x40020400
 8001710:	40005800 	.word	0x40005800

08001714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001724:	d10e      	bne.n	8001744 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_TIM_Base_MspInit+0x98>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a1f      	ldr	r2, [pc, #124]	; (80017ac <HAL_TIM_Base_MspInit+0x98>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <HAL_TIM_Base_MspInit+0x98>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001742:	e02e      	b.n	80017a2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM10)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a19      	ldr	r2, [pc, #100]	; (80017b0 <HAL_TIM_Base_MspInit+0x9c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d116      	bne.n	800177c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_TIM_Base_MspInit+0x98>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a15      	ldr	r2, [pc, #84]	; (80017ac <HAL_TIM_Base_MspInit+0x98>)
 8001758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_TIM_Base_MspInit+0x98>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	210f      	movs	r1, #15
 800176e:	2019      	movs	r0, #25
 8001770:	f001 fdee 	bl	8003350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001774:	2019      	movs	r0, #25
 8001776:	f001 fe07 	bl	8003388 <HAL_NVIC_EnableIRQ>
}
 800177a:	e012      	b.n	80017a2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM11)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0c      	ldr	r2, [pc, #48]	; (80017b4 <HAL_TIM_Base_MspInit+0xa0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10d      	bne.n	80017a2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_TIM_Base_MspInit+0x98>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <HAL_TIM_Base_MspInit+0x98>)
 8001790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_TIM_Base_MspInit+0x98>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40014400 	.word	0x40014400
 80017b4:	40014800 	.word	0x40014800

080017b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1d      	ldr	r2, [pc, #116]	; (800184c <HAL_TIM_Encoder_MspInit+0x94>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d133      	bne.n	8001842 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <HAL_TIM_Encoder_MspInit+0x98>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a1b      	ldr	r2, [pc, #108]	; (8001850 <HAL_TIM_Encoder_MspInit+0x98>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_TIM_Encoder_MspInit+0x98>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_TIM_Encoder_MspInit+0x98>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <HAL_TIM_Encoder_MspInit+0x98>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_TIM_Encoder_MspInit+0x98>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001812:	23c0      	movs	r3, #192	; 0xc0
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181a:	2301      	movs	r3, #1
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001822:	2302      	movs	r3, #2
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4809      	ldr	r0, [pc, #36]	; (8001854 <HAL_TIM_Encoder_MspInit+0x9c>)
 800182e:	f001 fdb9 	bl	80033a4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2105      	movs	r1, #5
 8001836:	201d      	movs	r0, #29
 8001838:	f001 fd8a 	bl	8003350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800183c:	201d      	movs	r0, #29
 800183e:	f001 fda3 	bl	8003388 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	; 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40000400 	.word	0x40000400
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000

08001858 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM4)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d10d      	bne.n	8001886 <HAL_TIM_OnePulse_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_TIM_OnePulse_MspInit+0x40>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HAL_TIM_OnePulse_MspInit+0x40>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <HAL_TIM_OnePulse_MspInit+0x40>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40000800 	.word	0x40000800
 8001898:	40023800 	.word	0x40023800

0800189c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_InitTick+0xd0>)
 80018b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b4:	4a2d      	ldr	r2, [pc, #180]	; (800196c <HAL_InitTick+0xd0>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6453      	str	r3, [r2, #68]	; 0x44
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_InitTick+0xd0>)
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018c8:	f107 020c 	add.w	r2, r7, #12
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 fc52 	bl	800517c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018d8:	f003 fc3c 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
 80018dc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e0:	4a23      	ldr	r2, [pc, #140]	; (8001970 <HAL_InitTick+0xd4>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	0c9b      	lsrs	r3, r3, #18
 80018e8:	3b01      	subs	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018ec:	4b21      	ldr	r3, [pc, #132]	; (8001974 <HAL_InitTick+0xd8>)
 80018ee:	4a22      	ldr	r2, [pc, #136]	; (8001978 <HAL_InitTick+0xdc>)
 80018f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <HAL_InitTick+0xd8>)
 80018f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018fa:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <HAL_InitTick+0xd8>)
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <HAL_InitTick+0xd8>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001906:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <HAL_InitTick+0xd8>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_InitTick+0xd8>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001912:	4818      	ldr	r0, [pc, #96]	; (8001974 <HAL_InitTick+0xd8>)
 8001914:	f003 fc64 	bl	80051e0 <HAL_TIM_Base_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800191e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001922:	2b00      	cmp	r3, #0
 8001924:	d11b      	bne.n	800195e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001926:	4813      	ldr	r0, [pc, #76]	; (8001974 <HAL_InitTick+0xd8>)
 8001928:	f003 fd04 	bl	8005334 <HAL_TIM_Base_Start_IT>
 800192c:	4603      	mov	r3, r0
 800192e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001936:	2b00      	cmp	r3, #0
 8001938:	d111      	bne.n	800195e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800193a:	2019      	movs	r0, #25
 800193c:	f001 fd24 	bl	8003388 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b0f      	cmp	r3, #15
 8001944:	d808      	bhi.n	8001958 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001946:	2200      	movs	r2, #0
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	2019      	movs	r0, #25
 800194c:	f001 fd00 	bl	8003350 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_InitTick+0xe0>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e002      	b.n	800195e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800195e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001962:	4618      	mov	r0, r3
 8001964:	3730      	adds	r7, #48	; 0x30
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	431bde83 	.word	0x431bde83
 8001974:	200003dc 	.word	0x200003dc
 8001978:	40010000 	.word	0x40010000
 800197c:	20000114 	.word	0x20000114

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019b0:	4803      	ldr	r0, [pc, #12]	; (80019c0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80019b2:	f003 fef4 	bl	800579e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80019b6:	4803      	ldr	r0, [pc, #12]	; (80019c4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80019b8:	f003 fef1 	bl	800579e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200003dc 	.word	0x200003dc
 80019c4:	2000032c 	.word	0x2000032c

080019c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <TIM3_IRQHandler+0x10>)
 80019ce:	f003 fee6 	bl	800579e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000029c 	.word	0x2000029c

080019dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <tofInit>:
// Opens a file system handle to the I2C device
// reads the calibration data and sets the device
// into auto sensing mode
//
int tofInit(int bLongRange)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	return initSensor(bLongRange); // finally, initialize the magic numbers in the sensor
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fd09 	bl	8002420 <initSensor>
 8001a0e:	4603      	mov	r3, r0

} /* tofInit() */
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <readReg16>:

//
// Read a pair of registers as a 16-bit value
//
static unsigned short readReg16(uint8_t ucAddr)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp[2];

	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8001a22:	1dfa      	adds	r2, r7, #7
 8001a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	2152      	movs	r1, #82	; 0x52
 8001a2e:	480c      	ldr	r0, [pc, #48]	; (8001a60 <readReg16+0x48>)
 8001a30:	f001 ffcc 	bl	80039cc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, ucTemp, 2, 1000);
 8001a34:	f107 020c 	add.w	r2, r7, #12
 8001a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2302      	movs	r3, #2
 8001a40:	2153      	movs	r1, #83	; 0x53
 8001a42:	4807      	ldr	r0, [pc, #28]	; (8001a60 <readReg16+0x48>)
 8001a44:	f002 f8c0 	bl	8003bc8 <HAL_I2C_Master_Receive>

	return (unsigned short)((ucTemp[0]<<8) + ucTemp[1]);
 8001a48:	7b3b      	ldrb	r3, [r7, #12]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	7b7b      	ldrb	r3, [r7, #13]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	b29b      	uxth	r3, r3
} /* readReg16() */
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000200 	.word	0x20000200

08001a64 <readReg>:

//
// Read a single register value from I2C device
//
static unsigned char readReg(uint8_t ucAddr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp;

	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8001a6e:	1dfa      	adds	r2, r7, #7
 8001a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2301      	movs	r3, #1
 8001a78:	2152      	movs	r1, #82	; 0x52
 8001a7a:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <readReg+0x3c>)
 8001a7c:	f001 ffa6 	bl	80039cc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 8001a80:	f107 020f 	add.w	r2, r7, #15
 8001a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	2153      	movs	r1, #83	; 0x53
 8001a8e:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <readReg+0x3c>)
 8001a90:	f002 f89a 	bl	8003bc8 <HAL_I2C_Master_Receive>

	return ucTemp;
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
} /* ReadReg() */
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000200 	.word	0x20000200

08001aa4 <readMulti>:

static void readMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8001ab4:	1dfa      	adds	r2, r7, #7
 8001ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	2301      	movs	r3, #1
 8001abe:	2152      	movs	r1, #82	; 0x52
 8001ac0:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <readMulti+0x3c>)
 8001ac2:	f001 ff83 	bl	80039cc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, pBuf, iCount, 1000);
 8001ac6:	88bb      	ldrh	r3, [r7, #4]
 8001ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001acc:	9200      	str	r2, [sp, #0]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	2153      	movs	r1, #83	; 0x53
 8001ad2:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <readMulti+0x3c>)
 8001ad4:	f002 f878 	bl	8003bc8 <HAL_I2C_Master_Receive>
} /* readMulti() */
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000200 	.word	0x20000200

08001ae4 <writeMulti>:

static void writeMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 8001ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ae8:	b087      	sub	sp, #28
 8001aea:	af02      	add	r7, sp, #8
 8001aec:	4603      	mov	r3, r0
 8001aee:	6039      	str	r1, [r7, #0]
 8001af0:	71fb      	strb	r3, [r7, #7]
 8001af2:	4613      	mov	r3, r2
 8001af4:	80bb      	strh	r3, [r7, #4]
 8001af6:	466b      	mov	r3, sp
 8001af8:	461e      	mov	r6, r3
	uint8_t ucTemp[iCount+1];
 8001afa:	88bb      	ldrh	r3, [r7, #4]
 8001afc:	1c59      	adds	r1, r3, #1
 8001afe:	1e4b      	subs	r3, r1, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	460a      	mov	r2, r1
 8001b04:	2300      	movs	r3, #0
 8001b06:	4690      	mov	r8, r2
 8001b08:	4699      	mov	r9, r3
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b1e:	460a      	mov	r2, r1
 8001b20:	2300      	movs	r3, #0
 8001b22:	4614      	mov	r4, r2
 8001b24:	461d      	mov	r5, r3
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	00eb      	lsls	r3, r5, #3
 8001b30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b34:	00e2      	lsls	r2, r4, #3
 8001b36:	460b      	mov	r3, r1
 8001b38:	3307      	adds	r3, #7
 8001b3a:	08db      	lsrs	r3, r3, #3
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	ebad 0d03 	sub.w	sp, sp, r3
 8001b42:	ab02      	add	r3, sp, #8
 8001b44:	3300      	adds	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]

	ucTemp[0] = ucAddr;
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	79fa      	ldrb	r2, [r7, #7]
 8001b4c:	701a      	strb	r2, [r3, #0]
	memcpy(&ucTemp[1], pBuf, iCount);
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3301      	adds	r3, #1
 8001b52:	88ba      	ldrh	r2, [r7, #4]
 8001b54:	6839      	ldr	r1, [r7, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f006 ffb6 	bl	8008ac8 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, iCount+1, 1000);
 8001b5c:	88bb      	ldrh	r3, [r7, #4]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b66:	9200      	str	r2, [sp, #0]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	2152      	movs	r1, #82	; 0x52
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <writeMulti+0x9c>)
 8001b6e:	f001 ff2d 	bl	80039cc <HAL_I2C_Master_Transmit>
 8001b72:	46b5      	mov	sp, r6
} /* writeMulti() */
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000200 	.word	0x20000200

08001b84 <writeReg16>:
//
// Write a 16-bit value to a register
//
static void writeReg16(uint8_t ucAddr, uint16_t usValue)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	71fb      	strb	r3, [r7, #7]
 8001b90:	4613      	mov	r3, r2
 8001b92:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp[4];

	ucTemp[0] = ucAddr;
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = (uint8_t)(usValue >> 8); // MSB first
 8001b98:	88bb      	ldrh	r3, [r7, #4]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	737b      	strb	r3, [r7, #13]
	ucTemp[2] = (uint8_t)usValue;
 8001ba2:	88bb      	ldrh	r3, [r7, #4]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 3, 1000);
 8001ba8:	f107 020c 	add.w	r2, r7, #12
 8001bac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	2152      	movs	r1, #82	; 0x52
 8001bb6:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <writeReg16+0x40>)
 8001bb8:	f001 ff08 	bl	80039cc <HAL_I2C_Master_Transmit>
} /* writeReg16() */
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000200 	.word	0x20000200

08001bc8 <writeReg>:
//
// Write a single register/value pair
//
static void writeReg(uint8_t ucAddr, uint8_t ucValue)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460a      	mov	r2, r1
 8001bd2:	71fb      	strb	r3, [r7, #7]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	71bb      	strb	r3, [r7, #6]
	uint8_t ucTemp[2];

	ucTemp[0] = ucAddr;
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = ucValue;
 8001bdc:	79bb      	ldrb	r3, [r7, #6]
 8001bde:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 2, 1000);
 8001be0:	f107 020c 	add.w	r2, r7, #12
 8001be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2302      	movs	r3, #2
 8001bec:	2152      	movs	r1, #82	; 0x52
 8001bee:	4803      	ldr	r0, [pc, #12]	; (8001bfc <writeReg+0x34>)
 8001bf0:	f001 feec 	bl	80039cc <HAL_I2C_Master_Transmit>
} /* writeReg() */
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000200 	.word	0x20000200

08001c00 <writeRegList>:

//
// Write a list of register/value pairs to the I2C device
//
static void writeRegList(uint8_t *ucList)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af02      	add	r7, sp, #8
 8001c06:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = *ucList++; // count is the first element in the list
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	73fb      	strb	r3, [r7, #15]


	while (ucCount)
 8001c12:	e00e      	b.n	8001c32 <writeRegList+0x32>
	{
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucList, 2, 1000);
 8001c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	2152      	movs	r1, #82	; 0x52
 8001c20:	4808      	ldr	r0, [pc, #32]	; (8001c44 <writeRegList+0x44>)
 8001c22:	f001 fed3 	bl	80039cc <HAL_I2C_Master_Transmit>
		ucList += 2;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3302      	adds	r3, #2
 8001c2a:	607b      	str	r3, [r7, #4]
		ucCount--;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
	while (ucCount)
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1ed      	bne.n	8001c14 <writeRegList+0x14>
	}
} /* writeRegList() */
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000200 	.word	0x20000200

08001c48 <getSpadInfo>:
0x44,0x00, 0x45,0x20, 0x47,0x08, 0x48,0x28, 0x67,0x00, 0x70,0x04, 0x71,0x01,
0x72,0xfe, 0x76,0x00, 0x77,0x00, 0xff,0x01, 0x0d,0x01, 0xff,0x00, 0x80,0x01,
0x01,0xf8, 0xff,0x01, 0x8e,0x01, 0x00,0x01, 0xff,0x00, 0x80,0x00};

static int getSpadInfo(uint8_t *pCount, uint8_t *pTypeIsAperture)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
int iTimeout;
uint8_t ucTemp;
#define MAX_TIMEOUT 50

  writeRegList(ucSPAD0);
 8001c52:	482d      	ldr	r0, [pc, #180]	; (8001d08 <getSpadInfo+0xc0>)
 8001c54:	f7ff ffd4 	bl	8001c00 <writeRegList>
  writeReg(0x83, readReg(0x83) | 0x04);
 8001c58:	2083      	movs	r0, #131	; 0x83
 8001c5a:	f7ff ff03 	bl	8001a64 <readReg>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	4619      	mov	r1, r3
 8001c68:	2083      	movs	r0, #131	; 0x83
 8001c6a:	f7ff ffad 	bl	8001bc8 <writeReg>
  writeRegList(ucSPAD1);
 8001c6e:	4827      	ldr	r0, [pc, #156]	; (8001d0c <getSpadInfo+0xc4>)
 8001c70:	f7ff ffc6 	bl	8001c00 <writeRegList>
  iTimeout = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  while(iTimeout < MAX_TIMEOUT)
 8001c78:	e00b      	b.n	8001c92 <getSpadInfo+0x4a>
  {
    if (readReg(0x83) != 0x00) break;
 8001c7a:	2083      	movs	r0, #131	; 0x83
 8001c7c:	f7ff fef2 	bl	8001a64 <readReg>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <getSpadInfo+0x52>
    iTimeout++;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 8001c8c:	2005      	movs	r0, #5
 8001c8e:	f001 fa83 	bl	8003198 <HAL_Delay>
  while(iTimeout < MAX_TIMEOUT)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b31      	cmp	r3, #49	; 0x31
 8001c96:	ddf0      	ble.n	8001c7a <getSpadInfo+0x32>
 8001c98:	e000      	b.n	8001c9c <getSpadInfo+0x54>
    if (readReg(0x83) != 0x00) break;
 8001c9a:	bf00      	nop
  }
  if (iTimeout == MAX_TIMEOUT)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b32      	cmp	r3, #50	; 0x32
 8001ca0:	d101      	bne.n	8001ca6 <getSpadInfo+0x5e>
  {
    //fprintf(stderr, "Timeout while waiting for SPAD info\n");
    return 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e02b      	b.n	8001cfe <getSpadInfo+0xb6>
  }
  writeReg(0x83,0x01);
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	2083      	movs	r0, #131	; 0x83
 8001caa:	f7ff ff8d 	bl	8001bc8 <writeReg>
  ucTemp = readReg(0x92);
 8001cae:	2092      	movs	r0, #146	; 0x92
 8001cb0:	f7ff fed8 	bl	8001a64 <readReg>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	72fb      	strb	r3, [r7, #11]
  *pCount = (ucTemp & 0x7f);
 8001cb8:	7afb      	ldrb	r3, [r7, #11]
 8001cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	701a      	strb	r2, [r3, #0]
  *pTypeIsAperture = (ucTemp & 0x80);
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	701a      	strb	r2, [r3, #0]
  writeReg(0x81,0x00);
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	2081      	movs	r0, #129	; 0x81
 8001cd4:	f7ff ff78 	bl	8001bc8 <writeReg>
  writeReg(0xff,0x06);
 8001cd8:	2106      	movs	r1, #6
 8001cda:	20ff      	movs	r0, #255	; 0xff
 8001cdc:	f7ff ff74 	bl	8001bc8 <writeReg>
  writeReg(0x83, readReg(0x83) & ~0x04);
 8001ce0:	2083      	movs	r0, #131	; 0x83
 8001ce2:	f7ff febf 	bl	8001a64 <readReg>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f023 0304 	bic.w	r3, r3, #4
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	4619      	mov	r1, r3
 8001cf0:	2083      	movs	r0, #131	; 0x83
 8001cf2:	f7ff ff69 	bl	8001bc8 <writeReg>
  writeRegList(ucSPAD2);
 8001cf6:	4806      	ldr	r0, [pc, #24]	; (8001d10 <getSpadInfo+0xc8>)
 8001cf8:	f7ff ff82 	bl	8001c00 <writeRegList>

  return 1;
 8001cfc:	2301      	movs	r3, #1
} /* getSpadInfo() */
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000030 	.word	0x20000030
 8001d0c:	2000003c 	.word	0x2000003c
 8001d10:	20000048 	.word	0x20000048

08001d14 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
static uint16_t decodeTimeout(uint16_t reg_val)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001d22:	88fa      	ldrh	r2, [r7, #6]
 8001d24:	0a12      	lsrs	r2, r2, #8
 8001d26:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001d28:	4093      	lsls	r3, r2
 8001d2a:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b29b      	uxth	r3, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
static uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	460a      	mov	r2, r1
 8001d46:	80fb      	strh	r3, [r7, #6]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001d4c:	797b      	ldrb	r3, [r7, #5]
 8001d4e:	4a0d      	ldr	r2, [pc, #52]	; (8001d84 <timeoutMclksToMicroseconds+0x48>)
 8001d50:	fb02 f303 	mul.w	r3, r2, r3
 8001d54:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d58:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <timeoutMclksToMicroseconds+0x4c>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	099b      	lsrs	r3, r3, #6
 8001d60:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	fb03 f202 	mul.w	r2, r3, r2
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <timeoutMclksToMicroseconds+0x4c>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	099b      	lsrs	r3, r3, #6
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	003a2f00 	.word	0x003a2f00
 8001d88:	10624dd3 	.word	0x10624dd3

08001d8c <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <timeoutMicrosecondsToMclks+0x44>)
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001da4:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <timeoutMicrosecondsToMclks+0x48>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	099b      	lsrs	r3, r3, #6
 8001dac:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001db4:	fb03 f202 	mul.w	r2, r3, r2
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	085b      	lsrs	r3, r3, #1
 8001dbc:	441a      	add	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	003a2f00 	.word	0x003a2f00
 8001dd4:	10624dd3 	.word	0x10624dd3

08001dd8 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
static uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d018      	beq.n	8001e22 <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8001df6:	e005      	b.n	8001e04 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8001dfe:	897b      	ldrh	r3, [r7, #10]
 8001e00:	3301      	adds	r3, #1
 8001e02:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f4      	bne.n	8001df8 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8001e0e:	897b      	ldrh	r3, [r7, #10]
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	e000      	b.n	8001e24 <encodeTimeout+0x4c>
  }
  else { return 0; }
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <getSequenceStepTimeouts>:

static void getSequenceStepTimeouts(uint8_t enables, SequenceStepTimeouts * timeouts)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  timeouts->pre_range_vcsel_period_pclks = ((readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8001e3c:	2050      	movs	r0, #80	; 0x50
 8001e3e:	f7ff fe11 	bl	8001a64 <readReg>
 8001e42:	4603      	mov	r3, r0
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001e52:	2046      	movs	r0, #70	; 0x46
 8001e54:	f7ff fe06 	bl	8001a64 <readReg>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4610      	mov	r0, r2
 8001e72:	f7ff ff63 	bl	8001d3c <timeoutMclksToMicroseconds>
 8001e76:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001e7c:	2051      	movs	r0, #81	; 0x51
 8001e7e:	f7ff fdcb 	bl	8001a18 <readReg16>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff45 	bl	8001d14 <decodeTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	f7ff ff4c 	bl	8001d3c <timeoutMclksToMicroseconds>
 8001ea4:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = ((readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8001eaa:	2070      	movs	r0, #112	; 0x70
 8001eac:	f7ff fdda 	bl	8001a64 <readReg>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001ec0:	2071      	movs	r0, #113	; 0x71
 8001ec2:	f7ff fda9 	bl	8001a18 <readReg16>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff23 	bl	8001d14 <decodeTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	811a      	strh	r2, [r3, #8]

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <getSequenceStepTimeouts+0xc0>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	891a      	ldrh	r2, [r3, #8]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	88db      	ldrh	r3, [r3, #6]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4619      	mov	r1, r3
 8001efc:	4610      	mov	r0, r2
 8001efe:	f7ff ff1d 	bl	8001d3c <timeoutMclksToMicroseconds>
 8001f02:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	615a      	str	r2, [r3, #20]
} /* getSequenceStepTimeouts() */
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
static int setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	; 0x30
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	460a      	mov	r2, r1
 8001f1a:	71fb      	strb	r3, [r7, #7]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8001f20:	79bb      	ldrb	r3, [r7, #6]
 8001f22:	085b      	lsrs	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	3b01      	subs	r3, #1
 8001f28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f7ff fd99 	bl	8001a64 <readReg>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  getSequenceStepTimeouts(enables, &timeouts);
 8001f38:	f107 020c 	add.w	r2, r7, #12
 8001f3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff74 	bl	8001e30 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d15c      	bne.n	8002008 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8001f4e:	79bb      	ldrb	r3, [r7, #6]
 8001f50:	3b0c      	subs	r3, #12
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d824      	bhi.n	8001fa0 <setVcselPulsePeriod+0x90>
 8001f56:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <setVcselPulsePeriod+0x4c>)
 8001f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5c:	08001f79 	.word	0x08001f79
 8001f60:	08001fa1 	.word	0x08001fa1
 8001f64:	08001f83 	.word	0x08001f83
 8001f68:	08001fa1 	.word	0x08001fa1
 8001f6c:	08001f8d 	.word	0x08001f8d
 8001f70:	08001fa1 	.word	0x08001fa1
 8001f74:	08001f97 	.word	0x08001f97
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8001f78:	2118      	movs	r1, #24
 8001f7a:	2057      	movs	r0, #87	; 0x57
 8001f7c:	f7ff fe24 	bl	8001bc8 <writeReg>
        break;
 8001f80:	e010      	b.n	8001fa4 <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8001f82:	2130      	movs	r1, #48	; 0x30
 8001f84:	2057      	movs	r0, #87	; 0x57
 8001f86:	f7ff fe1f 	bl	8001bc8 <writeReg>
        break;
 8001f8a:	e00b      	b.n	8001fa4 <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8001f8c:	2140      	movs	r1, #64	; 0x40
 8001f8e:	2057      	movs	r0, #87	; 0x57
 8001f90:	f7ff fe1a 	bl	8001bc8 <writeReg>
        break;
 8001f94:	e006      	b.n	8001fa4 <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8001f96:	2150      	movs	r1, #80	; 0x50
 8001f98:	2057      	movs	r0, #87	; 0x57
 8001f9a:	f7ff fe15 	bl	8001bc8 <writeReg>
        break;
 8001f9e:	e001      	b.n	8001fa4 <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e0fe      	b.n	80021a2 <setVcselPulsePeriod+0x292>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8001fa4:	2108      	movs	r1, #8
 8001fa6:	2056      	movs	r0, #86	; 0x56
 8001fa8:	f7ff fe0e 	bl	8001bc8 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001fac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	2050      	movs	r0, #80	; 0x50
 8001fb4:	f7ff fe08 	bl	8001bc8 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	79ba      	ldrb	r2, [r7, #6]
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fee4 	bl	8001d8c <timeoutMicrosecondsToMclks>
 8001fc4:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8001fc6:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001fc8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff04 	bl	8001dd8 <encodeTimeout>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	2051      	movs	r0, #81	; 0x51
 8001fd6:	f7ff fdd5 	bl	8001b84 <writeReg16>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	79ba      	ldrb	r2, [r7, #6]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fed3 	bl	8001d8c <timeoutMicrosecondsToMclks>
 8001fe6:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8001fe8:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001fea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff0:	d804      	bhi.n	8001ffc <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8001ff2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ff4:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	e000      	b.n	8001ffe <setVcselPulsePeriod+0xee>
 8001ffc:	23ff      	movs	r3, #255	; 0xff
 8001ffe:	4619      	mov	r1, r3
 8002000:	2046      	movs	r0, #70	; 0x46
 8002002:	f7ff fde1 	bl	8001bc8 <writeReg>
 8002006:	e0b3      	b.n	8002170 <setVcselPulsePeriod+0x260>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	2b01      	cmp	r3, #1
 800200c:	f040 80ae 	bne.w	800216c <setVcselPulsePeriod+0x25c>
  {
    switch (period_pclks)
 8002010:	79bb      	ldrb	r3, [r7, #6]
 8002012:	3b08      	subs	r3, #8
 8002014:	2b06      	cmp	r3, #6
 8002016:	f200 8085 	bhi.w	8002124 <setVcselPulsePeriod+0x214>
 800201a:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <setVcselPulsePeriod+0x110>)
 800201c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002020:	0800203d 	.word	0x0800203d
 8002024:	08002125 	.word	0x08002125
 8002028:	08002077 	.word	0x08002077
 800202c:	08002125 	.word	0x08002125
 8002030:	080020b1 	.word	0x080020b1
 8002034:	08002125 	.word	0x08002125
 8002038:	080020eb 	.word	0x080020eb
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 800203c:	2110      	movs	r1, #16
 800203e:	2048      	movs	r0, #72	; 0x48
 8002040:	f7ff fdc2 	bl	8001bc8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8002044:	2108      	movs	r1, #8
 8002046:	2047      	movs	r0, #71	; 0x47
 8002048:	f7ff fdbe 	bl	8001bc8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 800204c:	2102      	movs	r1, #2
 800204e:	2032      	movs	r0, #50	; 0x32
 8002050:	f7ff fdba 	bl	8001bc8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8002054:	210c      	movs	r1, #12
 8002056:	2030      	movs	r0, #48	; 0x30
 8002058:	f7ff fdb6 	bl	8001bc8 <writeReg>
        writeReg(0xFF, 0x01);
 800205c:	2101      	movs	r1, #1
 800205e:	20ff      	movs	r0, #255	; 0xff
 8002060:	f7ff fdb2 	bl	8001bc8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8002064:	2130      	movs	r1, #48	; 0x30
 8002066:	2030      	movs	r0, #48	; 0x30
 8002068:	f7ff fdae 	bl	8001bc8 <writeReg>
        writeReg(0xFF, 0x00);
 800206c:	2100      	movs	r1, #0
 800206e:	20ff      	movs	r0, #255	; 0xff
 8002070:	f7ff fdaa 	bl	8001bc8 <writeReg>
        break;
 8002074:	e058      	b.n	8002128 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8002076:	2128      	movs	r1, #40	; 0x28
 8002078:	2048      	movs	r0, #72	; 0x48
 800207a:	f7ff fda5 	bl	8001bc8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800207e:	2108      	movs	r1, #8
 8002080:	2047      	movs	r0, #71	; 0x47
 8002082:	f7ff fda1 	bl	8001bc8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8002086:	2103      	movs	r1, #3
 8002088:	2032      	movs	r0, #50	; 0x32
 800208a:	f7ff fd9d 	bl	8001bc8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 800208e:	2109      	movs	r1, #9
 8002090:	2030      	movs	r0, #48	; 0x30
 8002092:	f7ff fd99 	bl	8001bc8 <writeReg>
        writeReg(0xFF, 0x01);
 8002096:	2101      	movs	r1, #1
 8002098:	20ff      	movs	r0, #255	; 0xff
 800209a:	f7ff fd95 	bl	8001bc8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 800209e:	2120      	movs	r1, #32
 80020a0:	2030      	movs	r0, #48	; 0x30
 80020a2:	f7ff fd91 	bl	8001bc8 <writeReg>
        writeReg(0xFF, 0x00);
 80020a6:	2100      	movs	r1, #0
 80020a8:	20ff      	movs	r0, #255	; 0xff
 80020aa:	f7ff fd8d 	bl	8001bc8 <writeReg>
        break;
 80020ae:	e03b      	b.n	8002128 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 80020b0:	2138      	movs	r1, #56	; 0x38
 80020b2:	2048      	movs	r0, #72	; 0x48
 80020b4:	f7ff fd88 	bl	8001bc8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80020b8:	2108      	movs	r1, #8
 80020ba:	2047      	movs	r0, #71	; 0x47
 80020bc:	f7ff fd84 	bl	8001bc8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80020c0:	2103      	movs	r1, #3
 80020c2:	2032      	movs	r0, #50	; 0x32
 80020c4:	f7ff fd80 	bl	8001bc8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 80020c8:	2108      	movs	r1, #8
 80020ca:	2030      	movs	r0, #48	; 0x30
 80020cc:	f7ff fd7c 	bl	8001bc8 <writeReg>
        writeReg(0xFF, 0x01);
 80020d0:	2101      	movs	r1, #1
 80020d2:	20ff      	movs	r0, #255	; 0xff
 80020d4:	f7ff fd78 	bl	8001bc8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80020d8:	2120      	movs	r1, #32
 80020da:	2030      	movs	r0, #48	; 0x30
 80020dc:	f7ff fd74 	bl	8001bc8 <writeReg>
        writeReg(0xFF, 0x00);
 80020e0:	2100      	movs	r1, #0
 80020e2:	20ff      	movs	r0, #255	; 0xff
 80020e4:	f7ff fd70 	bl	8001bc8 <writeReg>
        break;
 80020e8:	e01e      	b.n	8002128 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 80020ea:	2148      	movs	r1, #72	; 0x48
 80020ec:	2048      	movs	r0, #72	; 0x48
 80020ee:	f7ff fd6b 	bl	8001bc8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80020f2:	2108      	movs	r1, #8
 80020f4:	2047      	movs	r0, #71	; 0x47
 80020f6:	f7ff fd67 	bl	8001bc8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80020fa:	2103      	movs	r1, #3
 80020fc:	2032      	movs	r0, #50	; 0x32
 80020fe:	f7ff fd63 	bl	8001bc8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8002102:	2107      	movs	r1, #7
 8002104:	2030      	movs	r0, #48	; 0x30
 8002106:	f7ff fd5f 	bl	8001bc8 <writeReg>
        writeReg(0xFF, 0x01);
 800210a:	2101      	movs	r1, #1
 800210c:	20ff      	movs	r0, #255	; 0xff
 800210e:	f7ff fd5b 	bl	8001bc8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8002112:	2120      	movs	r1, #32
 8002114:	2030      	movs	r0, #48	; 0x30
 8002116:	f7ff fd57 	bl	8001bc8 <writeReg>
        writeReg(0xFF, 0x00);
 800211a:	2100      	movs	r1, #0
 800211c:	20ff      	movs	r0, #255	; 0xff
 800211e:	f7ff fd53 	bl	8001bc8 <writeReg>
        break;
 8002122:	e001      	b.n	8002128 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return 0;
 8002124:	2300      	movs	r3, #0
 8002126:	e03c      	b.n	80021a2 <setVcselPulsePeriod+0x292>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8002128:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800212c:	4619      	mov	r1, r3
 800212e:	2070      	movs	r0, #112	; 0x70
 8002130:	f7ff fd4a 	bl	8001bc8 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	79ba      	ldrb	r2, [r7, #6]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fe26 	bl	8001d8c <timeoutMicrosecondsToMclks>
 8002140:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8002142:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002144:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <setVcselPulsePeriod+0x248>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8002150:	8a7a      	ldrh	r2, [r7, #18]
 8002152:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002154:	4413      	add	r3, r2
 8002156:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002158:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fe3c 	bl	8001dd8 <encodeTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	4619      	mov	r1, r3
 8002164:	2071      	movs	r0, #113	; 0x71
 8002166:	f7ff fd0d 	bl	8001b84 <writeReg16>
 800216a:	e001      	b.n	8002170 <setVcselPulsePeriod+0x260>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return 0;
 800216c:	2300      	movs	r3, #0
 800216e:	e018      	b.n	80021a2 <setVcselPulsePeriod+0x292>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(measurement_timing_budget_us);
 8002170:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <setVcselPulsePeriod+0x29c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f81b 	bl	80021b0 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 800217a:	2001      	movs	r0, #1
 800217c:	f7ff fc72 	bl	8001a64 <readReg>
 8002180:	4603      	mov	r3, r0
 8002182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8002186:	2102      	movs	r1, #2
 8002188:	2001      	movs	r0, #1
 800218a:	f7ff fd1d 	bl	8001bc8 <writeReg>
  performSingleRefCalibration(0x0);
 800218e:	2000      	movs	r0, #0
 8002190:	f000 f916 	bl	80023c0 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8002194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002198:	4619      	mov	r1, r3
 800219a:	2001      	movs	r0, #1
 800219c:	f7ff fd14 	bl	8001bc8 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return 1;
 80021a0:	2301      	movs	r3, #1
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3730      	adds	r7, #48	; 0x30
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000428 	.word	0x20000428

080021b0 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
static int setMeasurementTimingBudget(uint32_t budget_us)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b090      	sub	sp, #64	; 0x40
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
uint16_t final_range_timeout_mclks;

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 80021b8:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80021bc:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const EndOverhead        = 960;
 80021be:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80021c2:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const MsrcOverhead       = 660;
 80021c4:	f44f 7325 	mov.w	r3, #660	; 0x294
 80021c8:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t const TccOverhead        = 590;
 80021ca:	f240 234e 	movw	r3, #590	; 0x24e
 80021ce:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const DssOverhead        = 690;
 80021d0:	f240 23b2 	movw	r3, #690	; 0x2b2
 80021d4:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const PreRangeOverhead   = 660;
 80021d6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80021da:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const FinalRangeOverhead = 550;
 80021dc:	f240 2326 	movw	r3, #550	; 0x226
 80021e0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  uint32_t const MinTimingBudget = 20000;
 80021e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28

  if (budget_us < MinTimingBudget) { return 0; }
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d201      	bcs.n	80021f4 <setMeasurementTimingBudget+0x44>
 80021f0:	2300      	movs	r3, #0
 80021f2:	e074      	b.n	80022de <setMeasurementTimingBudget+0x12e>

  used_budget_us = StartOverhead + EndOverhead;
 80021f4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80021f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021f8:	4413      	add	r3, r2
 80021fa:	63fb      	str	r3, [r7, #60]	; 0x3c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 80021fc:	2001      	movs	r0, #1
 80021fe:	f7ff fc31 	bl	8001a64 <readReg>
 8002202:	4603      	mov	r3, r0
 8002204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  getSequenceStepTimeouts(enables, &timeouts);
 8002208:	f107 0208 	add.w	r2, r7, #8
 800220c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fe0c 	bl	8001e30 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8002218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <setMeasurementTimingBudget+0x80>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002228:	4413      	add	r3, r2
 800222a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800222c:	4413      	add	r3, r2
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 8002230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <setMeasurementTimingBudget+0x9c>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002240:	4413      	add	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002246:	4413      	add	r3, r2
 8002248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800224a:	e00b      	b.n	8002264 <setMeasurementTimingBudget+0xb4>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 800224c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <setMeasurementTimingBudget+0xb4>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800225c:	4413      	add	r3, r2
 800225e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002260:	4413      	add	r3, r2
 8002262:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <setMeasurementTimingBudget+0xcc>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002274:	4413      	add	r3, r2
 8002276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002278:	4413      	add	r3, r2
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 800227c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002280:	2b00      	cmp	r3, #0
 8002282:	da2b      	bge.n	80022dc <setMeasurementTimingBudget+0x12c>
  {
    used_budget_us += FinalRangeOverhead;
 8002284:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002286:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002288:	4413      	add	r3, r2
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 800228c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	d901      	bls.n	8002298 <setMeasurementTimingBudget+0xe8>
    {
      // "Requested timeout too big."
      return 0;
 8002294:	2300      	movs	r3, #0
 8002296:	e022      	b.n	80022de <setMeasurementTimingBudget+0x12e>
    }

    final_range_timeout_us = budget_us - used_budget_us;
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	623b      	str	r3, [r7, #32]
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80022a0:	897b      	ldrh	r3, [r7, #10]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4619      	mov	r1, r3
 80022a6:	6a38      	ldr	r0, [r7, #32]
 80022a8:	f7ff fd70 	bl	8001d8c <timeoutMicrosecondsToMclks>
 80022ac:	4603      	mov	r3, r0
    final_range_timeout_mclks =
 80022ae:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80022b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <setMeasurementTimingBudget+0x114>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80022bc:	89fa      	ldrh	r2, [r7, #14]
 80022be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80022c0:	4413      	add	r3, r2
 80022c2:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80022c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fd86 	bl	8001dd8 <encodeTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4619      	mov	r1, r3
 80022d0:	2071      	movs	r0, #113	; 0x71
 80022d2:	f7ff fc57 	bl	8001b84 <writeReg16>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <setMeasurementTimingBudget+0x138>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6013      	str	r3, [r2, #0]
  }
  return 1;
 80022dc:	2301      	movs	r3, #1
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3740      	adds	r7, #64	; 0x40
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000428 	.word	0x20000428

080022ec <getMeasurementTimingBudget>:

static uint32_t getMeasurementTimingBudget(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	; 0x30
 80022f0:	af00      	add	r7, sp, #0
  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 80022f2:	f240 7376 	movw	r3, #1910	; 0x776
 80022f6:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 80022f8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80022fc:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 80022fe:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002302:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 8002304:	f240 234e 	movw	r3, #590	; 0x24e
 8002308:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 800230a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800230e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 8002310:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002314:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 8002316:	f240 2326 	movw	r3, #550	; 0x226
 800231a:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 800231c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800231e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002320:	4413      	add	r3, r2
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8002324:	2001      	movs	r0, #1
 8002326:	f7ff fb9d 	bl	8001a64 <readReg>
 800232a:	4603      	mov	r3, r0
 800232c:	777b      	strb	r3, [r7, #29]
  getSequenceStepTimeouts(enables, &timeouts);
 800232e:	1d3a      	adds	r2, r7, #4
 8002330:	7f7b      	ldrb	r3, [r7, #29]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fd7b 	bl	8001e30 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 800233a:	7f7b      	ldrb	r3, [r7, #29]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <getMeasurementTimingBudget+0x64>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002348:	4413      	add	r3, r2
 800234a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800234c:	4413      	add	r3, r2
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 8002350:	7f7b      	ldrb	r3, [r7, #29]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <getMeasurementTimingBudget+0x7e>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800235e:	4413      	add	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002364:	4413      	add	r3, r2
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002368:	e00a      	b.n	8002380 <getMeasurementTimingBudget+0x94>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 800236a:	7f7b      	ldrb	r3, [r7, #29]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <getMeasurementTimingBudget+0x94>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002378:	4413      	add	r3, r2
 800237a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800237c:	4413      	add	r3, r2
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002380:	7f7b      	ldrb	r3, [r7, #29]
 8002382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	8c3b      	ldrh	r3, [r7, #32]
 800238e:	4413      	add	r3, r2
 8002390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002392:	4413      	add	r3, r2
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8002396:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800239a:	2b00      	cmp	r3, #0
 800239c:	da05      	bge.n	80023aa <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	8bfb      	ldrh	r3, [r7, #30]
 80023a2:	4413      	add	r3, r2
 80023a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a6:	4413      	add	r3, r2
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80023aa:	4a04      	ldr	r2, [pc, #16]	; (80023bc <getMeasurementTimingBudget+0xd0>)
 80023ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ae:	6013      	str	r3, [r2, #0]
  return budget_us;
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3730      	adds	r7, #48	; 0x30
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000428 	.word	0x20000428

080023c0 <performSingleRefCalibration>:

static int performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
int iTimeout;
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	4619      	mov	r1, r3
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7ff fbf7 	bl	8001bc8 <writeReg>

  iTimeout = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80023de:	e00a      	b.n	80023f6 <performSingleRefCalibration+0x36>
  {
    iTimeout++;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3301      	adds	r3, #1
 80023e4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 80023e6:	2005      	movs	r0, #5
 80023e8:	f000 fed6 	bl	8003198 <HAL_Delay>
    if (iTimeout > 100) { return 0; }
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	dd01      	ble.n	80023f6 <performSingleRefCalibration+0x36>
 80023f2:	2300      	movs	r3, #0
 80023f4:	e010      	b.n	8002418 <performSingleRefCalibration+0x58>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80023f6:	2013      	movs	r0, #19
 80023f8:	f7ff fb34 	bl	8001a64 <readReg>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0ec      	beq.n	80023e0 <performSingleRefCalibration+0x20>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002406:	2101      	movs	r1, #1
 8002408:	200b      	movs	r0, #11
 800240a:	f7ff fbdd 	bl	8001bc8 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 800240e:	2100      	movs	r1, #0
 8002410:	2000      	movs	r0, #0
 8002412:	f7ff fbd9 	bl	8001bc8 <writeReg>

  return 1;
 8002416:	2301      	movs	r3, #1
} /* performSingleRefCalibration() */
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <initSensor>:

//
// Initialize the vl53l0x
//
static int initSensor(int bLongRangeMode)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
unsigned char spad_count=0, spad_type_is_aperture=0, ref_spad_map[6];
 8002428:	2300      	movs	r3, #0
 800242a:	75bb      	strb	r3, [r7, #22]
 800242c:	2300      	movs	r3, #0
 800242e:	757b      	strb	r3, [r7, #21]
unsigned char ucFirstSPAD, ucSPADsEnabled;
int i;

// set 2.8V mode
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
  readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8002430:	2089      	movs	r0, #137	; 0x89
 8002432:	f7ff fb17 	bl	8001a64 <readReg>
 8002436:	4603      	mov	r3, r0
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4619      	mov	r1, r3
 8002440:	2089      	movs	r0, #137	; 0x89
 8002442:	f7ff fbc1 	bl	8001bc8 <writeReg>
// Set I2C standard mode
  writeRegList(ucI2CMode);
 8002446:	486a      	ldr	r0, [pc, #424]	; (80025f0 <initSensor+0x1d0>)
 8002448:	f7ff fbda 	bl	8001c00 <writeRegList>
  stop_variable = readReg(0x91);
 800244c:	2091      	movs	r0, #145	; 0x91
 800244e:	f7ff fb09 	bl	8001a64 <readReg>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <initSensor+0x1d4>)
 8002458:	701a      	strb	r2, [r3, #0]
  writeRegList(ucI2CMode2);
 800245a:	4867      	ldr	r0, [pc, #412]	; (80025f8 <initSensor+0x1d8>)
 800245c:	f7ff fbd0 	bl	8001c00 <writeRegList>
// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(REG_MSRC_CONFIG_CONTROL, readReg(REG_MSRC_CONFIG_CONTROL) | 0x12);
 8002460:	2060      	movs	r0, #96	; 0x60
 8002462:	f7ff faff 	bl	8001a64 <readReg>
 8002466:	4603      	mov	r3, r0
 8002468:	f043 0312 	orr.w	r3, r3, #18
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4619      	mov	r1, r3
 8002470:	2060      	movs	r0, #96	; 0x60
 8002472:	f7ff fba9 	bl	8001bc8 <writeReg>
  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 32); // 0.25
 8002476:	2120      	movs	r1, #32
 8002478:	2044      	movs	r0, #68	; 0x44
 800247a:	f7ff fb83 	bl	8001b84 <writeReg16>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 800247e:	21ff      	movs	r1, #255	; 0xff
 8002480:	2001      	movs	r0, #1
 8002482:	f7ff fba1 	bl	8001bc8 <writeReg>
  getSpadInfo(&spad_count, &spad_type_is_aperture);
 8002486:	f107 0215 	add.w	r2, r7, #21
 800248a:	f107 0316 	add.w	r3, r7, #22
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fbd9 	bl	8001c48 <getSpadInfo>

  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	2206      	movs	r2, #6
 800249c:	4619      	mov	r1, r3
 800249e:	20b0      	movs	r0, #176	; 0xb0
 80024a0:	f7ff fb00 	bl	8001aa4 <readMulti>
//printf("initial spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);
  writeRegList(ucSPAD);
 80024a4:	4855      	ldr	r0, [pc, #340]	; (80025fc <initSensor+0x1dc>)
 80024a6:	f7ff fbab 	bl	8001c00 <writeRegList>
  ucFirstSPAD = (spad_type_is_aperture) ? 12: 0;
 80024aa:	7d7b      	ldrb	r3, [r7, #21]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <initSensor+0x94>
 80024b0:	230c      	movs	r3, #12
 80024b2:	e000      	b.n	80024b6 <initSensor+0x96>
 80024b4:	2300      	movs	r3, #0
 80024b6:	75fb      	strb	r3, [r7, #23]
  ucSPADsEnabled = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	77fb      	strb	r3, [r7, #31]
// clear bits for unused SPADs
  for (i=0; i<48; i++)
 80024bc:	2300      	movs	r3, #0
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	e037      	b.n	8002532 <initSensor+0x112>
  {
    if (i < ucFirstSPAD || ucSPADsEnabled == spad_count)
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	db03      	blt.n	80024d2 <initSensor+0xb2>
 80024ca:	7dbb      	ldrb	r3, [r7, #22]
 80024cc:	7ffa      	ldrb	r2, [r7, #31]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d119      	bne.n	8002506 <initSensor+0xe6>
    {
      ref_spad_map[i>>3] &= ~(1<<(i & 7));
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	10db      	asrs	r3, r3, #3
 80024d6:	3320      	adds	r3, #32
 80024d8:	443b      	add	r3, r7
 80024da:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80024de:	b25a      	sxtb	r2, r3
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	b25b      	sxtb	r3, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	4013      	ands	r3, r2
 80024f4:	b25a      	sxtb	r2, r3
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	10db      	asrs	r3, r3, #3
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	3320      	adds	r3, #32
 80024fe:	443b      	add	r3, r7
 8002500:	f803 2c14 	strb.w	r2, [r3, #-20]
 8002504:	e012      	b.n	800252c <initSensor+0x10c>
    }
    else if (ref_spad_map[i>>3] & (1<< (i & 7)))
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	10db      	asrs	r3, r3, #3
 800250a:	3320      	adds	r3, #32
 800250c:	443b      	add	r3, r7
 800250e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002512:	461a      	mov	r2, r3
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	fa42 f303 	asr.w	r3, r2, r3
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <initSensor+0x10c>
    {
      ucSPADsEnabled++;
 8002526:	7ffb      	ldrb	r3, [r7, #31]
 8002528:	3301      	adds	r3, #1
 800252a:	77fb      	strb	r3, [r7, #31]
  for (i=0; i<48; i++)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	3301      	adds	r3, #1
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	2b2f      	cmp	r3, #47	; 0x2f
 8002536:	ddc4      	ble.n	80024c2 <initSensor+0xa2>
    }
  } // for i
  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	2206      	movs	r2, #6
 800253e:	4619      	mov	r1, r3
 8002540:	20b0      	movs	r0, #176	; 0xb0
 8002542:	f7ff facf 	bl	8001ae4 <writeMulti>

// load default tuning settings
  writeRegList(ucDefTuning); // long list of magic numbers
 8002546:	482e      	ldr	r0, [pc, #184]	; (8002600 <initSensor+0x1e0>)
 8002548:	f7ff fb5a 	bl	8001c00 <writeRegList>

// change some settings for long range mode
  if (bLongRangeMode)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <initSensor+0x14a>
  {
	writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 13); // 0.1
 8002552:	210d      	movs	r1, #13
 8002554:	2044      	movs	r0, #68	; 0x44
 8002556:	f7ff fb15 	bl	8001b84 <writeReg16>
	setVcselPulsePeriod(VcselPeriodPreRange, 18);
 800255a:	2112      	movs	r1, #18
 800255c:	2000      	movs	r0, #0
 800255e:	f7ff fcd7 	bl	8001f10 <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 8002562:	210e      	movs	r1, #14
 8002564:	2001      	movs	r0, #1
 8002566:	f7ff fcd3 	bl	8001f10 <setVcselPulsePeriod>
  }

// set interrupt configuration to "new sample ready"
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 800256a:	2104      	movs	r1, #4
 800256c:	200a      	movs	r0, #10
 800256e:	f7ff fb2b 	bl	8001bc8 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8002572:	2084      	movs	r0, #132	; 0x84
 8002574:	f7ff fa76 	bl	8001a64 <readReg>
 8002578:	4603      	mov	r3, r0
 800257a:	f023 0310 	bic.w	r3, r3, #16
 800257e:	b2db      	uxtb	r3, r3
 8002580:	4619      	mov	r1, r3
 8002582:	2084      	movs	r0, #132	; 0x84
 8002584:	f7ff fb20 	bl	8001bc8 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002588:	2101      	movs	r1, #1
 800258a:	200b      	movs	r0, #11
 800258c:	f7ff fb1c 	bl	8001bc8 <writeReg>
  measurement_timing_budget_us = getMeasurementTimingBudget();
 8002590:	f7ff feac 	bl	80022ec <getMeasurementTimingBudget>
 8002594:	4603      	mov	r3, r0
 8002596:	4a1b      	ldr	r2, [pc, #108]	; (8002604 <initSensor+0x1e4>)
 8002598:	6013      	str	r3, [r2, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 800259a:	21e8      	movs	r1, #232	; 0xe8
 800259c:	2001      	movs	r0, #1
 800259e:	f7ff fb13 	bl	8001bc8 <writeReg>
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <initSensor+0x1e4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fe02 	bl	80021b0 <setMeasurementTimingBudget>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80025ac:	2101      	movs	r1, #1
 80025ae:	2001      	movs	r0, #1
 80025b0:	f7ff fb0a 	bl	8001bc8 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return 0; }
 80025b4:	2040      	movs	r0, #64	; 0x40
 80025b6:	f7ff ff03 	bl	80023c0 <performSingleRefCalibration>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <initSensor+0x1a4>
 80025c0:	2300      	movs	r3, #0
 80025c2:	e010      	b.n	80025e6 <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80025c4:	2102      	movs	r1, #2
 80025c6:	2001      	movs	r0, #1
 80025c8:	f7ff fafe 	bl	8001bc8 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return 0; }
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7ff fef7 	bl	80023c0 <performSingleRefCalibration>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <initSensor+0x1bc>
 80025d8:	2300      	movs	r3, #0
 80025da:	e004      	b.n	80025e6 <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 80025dc:	21e8      	movs	r1, #232	; 0xe8
 80025de:	2001      	movs	r0, #1
 80025e0:	f7ff faf2 	bl	8001bc8 <writeReg>
  return 1;
 80025e4:	2301      	movs	r3, #1
} /* initSensor() */
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	2000001c 	.word	0x2000001c
 80025f4:	20000424 	.word	0x20000424
 80025f8:	20000028 	.word	0x20000028
 80025fc:	20000054 	.word	0x20000054
 8002600:	20000060 	.word	0x20000060
 8002604:	20000428 	.word	0x20000428

08002608 <readRangeContinuousMillimeters>:

uint16_t readRangeContinuousMillimeters(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
int iTimeout = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
uint16_t range;

  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002612:	e00b      	b.n	800262c <readRangeContinuousMillimeters+0x24>
  {
    iTimeout++;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3301      	adds	r3, #1
 8002618:	607b      	str	r3, [r7, #4]
    HAL_Delay(5);//usleep(5000);
 800261a:	2005      	movs	r0, #5
 800261c:	f000 fdbc 	bl	8003198 <HAL_Delay>
    if (iTimeout > 50)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b32      	cmp	r3, #50	; 0x32
 8002624:	dd02      	ble.n	800262c <readRangeContinuousMillimeters+0x24>
    {
      return -1;
 8002626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800262a:	e011      	b.n	8002650 <readRangeContinuousMillimeters+0x48>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 800262c:	2013      	movs	r0, #19
 800262e:	f7ff fa19 	bl	8001a64 <readReg>
 8002632:	4603      	mov	r3, r0
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0eb      	beq.n	8002614 <readRangeContinuousMillimeters+0xc>
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  range = readReg16(RESULT_RANGE_STATUS + 10);
 800263c:	201e      	movs	r0, #30
 800263e:	f7ff f9eb 	bl	8001a18 <readReg16>
 8002642:	4603      	mov	r3, r0
 8002644:	807b      	strh	r3, [r7, #2]

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002646:	2101      	movs	r1, #1
 8002648:	200b      	movs	r0, #11
 800264a:	f7ff fabd 	bl	8001bc8 <writeReg>

  return range;
 800264e:	887b      	ldrh	r3, [r7, #2]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <tofReadDistance>:
//
// Read the current distance in mm
//
int tofReadDistance(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800265e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002662:	4824      	ldr	r0, [pc, #144]	; (80026f4 <tofReadDistance+0x9c>)
 8002664:	f001 f853 	bl	800370e <HAL_GPIO_TogglePin>
int iTimeout;

  writeReg(0x80, 0x01);
 8002668:	2101      	movs	r1, #1
 800266a:	2080      	movs	r0, #128	; 0x80
 800266c:	f7ff faac 	bl	8001bc8 <writeReg>
  writeReg(0xFF, 0x01);
 8002670:	2101      	movs	r1, #1
 8002672:	20ff      	movs	r0, #255	; 0xff
 8002674:	f7ff faa8 	bl	8001bc8 <writeReg>
  writeReg(0x00, 0x00);
 8002678:	2100      	movs	r1, #0
 800267a:	2000      	movs	r0, #0
 800267c:	f7ff faa4 	bl	8001bc8 <writeReg>
  writeReg(0x91, stop_variable);
 8002680:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <tofReadDistance+0xa0>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	2091      	movs	r0, #145	; 0x91
 8002688:	f7ff fa9e 	bl	8001bc8 <writeReg>
  writeReg(0x00, 0x01);
 800268c:	2101      	movs	r1, #1
 800268e:	2000      	movs	r0, #0
 8002690:	f7ff fa9a 	bl	8001bc8 <writeReg>
  writeReg(0xFF, 0x00);
 8002694:	2100      	movs	r1, #0
 8002696:	20ff      	movs	r0, #255	; 0xff
 8002698:	f7ff fa96 	bl	8001bc8 <writeReg>
  writeReg(0x80, 0x00);
 800269c:	2100      	movs	r1, #0
 800269e:	2080      	movs	r0, #128	; 0x80
 80026a0:	f7ff fa92 	bl	8001bc8 <writeReg>

  writeReg(SYSRANGE_START, 0x01);
 80026a4:	2101      	movs	r1, #1
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7ff fa8e 	bl	8001bc8 <writeReg>

  // "Wait until start bit has been cleared"
  iTimeout = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	607b      	str	r3, [r7, #4]
  while (readReg(SYSRANGE_START) & 0x01)
 80026b0:	e00b      	b.n	80026ca <tofReadDistance+0x72>
  {
    iTimeout++;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3301      	adds	r3, #1
 80026b6:	607b      	str	r3, [r7, #4]
    HAL_Delay(5);//usleep(5000);
 80026b8:	2005      	movs	r0, #5
 80026ba:	f000 fd6d 	bl	8003198 <HAL_Delay>
    if (iTimeout > 50)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b32      	cmp	r3, #50	; 0x32
 80026c2:	dd02      	ble.n	80026ca <tofReadDistance+0x72>
    {
      return -1;
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295
 80026c8:	e00f      	b.n	80026ea <tofReadDistance+0x92>
  while (readReg(SYSRANGE_START) & 0x01)
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7ff f9ca 	bl	8001a64 <readReg>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1eb      	bne.n	80026b2 <tofReadDistance+0x5a>
    }
  }
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80026da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <tofReadDistance+0x9c>)
 80026e0:	f001 f815 	bl	800370e <HAL_GPIO_TogglePin>
  return readRangeContinuousMillimeters();
 80026e4:	f7ff ff90 	bl	8002608 <readRangeContinuousMillimeters>
 80026e8:	4603      	mov	r3, r0

} /* tofReadDistance() */
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40020800 	.word	0x40020800
 80026f8:	20000424 	.word	0x20000424

080026fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002734 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002700:	480d      	ldr	r0, [pc, #52]	; (8002738 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002702:	490e      	ldr	r1, [pc, #56]	; (800273c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002704:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002708:	e002      	b.n	8002710 <LoopCopyDataInit>

0800270a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800270c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270e:	3304      	adds	r3, #4

08002710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002714:	d3f9      	bcc.n	800270a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002716:	4a0b      	ldr	r2, [pc, #44]	; (8002744 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002718:	4c0b      	ldr	r4, [pc, #44]	; (8002748 <LoopFillZerobss+0x26>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800271c:	e001      	b.n	8002722 <LoopFillZerobss>

0800271e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002720:	3204      	adds	r2, #4

08002722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002724:	d3fb      	bcc.n	800271e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002726:	f7ff f959 	bl	80019dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800272a:	f006 f9a7 	bl	8008a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800272e:	f7fe f833 	bl	8000798 <main>
  bx  lr    
 8002732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002734:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800273c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8002740:	0800a8c0 	.word	0x0800a8c0
  ldr r2, =_sbss
 8002744:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8002748:	20005250 	.word	0x20005250

0800274c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800274c:	e7fe      	b.n	800274c <ADC_IRQHandler>

0800274e <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	60ba      	str	r2, [r7, #8]
 8002756:	461a      	mov	r2, r3
 8002758:	4603      	mov	r3, r0
 800275a:	81fb      	strh	r3, [r7, #14]
 800275c:	460b      	mov	r3, r1
 800275e:	81bb      	strh	r3, [r7, #12]
 8002760:	4613      	mov	r3, r2
 8002762:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002768:	3307      	adds	r3, #7
 800276a:	2b00      	cmp	r3, #0
 800276c:	da00      	bge.n	8002770 <SSD1306_DrawBitmap+0x22>
 800276e:	3307      	adds	r3, #7
 8002770:	10db      	asrs	r3, r3, #3
 8002772:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002778:	2300      	movs	r3, #0
 800277a:	82bb      	strh	r3, [r7, #20]
 800277c:	e044      	b.n	8002808 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800277e:	2300      	movs	r3, #0
 8002780:	827b      	strh	r3, [r7, #18]
 8002782:	e02f      	b.n	80027e4 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002784:	8a7b      	ldrh	r3, [r7, #18]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	75fb      	strb	r3, [r7, #23]
 8002794:	e012      	b.n	80027bc <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002796:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800279a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800279e:	fb03 f202 	mul.w	r2, r3, r2
 80027a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	da00      	bge.n	80027ac <SSD1306_DrawBitmap+0x5e>
 80027aa:	3307      	adds	r3, #7
 80027ac:	10db      	asrs	r3, r3, #3
 80027ae:	b21b      	sxth	r3, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4413      	add	r3, r2
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80027bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	da09      	bge.n	80027d8 <SSD1306_DrawBitmap+0x8a>
 80027c4:	89fa      	ldrh	r2, [r7, #14]
 80027c6:	8a7b      	ldrh	r3, [r7, #18]
 80027c8:	4413      	add	r3, r2
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	89b9      	ldrh	r1, [r7, #12]
 80027ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f92e 	bl	8002a34 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80027d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3301      	adds	r3, #1
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	827b      	strh	r3, [r7, #18]
 80027e4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	dbc9      	blt.n	8002784 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80027f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3301      	adds	r3, #1
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	82bb      	strh	r3, [r7, #20]
 80027fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002800:	b29b      	uxth	r3, r3
 8002802:	3301      	adds	r3, #1
 8002804:	b29b      	uxth	r3, r3
 8002806:	81bb      	strh	r3, [r7, #12]
 8002808:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800280c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002810:	429a      	cmp	r2, r3
 8002812:	dbb4      	blt.n	800277e <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002826:	f000 fbdb 	bl	8002fe0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800282a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800282e:	2201      	movs	r2, #1
 8002830:	2178      	movs	r1, #120	; 0x78
 8002832:	485b      	ldr	r0, [pc, #364]	; (80029a0 <SSD1306_Init+0x180>)
 8002834:	f001 fbee 	bl	8004014 <HAL_I2C_IsDeviceReady>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800283e:	2300      	movs	r3, #0
 8002840:	e0a9      	b.n	8002996 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002842:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002846:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002848:	e002      	b.n	8002850 <SSD1306_Init+0x30>
		p--;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3b01      	subs	r3, #1
 800284e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f9      	bne.n	800284a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002856:	22ae      	movs	r2, #174	; 0xae
 8002858:	2100      	movs	r1, #0
 800285a:	2078      	movs	r0, #120	; 0x78
 800285c:	f000 fc3c 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002860:	2220      	movs	r2, #32
 8002862:	2100      	movs	r1, #0
 8002864:	2078      	movs	r0, #120	; 0x78
 8002866:	f000 fc37 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800286a:	2210      	movs	r2, #16
 800286c:	2100      	movs	r1, #0
 800286e:	2078      	movs	r0, #120	; 0x78
 8002870:	f000 fc32 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002874:	22b0      	movs	r2, #176	; 0xb0
 8002876:	2100      	movs	r1, #0
 8002878:	2078      	movs	r0, #120	; 0x78
 800287a:	f000 fc2d 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800287e:	22c8      	movs	r2, #200	; 0xc8
 8002880:	2100      	movs	r1, #0
 8002882:	2078      	movs	r0, #120	; 0x78
 8002884:	f000 fc28 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	2078      	movs	r0, #120	; 0x78
 800288e:	f000 fc23 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002892:	2210      	movs	r2, #16
 8002894:	2100      	movs	r1, #0
 8002896:	2078      	movs	r0, #120	; 0x78
 8002898:	f000 fc1e 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800289c:	2240      	movs	r2, #64	; 0x40
 800289e:	2100      	movs	r1, #0
 80028a0:	2078      	movs	r0, #120	; 0x78
 80028a2:	f000 fc19 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80028a6:	2281      	movs	r2, #129	; 0x81
 80028a8:	2100      	movs	r1, #0
 80028aa:	2078      	movs	r0, #120	; 0x78
 80028ac:	f000 fc14 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80028b0:	22ff      	movs	r2, #255	; 0xff
 80028b2:	2100      	movs	r1, #0
 80028b4:	2078      	movs	r0, #120	; 0x78
 80028b6:	f000 fc0f 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80028ba:	22a1      	movs	r2, #161	; 0xa1
 80028bc:	2100      	movs	r1, #0
 80028be:	2078      	movs	r0, #120	; 0x78
 80028c0:	f000 fc0a 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80028c4:	22a6      	movs	r2, #166	; 0xa6
 80028c6:	2100      	movs	r1, #0
 80028c8:	2078      	movs	r0, #120	; 0x78
 80028ca:	f000 fc05 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80028ce:	22a8      	movs	r2, #168	; 0xa8
 80028d0:	2100      	movs	r1, #0
 80028d2:	2078      	movs	r0, #120	; 0x78
 80028d4:	f000 fc00 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80028d8:	223f      	movs	r2, #63	; 0x3f
 80028da:	2100      	movs	r1, #0
 80028dc:	2078      	movs	r0, #120	; 0x78
 80028de:	f000 fbfb 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80028e2:	22a4      	movs	r2, #164	; 0xa4
 80028e4:	2100      	movs	r1, #0
 80028e6:	2078      	movs	r0, #120	; 0x78
 80028e8:	f000 fbf6 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80028ec:	22d3      	movs	r2, #211	; 0xd3
 80028ee:	2100      	movs	r1, #0
 80028f0:	2078      	movs	r0, #120	; 0x78
 80028f2:	f000 fbf1 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	2078      	movs	r0, #120	; 0x78
 80028fc:	f000 fbec 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002900:	22d5      	movs	r2, #213	; 0xd5
 8002902:	2100      	movs	r1, #0
 8002904:	2078      	movs	r0, #120	; 0x78
 8002906:	f000 fbe7 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800290a:	22f0      	movs	r2, #240	; 0xf0
 800290c:	2100      	movs	r1, #0
 800290e:	2078      	movs	r0, #120	; 0x78
 8002910:	f000 fbe2 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002914:	22d9      	movs	r2, #217	; 0xd9
 8002916:	2100      	movs	r1, #0
 8002918:	2078      	movs	r0, #120	; 0x78
 800291a:	f000 fbdd 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800291e:	2222      	movs	r2, #34	; 0x22
 8002920:	2100      	movs	r1, #0
 8002922:	2078      	movs	r0, #120	; 0x78
 8002924:	f000 fbd8 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002928:	22da      	movs	r2, #218	; 0xda
 800292a:	2100      	movs	r1, #0
 800292c:	2078      	movs	r0, #120	; 0x78
 800292e:	f000 fbd3 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002932:	2212      	movs	r2, #18
 8002934:	2100      	movs	r1, #0
 8002936:	2078      	movs	r0, #120	; 0x78
 8002938:	f000 fbce 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800293c:	22db      	movs	r2, #219	; 0xdb
 800293e:	2100      	movs	r1, #0
 8002940:	2078      	movs	r0, #120	; 0x78
 8002942:	f000 fbc9 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002946:	2220      	movs	r2, #32
 8002948:	2100      	movs	r1, #0
 800294a:	2078      	movs	r0, #120	; 0x78
 800294c:	f000 fbc4 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002950:	228d      	movs	r2, #141	; 0x8d
 8002952:	2100      	movs	r1, #0
 8002954:	2078      	movs	r0, #120	; 0x78
 8002956:	f000 fbbf 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800295a:	2214      	movs	r2, #20
 800295c:	2100      	movs	r1, #0
 800295e:	2078      	movs	r0, #120	; 0x78
 8002960:	f000 fbba 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002964:	22af      	movs	r2, #175	; 0xaf
 8002966:	2100      	movs	r1, #0
 8002968:	2078      	movs	r0, #120	; 0x78
 800296a:	f000 fbb5 	bl	80030d8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800296e:	222e      	movs	r2, #46	; 0x2e
 8002970:	2100      	movs	r1, #0
 8002972:	2078      	movs	r0, #120	; 0x78
 8002974:	f000 fbb0 	bl	80030d8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002978:	2000      	movs	r0, #0
 800297a:	f000 f843 	bl	8002a04 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800297e:	f000 f813 	bl	80029a8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <SSD1306_Init+0x184>)
 8002984:	2200      	movs	r2, #0
 8002986:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <SSD1306_Init+0x184>)
 800298a:	2200      	movs	r2, #0
 800298c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <SSD1306_Init+0x184>)
 8002990:	2201      	movs	r2, #1
 8002992:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002994:	2301      	movs	r3, #1
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200001ac 	.word	0x200001ac
 80029a4:	2000082c 	.word	0x2000082c

080029a8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80029ae:	2300      	movs	r3, #0
 80029b0:	71fb      	strb	r3, [r7, #7]
 80029b2:	e01d      	b.n	80029f0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	3b50      	subs	r3, #80	; 0x50
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	2100      	movs	r1, #0
 80029be:	2078      	movs	r0, #120	; 0x78
 80029c0:	f000 fb8a 	bl	80030d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80029c4:	2200      	movs	r2, #0
 80029c6:	2100      	movs	r1, #0
 80029c8:	2078      	movs	r0, #120	; 0x78
 80029ca:	f000 fb85 	bl	80030d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80029ce:	2210      	movs	r2, #16
 80029d0:	2100      	movs	r1, #0
 80029d2:	2078      	movs	r0, #120	; 0x78
 80029d4:	f000 fb80 	bl	80030d8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	01db      	lsls	r3, r3, #7
 80029dc:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <SSD1306_UpdateScreen+0x58>)
 80029de:	441a      	add	r2, r3
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	2140      	movs	r1, #64	; 0x40
 80029e4:	2078      	movs	r0, #120	; 0x78
 80029e6:	f000 fb11 	bl	800300c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	3301      	adds	r3, #1
 80029ee:	71fb      	strb	r3, [r7, #7]
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	2b07      	cmp	r3, #7
 80029f4:	d9de      	bls.n	80029b4 <SSD1306_UpdateScreen+0xc>
	}
}
 80029f6:	bf00      	nop
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	2000042c 	.word	0x2000042c

08002a04 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <SSD1306_Fill+0x14>
 8002a14:	2300      	movs	r3, #0
 8002a16:	e000      	b.n	8002a1a <SSD1306_Fill+0x16>
 8002a18:	23ff      	movs	r3, #255	; 0xff
 8002a1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4803      	ldr	r0, [pc, #12]	; (8002a30 <SSD1306_Fill+0x2c>)
 8002a22:	f006 f85f 	bl	8008ae4 <memset>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	2000042c 	.word	0x2000042c

08002a34 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	80fb      	strh	r3, [r7, #6]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	80bb      	strh	r3, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	70fb      	strb	r3, [r7, #3]
	if (
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	2b7f      	cmp	r3, #127	; 0x7f
 8002a4a:	d848      	bhi.n	8002ade <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002a4c:	88bb      	ldrh	r3, [r7, #4]
 8002a4e:	2b3f      	cmp	r3, #63	; 0x3f
 8002a50:	d845      	bhi.n	8002ade <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002a52:	4b26      	ldr	r3, [pc, #152]	; (8002aec <SSD1306_DrawPixel+0xb8>)
 8002a54:	791b      	ldrb	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d11a      	bne.n	8002aa4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002a6e:	88fa      	ldrh	r2, [r7, #6]
 8002a70:	88bb      	ldrh	r3, [r7, #4]
 8002a72:	08db      	lsrs	r3, r3, #3
 8002a74:	b298      	uxth	r0, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	01db      	lsls	r3, r3, #7
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <SSD1306_DrawPixel+0xbc>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	b25a      	sxtb	r2, r3
 8002a82:	88bb      	ldrh	r3, [r7, #4]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	2101      	movs	r1, #1
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	b25b      	sxtb	r3, r3
 8002a90:	4313      	orrs	r3, r2
 8002a92:	b259      	sxtb	r1, r3
 8002a94:	88fa      	ldrh	r2, [r7, #6]
 8002a96:	4603      	mov	r3, r0
 8002a98:	01db      	lsls	r3, r3, #7
 8002a9a:	4413      	add	r3, r2
 8002a9c:	b2c9      	uxtb	r1, r1
 8002a9e:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <SSD1306_DrawPixel+0xbc>)
 8002aa0:	54d1      	strb	r1, [r2, r3]
 8002aa2:	e01d      	b.n	8002ae0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002aa4:	88fa      	ldrh	r2, [r7, #6]
 8002aa6:	88bb      	ldrh	r3, [r7, #4]
 8002aa8:	08db      	lsrs	r3, r3, #3
 8002aaa:	b298      	uxth	r0, r3
 8002aac:	4603      	mov	r3, r0
 8002aae:	01db      	lsls	r3, r3, #7
 8002ab0:	4413      	add	r3, r2
 8002ab2:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <SSD1306_DrawPixel+0xbc>)
 8002ab4:	5cd3      	ldrb	r3, [r2, r3]
 8002ab6:	b25a      	sxtb	r2, r3
 8002ab8:	88bb      	ldrh	r3, [r7, #4]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	2101      	movs	r1, #1
 8002ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	4013      	ands	r3, r2
 8002acc:	b259      	sxtb	r1, r3
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	01db      	lsls	r3, r3, #7
 8002ad4:	4413      	add	r3, r2
 8002ad6:	b2c9      	uxtb	r1, r1
 8002ad8:	4a05      	ldr	r2, [pc, #20]	; (8002af0 <SSD1306_DrawPixel+0xbc>)
 8002ada:	54d1      	strb	r1, [r2, r3]
 8002adc:	e000      	b.n	8002ae0 <SSD1306_DrawPixel+0xac>
		return;
 8002ade:	bf00      	nop
	}
}
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	2000082c 	.word	0x2000082c
 8002af0:	2000042c 	.word	0x2000042c

08002af4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	460a      	mov	r2, r1
 8002afe:	80fb      	strh	r3, [r7, #6]
 8002b00:	4613      	mov	r3, r2
 8002b02:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002b04:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <SSD1306_GotoXY+0x28>)
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <SSD1306_GotoXY+0x28>)
 8002b0c:	88bb      	ldrh	r3, [r7, #4]
 8002b0e:	8053      	strh	r3, [r2, #2]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	2000082c 	.word	0x2000082c

08002b20 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002b30:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <SSD1306_Putc+0xfc>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	4413      	add	r3, r2
	if (
 8002b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8002b3e:	dc07      	bgt.n	8002b50 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002b40:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <SSD1306_Putc+0xfc>)
 8002b42:	885b      	ldrh	r3, [r3, #2]
 8002b44:	461a      	mov	r2, r3
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002b4c:	2b3f      	cmp	r3, #63	; 0x3f
 8002b4e:	dd01      	ble.n	8002b54 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e05e      	b.n	8002c12 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e04b      	b.n	8002bf2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	3b20      	subs	r3, #32
 8002b62:	6839      	ldr	r1, [r7, #0]
 8002b64:	7849      	ldrb	r1, [r1, #1]
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	440b      	add	r3, r1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	e030      	b.n	8002be0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d010      	beq.n	8002bb0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002b8e:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <SSD1306_Putc+0xfc>)
 8002b90:	881a      	ldrh	r2, [r3, #0]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	b298      	uxth	r0, r3
 8002b9a:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <SSD1306_Putc+0xfc>)
 8002b9c:	885a      	ldrh	r2, [r3, #2]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	79ba      	ldrb	r2, [r7, #6]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f7ff ff43 	bl	8002a34 <SSD1306_DrawPixel>
 8002bae:	e014      	b.n	8002bda <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <SSD1306_Putc+0xfc>)
 8002bb2:	881a      	ldrh	r2, [r3, #0]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	b298      	uxth	r0, r3
 8002bbc:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <SSD1306_Putc+0xfc>)
 8002bbe:	885a      	ldrh	r2, [r3, #2]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	b299      	uxth	r1, r3
 8002bc8:	79bb      	ldrb	r3, [r7, #6]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f7ff ff2d 	bl	8002a34 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d3c8      	bcc.n	8002b7e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d3ad      	bcc.n	8002b5a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <SSD1306_Putc+0xfc>)
 8002c00:	881a      	ldrh	r2, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <SSD1306_Putc+0xfc>)
 8002c0e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002c10:	79fb      	ldrb	r3, [r7, #7]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2000082c 	.word	0x2000082c

08002c20 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002c2e:	e012      	b.n	8002c56 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	79fa      	ldrb	r2, [r7, #7]
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff71 	bl	8002b20 <SSD1306_Putc>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461a      	mov	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d002      	beq.n	8002c50 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	e008      	b.n	8002c62 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3301      	adds	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1e8      	bne.n	8002c30 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	781b      	ldrb	r3, [r3, #0]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8002c6a:	b590      	push	{r4, r7, lr}
 8002c6c:	b087      	sub	sp, #28
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4604      	mov	r4, r0
 8002c72:	4608      	mov	r0, r1
 8002c74:	4611      	mov	r1, r2
 8002c76:	461a      	mov	r2, r3
 8002c78:	4623      	mov	r3, r4
 8002c7a:	80fb      	strh	r3, [r7, #6]
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	80bb      	strh	r3, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
 8002c84:	4613      	mov	r3, r2
 8002c86:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c8c:	d901      	bls.n	8002c92 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8002c8e:	237f      	movs	r3, #127	; 0x7f
 8002c90:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	2b7f      	cmp	r3, #127	; 0x7f
 8002c96:	d901      	bls.n	8002c9c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8002c98:	237f      	movs	r3, #127	; 0x7f
 8002c9a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8002c9c:	88bb      	ldrh	r3, [r7, #4]
 8002c9e:	2b3f      	cmp	r3, #63	; 0x3f
 8002ca0:	d901      	bls.n	8002ca6 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8002ca2:	233f      	movs	r3, #63	; 0x3f
 8002ca4:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002ca6:	883b      	ldrh	r3, [r7, #0]
 8002ca8:	2b3f      	cmp	r3, #63	; 0x3f
 8002caa:	d901      	bls.n	8002cb0 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8002cac:	233f      	movs	r3, #63	; 0x3f
 8002cae:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	887b      	ldrh	r3, [r7, #2]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d205      	bcs.n	8002cc4 <SSD1306_DrawLine+0x5a>
 8002cb8:	887a      	ldrh	r2, [r7, #2]
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	b21b      	sxth	r3, r3
 8002cc2:	e004      	b.n	8002cce <SSD1306_DrawLine+0x64>
 8002cc4:	88fa      	ldrh	r2, [r7, #6]
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8002cd0:	88ba      	ldrh	r2, [r7, #4]
 8002cd2:	883b      	ldrh	r3, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d205      	bcs.n	8002ce4 <SSD1306_DrawLine+0x7a>
 8002cd8:	883a      	ldrh	r2, [r7, #0]
 8002cda:	88bb      	ldrh	r3, [r7, #4]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	e004      	b.n	8002cee <SSD1306_DrawLine+0x84>
 8002ce4:	88ba      	ldrh	r2, [r7, #4]
 8002ce6:	883b      	ldrh	r3, [r7, #0]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	b21b      	sxth	r3, r3
 8002cee:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8002cf0:	88fa      	ldrh	r2, [r7, #6]
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d201      	bcs.n	8002cfc <SSD1306_DrawLine+0x92>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e001      	b.n	8002d00 <SSD1306_DrawLine+0x96>
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002d00:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8002d02:	88ba      	ldrh	r2, [r7, #4]
 8002d04:	883b      	ldrh	r3, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d201      	bcs.n	8002d0e <SSD1306_DrawLine+0xa4>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e001      	b.n	8002d12 <SSD1306_DrawLine+0xa8>
 8002d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d12:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8002d14:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002d18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	dd06      	ble.n	8002d2e <SSD1306_DrawLine+0xc4>
 8002d20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d24:	0fda      	lsrs	r2, r3, #31
 8002d26:	4413      	add	r3, r2
 8002d28:	105b      	asrs	r3, r3, #1
 8002d2a:	b21b      	sxth	r3, r3
 8002d2c:	e006      	b.n	8002d3c <SSD1306_DrawLine+0xd2>
 8002d2e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d32:	0fda      	lsrs	r2, r3, #31
 8002d34:	4413      	add	r3, r2
 8002d36:	105b      	asrs	r3, r3, #1
 8002d38:	425b      	negs	r3, r3
 8002d3a:	b21b      	sxth	r3, r3
 8002d3c:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8002d3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d129      	bne.n	8002d9a <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8002d46:	883a      	ldrh	r2, [r7, #0]
 8002d48:	88bb      	ldrh	r3, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d205      	bcs.n	8002d5a <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8002d4e:	883b      	ldrh	r3, [r7, #0]
 8002d50:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002d52:	88bb      	ldrh	r3, [r7, #4]
 8002d54:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002d56:	893b      	ldrh	r3, [r7, #8]
 8002d58:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d205      	bcs.n	8002d6e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002d6a:	893b      	ldrh	r3, [r7, #8]
 8002d6c:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8002d6e:	88bb      	ldrh	r3, [r7, #4]
 8002d70:	82bb      	strh	r3, [r7, #20]
 8002d72:	e00c      	b.n	8002d8e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8002d74:	8ab9      	ldrh	r1, [r7, #20]
 8002d76:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fe59 	bl	8002a34 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002d82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	82bb      	strh	r3, [r7, #20]
 8002d8e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002d92:	883b      	ldrh	r3, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	dded      	ble.n	8002d74 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8002d98:	e05f      	b.n	8002e5a <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8002d9a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d129      	bne.n	8002df6 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8002da2:	883a      	ldrh	r2, [r7, #0]
 8002da4:	88bb      	ldrh	r3, [r7, #4]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d205      	bcs.n	8002db6 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8002daa:	883b      	ldrh	r3, [r7, #0]
 8002dac:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002dae:	88bb      	ldrh	r3, [r7, #4]
 8002db0:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002db2:	893b      	ldrh	r3, [r7, #8]
 8002db4:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8002db6:	887a      	ldrh	r2, [r7, #2]
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d205      	bcs.n	8002dca <SSD1306_DrawLine+0x160>
			tmp = x1;
 8002dbe:	887b      	ldrh	r3, [r7, #2]
 8002dc0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002dc6:	893b      	ldrh	r3, [r7, #8]
 8002dc8:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	82bb      	strh	r3, [r7, #20]
 8002dce:	e00c      	b.n	8002dea <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8002dd0:	8abb      	ldrh	r3, [r7, #20]
 8002dd2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002dd6:	88b9      	ldrh	r1, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fe2b 	bl	8002a34 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002dde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3301      	adds	r3, #1
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	82bb      	strh	r3, [r7, #20]
 8002dea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	dded      	ble.n	8002dd0 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8002df4:	e031      	b.n	8002e5a <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8002df6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002dfa:	88b9      	ldrh	r1, [r7, #4]
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fe18 	bl	8002a34 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002e04:	88fa      	ldrh	r2, [r7, #6]
 8002e06:	887b      	ldrh	r3, [r7, #2]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d103      	bne.n	8002e14 <SSD1306_DrawLine+0x1aa>
 8002e0c:	88ba      	ldrh	r2, [r7, #4]
 8002e0e:	883b      	ldrh	r3, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d021      	beq.n	8002e58 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8002e14:	8afb      	ldrh	r3, [r7, #22]
 8002e16:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8002e18:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002e1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e20:	425b      	negs	r3, r3
 8002e22:	429a      	cmp	r2, r3
 8002e24:	dd08      	ble.n	8002e38 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8002e26:	8afa      	ldrh	r2, [r7, #22]
 8002e28:	8a3b      	ldrh	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8002e30:	89fa      	ldrh	r2, [r7, #14]
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	4413      	add	r3, r2
 8002e36:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8002e38:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002e3c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	dad8      	bge.n	8002df6 <SSD1306_DrawLine+0x18c>
			err += dx;
 8002e44:	8afa      	ldrh	r2, [r7, #22]
 8002e46:	8a7b      	ldrh	r3, [r7, #18]
 8002e48:	4413      	add	r3, r2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8002e4e:	89ba      	ldrh	r2, [r7, #12]
 8002e50:	88bb      	ldrh	r3, [r7, #4]
 8002e52:	4413      	add	r3, r2
 8002e54:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8002e56:	e7ce      	b.n	8002df6 <SSD1306_DrawLine+0x18c>
			break;
 8002e58:	bf00      	nop
		}
	}
}
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}

08002e60 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	4604      	mov	r4, r0
 8002e68:	4608      	mov	r0, r1
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4623      	mov	r3, r4
 8002e70:	80fb      	strh	r3, [r7, #6]
 8002e72:	4603      	mov	r3, r0
 8002e74:	80bb      	strh	r3, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	807b      	strh	r3, [r7, #2]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	2b7f      	cmp	r3, #127	; 0x7f
 8002e82:	d853      	bhi.n	8002f2c <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8002e84:	88bb      	ldrh	r3, [r7, #4]
 8002e86:	2b3f      	cmp	r3, #63	; 0x3f
 8002e88:	d850      	bhi.n	8002f2c <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8002e8a:	88fa      	ldrh	r2, [r7, #6]
 8002e8c:	887b      	ldrh	r3, [r7, #2]
 8002e8e:	4413      	add	r3, r2
 8002e90:	2b7f      	cmp	r3, #127	; 0x7f
 8002e92:	dd03      	ble.n	8002e9c <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002e9a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8002e9c:	88ba      	ldrh	r2, [r7, #4]
 8002e9e:	883b      	ldrh	r3, [r7, #0]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	2b3f      	cmp	r3, #63	; 0x3f
 8002ea4:	dd03      	ble.n	8002eae <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8002ea6:	88bb      	ldrh	r3, [r7, #4]
 8002ea8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002eac:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8002eae:	88fa      	ldrh	r2, [r7, #6]
 8002eb0:	887b      	ldrh	r3, [r7, #2]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	88bc      	ldrh	r4, [r7, #4]
 8002eb8:	88b9      	ldrh	r1, [r7, #4]
 8002eba:	88f8      	ldrh	r0, [r7, #6]
 8002ebc:	7e3b      	ldrb	r3, [r7, #24]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	4623      	mov	r3, r4
 8002ec2:	f7ff fed2 	bl	8002c6a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8002ec6:	88ba      	ldrh	r2, [r7, #4]
 8002ec8:	883b      	ldrh	r3, [r7, #0]
 8002eca:	4413      	add	r3, r2
 8002ecc:	b299      	uxth	r1, r3
 8002ece:	88fa      	ldrh	r2, [r7, #6]
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	b29c      	uxth	r4, r3
 8002ed6:	88ba      	ldrh	r2, [r7, #4]
 8002ed8:	883b      	ldrh	r3, [r7, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	88f8      	ldrh	r0, [r7, #6]
 8002ee0:	7e3b      	ldrb	r3, [r7, #24]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	f7ff febf 	bl	8002c6a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8002eec:	88ba      	ldrh	r2, [r7, #4]
 8002eee:	883b      	ldrh	r3, [r7, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	b29c      	uxth	r4, r3
 8002ef4:	88fa      	ldrh	r2, [r7, #6]
 8002ef6:	88b9      	ldrh	r1, [r7, #4]
 8002ef8:	88f8      	ldrh	r0, [r7, #6]
 8002efa:	7e3b      	ldrb	r3, [r7, #24]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	4623      	mov	r3, r4
 8002f00:	f7ff feb3 	bl	8002c6a <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8002f04:	88fa      	ldrh	r2, [r7, #6]
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	4413      	add	r3, r2
 8002f0a:	b298      	uxth	r0, r3
 8002f0c:	88fa      	ldrh	r2, [r7, #6]
 8002f0e:	887b      	ldrh	r3, [r7, #2]
 8002f10:	4413      	add	r3, r2
 8002f12:	b29c      	uxth	r4, r3
 8002f14:	88ba      	ldrh	r2, [r7, #4]
 8002f16:	883b      	ldrh	r3, [r7, #0]
 8002f18:	4413      	add	r3, r2
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	88b9      	ldrh	r1, [r7, #4]
 8002f1e:	7e3b      	ldrb	r3, [r7, #24]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	4613      	mov	r3, r2
 8002f24:	4622      	mov	r2, r4
 8002f26:	f7ff fea0 	bl	8002c6a <SSD1306_DrawLine>
 8002f2a:	e000      	b.n	8002f2e <SSD1306_DrawRectangle+0xce>
		return;
 8002f2c:	bf00      	nop
}
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd90      	pop	{r4, r7, pc}

08002f34 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8002f34:	b590      	push	{r4, r7, lr}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	4611      	mov	r1, r2
 8002f40:	461a      	mov	r2, r3
 8002f42:	4623      	mov	r3, r4
 8002f44:	80fb      	strh	r3, [r7, #6]
 8002f46:	4603      	mov	r3, r0
 8002f48:	80bb      	strh	r3, [r7, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	807b      	strh	r3, [r7, #2]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	2b7f      	cmp	r3, #127	; 0x7f
 8002f56:	d836      	bhi.n	8002fc6 <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8002f58:	88bb      	ldrh	r3, [r7, #4]
 8002f5a:	2b3f      	cmp	r3, #63	; 0x3f
 8002f5c:	d833      	bhi.n	8002fc6 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	887b      	ldrh	r3, [r7, #2]
 8002f62:	4413      	add	r3, r2
 8002f64:	2b7f      	cmp	r3, #127	; 0x7f
 8002f66:	dd03      	ble.n	8002f70 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002f6e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8002f70:	88ba      	ldrh	r2, [r7, #4]
 8002f72:	883b      	ldrh	r3, [r7, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	2b3f      	cmp	r3, #63	; 0x3f
 8002f78:	dd03      	ble.n	8002f82 <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8002f7a:	88bb      	ldrh	r3, [r7, #4]
 8002f7c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002f80:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	e018      	b.n	8002fba <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	88bb      	ldrh	r3, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	b299      	uxth	r1, r3
 8002f92:	88fa      	ldrh	r2, [r7, #6]
 8002f94:	887b      	ldrh	r3, [r7, #2]
 8002f96:	4413      	add	r3, r2
 8002f98:	b29c      	uxth	r4, r3
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	88bb      	ldrh	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	88f8      	ldrh	r0, [r7, #6]
 8002fa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	4622      	mov	r2, r4
 8002fb0:	f7ff fe5b 	bl	8002c6a <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	883a      	ldrh	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d2e1      	bcs.n	8002f88 <SSD1306_DrawFilledRectangle+0x54>
 8002fc4:	e000      	b.n	8002fc8 <SSD1306_DrawFilledRectangle+0x94>
		return;
 8002fc6:	bf00      	nop
	}
}
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd90      	pop	{r4, r7, pc}

08002fce <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7ff fd16 	bl	8002a04 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002fd8:	f7ff fce6 	bl	80029a8 <SSD1306_UpdateScreen>
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002fe6:	4b08      	ldr	r3, [pc, #32]	; (8003008 <ssd1306_I2C_Init+0x28>)
 8002fe8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002fea:	e002      	b.n	8002ff2 <ssd1306_I2C_Init+0x12>
		p--;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f9      	bne.n	8002fec <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	0003d090 	.word	0x0003d090

0800300c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b0c7      	sub	sp, #284	; 0x11c
 8003010:	af02      	add	r7, sp, #8
 8003012:	4604      	mov	r4, r0
 8003014:	4608      	mov	r0, r1
 8003016:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800301a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800301e:	600a      	str	r2, [r1, #0]
 8003020:	4619      	mov	r1, r3
 8003022:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003026:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800302a:	4622      	mov	r2, r4
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003032:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8003036:	4602      	mov	r2, r0
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800303e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003042:	460a      	mov	r2, r1
 8003044:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003046:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800304a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800304e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003052:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8003056:	7812      	ldrb	r2, [r2, #0]
 8003058:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800305a:	2300      	movs	r3, #0
 800305c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003060:	e015      	b.n	800308e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8003062:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003066:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800306a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	441a      	add	r2, r3
 8003072:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003076:	3301      	adds	r3, #1
 8003078:	7811      	ldrb	r1, [r2, #0]
 800307a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800307e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8003082:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003084:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003088:	3301      	adds	r3, #1
 800308a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800308e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003092:	b29b      	uxth	r3, r3
 8003094:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003098:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800309c:	8812      	ldrh	r2, [r2, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d8df      	bhi.n	8003062 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80030a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80030a6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b299      	uxth	r1, r3
 80030ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80030b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f107 020c 	add.w	r2, r7, #12
 80030c0:	200a      	movs	r0, #10
 80030c2:	9000      	str	r0, [sp, #0]
 80030c4:	4803      	ldr	r0, [pc, #12]	; (80030d4 <ssd1306_I2C_WriteMulti+0xc8>)
 80030c6:	f000 fc81 	bl	80039cc <HAL_I2C_Master_Transmit>
}
 80030ca:	bf00      	nop
 80030cc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd90      	pop	{r4, r7, pc}
 80030d4:	200001ac 	.word	0x200001ac

080030d8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af02      	add	r7, sp, #8
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
 80030e2:	460b      	mov	r3, r1
 80030e4:	71bb      	strb	r3, [r7, #6]
 80030e6:	4613      	mov	r3, r2
 80030e8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80030ea:	79bb      	ldrb	r3, [r7, #6]
 80030ec:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80030ee:	797b      	ldrb	r3, [r7, #5]
 80030f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	b299      	uxth	r1, r3
 80030f6:	f107 020c 	add.w	r2, r7, #12
 80030fa:	230a      	movs	r3, #10
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2302      	movs	r3, #2
 8003100:	4803      	ldr	r0, [pc, #12]	; (8003110 <ssd1306_I2C_Write+0x38>)
 8003102:	f000 fc63 	bl	80039cc <HAL_I2C_Master_Transmit>
}
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200001ac 	.word	0x200001ac

08003114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_Init+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <HAL_Init+0x40>)
 800311e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_Init+0x40>)
 800312a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800312e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_Init+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a07      	ldr	r2, [pc, #28]	; (8003154 <HAL_Init+0x40>)
 8003136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800313c:	2003      	movs	r0, #3
 800313e:	f000 f8fc 	bl	800333a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003142:	200f      	movs	r0, #15
 8003144:	f7fe fbaa 	bl	800189c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003148:	f7fe fa2c 	bl	80015a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023c00 	.word	0x40023c00

08003158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_IncTick+0x20>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_IncTick+0x24>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4413      	add	r3, r2
 8003168:	4a04      	ldr	r2, [pc, #16]	; (800317c <HAL_IncTick+0x24>)
 800316a:	6013      	str	r3, [r2, #0]
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000118 	.word	0x20000118
 800317c:	20000834 	.word	0x20000834

08003180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return uwTick;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_GetTick+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000834 	.word	0x20000834

08003198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7ff ffee 	bl	8003180 <HAL_GetTick>
 80031a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d005      	beq.n	80031be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_Delay+0x44>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4413      	add	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031be:	bf00      	nop
 80031c0:	f7ff ffde 	bl	8003180 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d8f7      	bhi.n	80031c0 <HAL_Delay+0x28>
  {
  }
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000118 	.word	0x20000118

080031e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <__NVIC_SetPriorityGrouping+0x44>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031fc:	4013      	ands	r3, r2
 80031fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800320c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003212:	4a04      	ldr	r2, [pc, #16]	; (8003224 <__NVIC_SetPriorityGrouping+0x44>)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	60d3      	str	r3, [r2, #12]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <__NVIC_GetPriorityGrouping+0x18>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	f003 0307 	and.w	r3, r3, #7
}
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	2b00      	cmp	r3, #0
 8003254:	db0b      	blt.n	800326e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	4907      	ldr	r1, [pc, #28]	; (800327c <__NVIC_EnableIRQ+0x38>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2001      	movs	r0, #1
 8003266:	fa00 f202 	lsl.w	r2, r0, r2
 800326a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000e100 	.word	0xe000e100

08003280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	6039      	str	r1, [r7, #0]
 800328a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003290:	2b00      	cmp	r3, #0
 8003292:	db0a      	blt.n	80032aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	490c      	ldr	r1, [pc, #48]	; (80032cc <__NVIC_SetPriority+0x4c>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	440b      	add	r3, r1
 80032a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a8:	e00a      	b.n	80032c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4908      	ldr	r1, [pc, #32]	; (80032d0 <__NVIC_SetPriority+0x50>)
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	3b04      	subs	r3, #4
 80032b8:	0112      	lsls	r2, r2, #4
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	440b      	add	r3, r1
 80032be:	761a      	strb	r2, [r3, #24]
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	e000e100 	.word	0xe000e100
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	; 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f1c3 0307 	rsb	r3, r3, #7
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	bf28      	it	cs
 80032f2:	2304      	movcs	r3, #4
 80032f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3304      	adds	r3, #4
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d902      	bls.n	8003304 <NVIC_EncodePriority+0x30>
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3b03      	subs	r3, #3
 8003302:	e000      	b.n	8003306 <NVIC_EncodePriority+0x32>
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003308:	f04f 32ff 	mov.w	r2, #4294967295
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	401a      	ands	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800331c:	f04f 31ff 	mov.w	r1, #4294967295
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	43d9      	mvns	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	4313      	orrs	r3, r2
         );
}
 800332e:	4618      	mov	r0, r3
 8003330:	3724      	adds	r7, #36	; 0x24
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ff4c 	bl	80031e0 <__NVIC_SetPriorityGrouping>
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003362:	f7ff ff61 	bl	8003228 <__NVIC_GetPriorityGrouping>
 8003366:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	6978      	ldr	r0, [r7, #20]
 800336e:	f7ff ffb1 	bl	80032d4 <NVIC_EncodePriority>
 8003372:	4602      	mov	r2, r0
 8003374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff ff80 	bl	8003280 <__NVIC_SetPriority>
}
 8003380:	bf00      	nop
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff ff54 	bl	8003244 <__NVIC_EnableIRQ>
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	; 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	e159      	b.n	8003674 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033c0:	2201      	movs	r2, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	429a      	cmp	r2, r3
 80033da:	f040 8148 	bne.w	800366e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d005      	beq.n	80033f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d130      	bne.n	8003458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	2203      	movs	r2, #3
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4313      	orrs	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800342c:	2201      	movs	r2, #1
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 0201 	and.w	r2, r3, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	2b03      	cmp	r3, #3
 8003462:	d017      	beq.n	8003494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	2203      	movs	r2, #3
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d123      	bne.n	80034e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	08da      	lsrs	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3208      	adds	r2, #8
 80034a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	220f      	movs	r2, #15
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	08da      	lsrs	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3208      	adds	r2, #8
 80034e2:	69b9      	ldr	r1, [r7, #24]
 80034e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2203      	movs	r2, #3
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0203 	and.w	r2, r3, #3
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80a2 	beq.w	800366e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	4b57      	ldr	r3, [pc, #348]	; (800368c <HAL_GPIO_Init+0x2e8>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	4a56      	ldr	r2, [pc, #344]	; (800368c <HAL_GPIO_Init+0x2e8>)
 8003534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003538:	6453      	str	r3, [r2, #68]	; 0x44
 800353a:	4b54      	ldr	r3, [pc, #336]	; (800368c <HAL_GPIO_Init+0x2e8>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003546:	4a52      	ldr	r2, [pc, #328]	; (8003690 <HAL_GPIO_Init+0x2ec>)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3302      	adds	r3, #2
 800354e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	220f      	movs	r2, #15
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a49      	ldr	r2, [pc, #292]	; (8003694 <HAL_GPIO_Init+0x2f0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d019      	beq.n	80035a6 <HAL_GPIO_Init+0x202>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a48      	ldr	r2, [pc, #288]	; (8003698 <HAL_GPIO_Init+0x2f4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_GPIO_Init+0x1fe>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a47      	ldr	r2, [pc, #284]	; (800369c <HAL_GPIO_Init+0x2f8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00d      	beq.n	800359e <HAL_GPIO_Init+0x1fa>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a46      	ldr	r2, [pc, #280]	; (80036a0 <HAL_GPIO_Init+0x2fc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <HAL_GPIO_Init+0x1f6>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a45      	ldr	r2, [pc, #276]	; (80036a4 <HAL_GPIO_Init+0x300>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_GPIO_Init+0x1f2>
 8003592:	2304      	movs	r3, #4
 8003594:	e008      	b.n	80035a8 <HAL_GPIO_Init+0x204>
 8003596:	2307      	movs	r3, #7
 8003598:	e006      	b.n	80035a8 <HAL_GPIO_Init+0x204>
 800359a:	2303      	movs	r3, #3
 800359c:	e004      	b.n	80035a8 <HAL_GPIO_Init+0x204>
 800359e:	2302      	movs	r3, #2
 80035a0:	e002      	b.n	80035a8 <HAL_GPIO_Init+0x204>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_GPIO_Init+0x204>
 80035a6:	2300      	movs	r3, #0
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	f002 0203 	and.w	r2, r2, #3
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	4093      	lsls	r3, r2
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035b8:	4935      	ldr	r1, [pc, #212]	; (8003690 <HAL_GPIO_Init+0x2ec>)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	089b      	lsrs	r3, r3, #2
 80035be:	3302      	adds	r3, #2
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035c6:	4b38      	ldr	r3, [pc, #224]	; (80036a8 <HAL_GPIO_Init+0x304>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ea:	4a2f      	ldr	r2, [pc, #188]	; (80036a8 <HAL_GPIO_Init+0x304>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035f0:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <HAL_GPIO_Init+0x304>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003614:	4a24      	ldr	r2, [pc, #144]	; (80036a8 <HAL_GPIO_Init+0x304>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800361a:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_GPIO_Init+0x304>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800363e:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <HAL_GPIO_Init+0x304>)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003644:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <HAL_GPIO_Init+0x304>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003668:	4a0f      	ldr	r2, [pc, #60]	; (80036a8 <HAL_GPIO_Init+0x304>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3301      	adds	r3, #1
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b0f      	cmp	r3, #15
 8003678:	f67f aea2 	bls.w	80033c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	3724      	adds	r7, #36	; 0x24
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800
 8003690:	40013800 	.word	0x40013800
 8003694:	40020000 	.word	0x40020000
 8003698:	40020400 	.word	0x40020400
 800369c:	40020800 	.word	0x40020800
 80036a0:	40020c00 	.word	0x40020c00
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40013c00 	.word	0x40013c00

080036ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	887b      	ldrh	r3, [r7, #2]
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
 80036c8:	e001      	b.n	80036ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	807b      	strh	r3, [r7, #2]
 80036e8:	4613      	mov	r3, r2
 80036ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036ec:	787b      	ldrb	r3, [r7, #1]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036f2:	887a      	ldrh	r2, [r7, #2]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036f8:	e003      	b.n	8003702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	041a      	lsls	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	619a      	str	r2, [r3, #24]
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	460b      	mov	r3, r1
 8003718:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003720:	887a      	ldrh	r2, [r7, #2]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4013      	ands	r3, r2
 8003726:	041a      	lsls	r2, r3, #16
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43d9      	mvns	r1, r3
 800372c:	887b      	ldrh	r3, [r7, #2]
 800372e:	400b      	ands	r3, r1
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	619a      	str	r2, [r3, #24]
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e12b      	b.n	80039ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd ff46 	bl	80015fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003796:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037a8:	f001 fcc0 	bl	800512c <HAL_RCC_GetPCLK1Freq>
 80037ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4a81      	ldr	r2, [pc, #516]	; (80039b8 <HAL_I2C_Init+0x274>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d807      	bhi.n	80037c8 <HAL_I2C_Init+0x84>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a80      	ldr	r2, [pc, #512]	; (80039bc <HAL_I2C_Init+0x278>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	bf94      	ite	ls
 80037c0:	2301      	movls	r3, #1
 80037c2:	2300      	movhi	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e006      	b.n	80037d6 <HAL_I2C_Init+0x92>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a7d      	ldr	r2, [pc, #500]	; (80039c0 <HAL_I2C_Init+0x27c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	bf94      	ite	ls
 80037d0:	2301      	movls	r3, #1
 80037d2:	2300      	movhi	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0e7      	b.n	80039ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4a78      	ldr	r2, [pc, #480]	; (80039c4 <HAL_I2C_Init+0x280>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	0c9b      	lsrs	r3, r3, #18
 80037e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a6a      	ldr	r2, [pc, #424]	; (80039b8 <HAL_I2C_Init+0x274>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d802      	bhi.n	8003818 <HAL_I2C_Init+0xd4>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3301      	adds	r3, #1
 8003816:	e009      	b.n	800382c <HAL_I2C_Init+0xe8>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	4a69      	ldr	r2, [pc, #420]	; (80039c8 <HAL_I2C_Init+0x284>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	099b      	lsrs	r3, r3, #6
 800382a:	3301      	adds	r3, #1
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	430b      	orrs	r3, r1
 8003832:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800383e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	495c      	ldr	r1, [pc, #368]	; (80039b8 <HAL_I2C_Init+0x274>)
 8003848:	428b      	cmp	r3, r1
 800384a:	d819      	bhi.n	8003880 <HAL_I2C_Init+0x13c>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1e59      	subs	r1, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fbb1 f3f3 	udiv	r3, r1, r3
 800385a:	1c59      	adds	r1, r3, #1
 800385c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003860:	400b      	ands	r3, r1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_I2C_Init+0x138>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1e59      	subs	r1, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fbb1 f3f3 	udiv	r3, r1, r3
 8003874:	3301      	adds	r3, #1
 8003876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387a:	e051      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 800387c:	2304      	movs	r3, #4
 800387e:	e04f      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d111      	bne.n	80038ac <HAL_I2C_Init+0x168>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1e58      	subs	r0, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	440b      	add	r3, r1
 8003896:	fbb0 f3f3 	udiv	r3, r0, r3
 800389a:	3301      	adds	r3, #1
 800389c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e012      	b.n	80038d2 <HAL_I2C_Init+0x18e>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1e58      	subs	r0, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	0099      	lsls	r1, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Init+0x196>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e022      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10e      	bne.n	8003900 <HAL_I2C_Init+0x1bc>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1e58      	subs	r0, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6859      	ldr	r1, [r3, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	440b      	add	r3, r1
 80038f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f4:	3301      	adds	r3, #1
 80038f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fe:	e00f      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	0099      	lsls	r1, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	6809      	ldr	r1, [r1, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800394e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6911      	ldr	r1, [r2, #16]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68d2      	ldr	r2, [r2, #12]
 800395a:	4311      	orrs	r1, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	430b      	orrs	r3, r1
 8003962:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	000186a0 	.word	0x000186a0
 80039bc:	001e847f 	.word	0x001e847f
 80039c0:	003d08ff 	.word	0x003d08ff
 80039c4:	431bde83 	.word	0x431bde83
 80039c8:	10624dd3 	.word	0x10624dd3

080039cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	461a      	mov	r2, r3
 80039d8:	460b      	mov	r3, r1
 80039da:	817b      	strh	r3, [r7, #10]
 80039dc:	4613      	mov	r3, r2
 80039de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039e0:	f7ff fbce 	bl	8003180 <HAL_GetTick>
 80039e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	f040 80e0 	bne.w	8003bb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2319      	movs	r3, #25
 80039fa:	2201      	movs	r2, #1
 80039fc:	4970      	ldr	r1, [pc, #448]	; (8003bc0 <HAL_I2C_Master_Transmit+0x1f4>)
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fd86 	bl	8004510 <I2C_WaitOnFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e0d3      	b.n	8003bb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_I2C_Master_Transmit+0x50>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e0cc      	b.n	8003bb6 <HAL_I2C_Master_Transmit+0x1ea>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d007      	beq.n	8003a42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2221      	movs	r2, #33	; 0x21
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	893a      	ldrh	r2, [r7, #8]
 8003a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4a50      	ldr	r2, [pc, #320]	; (8003bc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a84:	8979      	ldrh	r1, [r7, #10]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	6a3a      	ldr	r2, [r7, #32]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fbf0 	bl	8004270 <I2C_MasterRequestWrite>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e08d      	b.n	8003bb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ab0:	e066      	b.n	8003b80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	6a39      	ldr	r1, [r7, #32]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fe00 	bl	80046bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d107      	bne.n	8003ada <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e06b      	b.n	8003bb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	781a      	ldrb	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d11b      	bne.n	8003b54 <HAL_I2C_Master_Transmit+0x188>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d017      	beq.n	8003b54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	6a39      	ldr	r1, [r7, #32]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fdf0 	bl	800473e <I2C_WaitOnBTFFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00d      	beq.n	8003b80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d107      	bne.n	8003b7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e01a      	b.n	8003bb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d194      	bne.n	8003ab2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e000      	b.n	8003bb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
  }
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	00100002 	.word	0x00100002
 8003bc4:	ffff0000 	.word	0xffff0000

08003bc8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08c      	sub	sp, #48	; 0x30
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	607a      	str	r2, [r7, #4]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	817b      	strh	r3, [r7, #10]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bdc:	f7ff fad0 	bl	8003180 <HAL_GetTick>
 8003be0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	f040 820b 	bne.w	8004006 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2319      	movs	r3, #25
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	497c      	ldr	r1, [pc, #496]	; (8003dec <HAL_I2C_Master_Receive+0x224>)
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 fc88 	bl	8004510 <I2C_WaitOnFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003c06:	2302      	movs	r3, #2
 8003c08:	e1fe      	b.n	8004008 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_I2C_Master_Receive+0x50>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e1f7      	b.n	8004008 <HAL_I2C_Master_Receive+0x440>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d007      	beq.n	8003c3e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0201 	orr.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2222      	movs	r2, #34	; 0x22
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2210      	movs	r2, #16
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	893a      	ldrh	r2, [r7, #8]
 8003c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a5c      	ldr	r2, [pc, #368]	; (8003df0 <HAL_I2C_Master_Receive+0x228>)
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c80:	8979      	ldrh	r1, [r7, #10]
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fb74 	bl	8004374 <I2C_MasterRequestRead>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e1b8      	b.n	8004008 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d113      	bne.n	8003cc6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	623b      	str	r3, [r7, #32]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	623b      	str	r3, [r7, #32]
 8003cb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e18c      	b.n	8003fe0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d11b      	bne.n	8003d06 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e16c      	b.n	8003fe0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d11b      	bne.n	8003d46 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	e14c      	b.n	8003fe0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d6c:	e138      	b.n	8003fe0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	f200 80f1 	bhi.w	8003f5a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d123      	bne.n	8003dc8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fd1b 	bl	80047c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e139      	b.n	8004008 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dc6:	e10b      	b.n	8003fe0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d14e      	bne.n	8003e6e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	4906      	ldr	r1, [pc, #24]	; (8003df4 <HAL_I2C_Master_Receive+0x22c>)
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fb98 	bl	8004510 <I2C_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e10e      	b.n	8004008 <HAL_I2C_Master_Receive+0x440>
 8003dea:	bf00      	nop
 8003dec:	00100002 	.word	0x00100002
 8003df0:	ffff0000 	.word	0xffff0000
 8003df4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e6c:	e0b8      	b.n	8003fe0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	2200      	movs	r2, #0
 8003e76:	4966      	ldr	r1, [pc, #408]	; (8004010 <HAL_I2C_Master_Receive+0x448>)
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fb49 	bl	8004510 <I2C_WaitOnFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0bf      	b.n	8004008 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	494f      	ldr	r1, [pc, #316]	; (8004010 <HAL_I2C_Master_Receive+0x448>)
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fb1b 	bl	8004510 <I2C_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e091      	b.n	8004008 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f58:	e042      	b.n	8003fe0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fc2e 	bl	80047c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e04c      	b.n	8004008 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d118      	bne.n	8003fe0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f47f aec2 	bne.w	8003d6e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e000      	b.n	8004008 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004006:	2302      	movs	r3, #2
  }
}
 8004008:	4618      	mov	r0, r3
 800400a:	3728      	adds	r7, #40	; 0x28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	00010004 	.word	0x00010004

08004014 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	; 0x28
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	460b      	mov	r3, r1
 8004022:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004024:	f7ff f8ac 	bl	8003180 <HAL_GetTick>
 8004028:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b20      	cmp	r3, #32
 8004038:	f040 8111 	bne.w	800425e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	2319      	movs	r3, #25
 8004042:	2201      	movs	r2, #1
 8004044:	4988      	ldr	r1, [pc, #544]	; (8004268 <HAL_I2C_IsDeviceReady+0x254>)
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fa62 	bl	8004510 <I2C_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004052:	2302      	movs	r3, #2
 8004054:	e104      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_I2C_IsDeviceReady+0x50>
 8004060:	2302      	movs	r3, #2
 8004062:	e0fd      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x24c>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b01      	cmp	r3, #1
 8004078:	d007      	beq.n	800408a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0201 	orr.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2224      	movs	r2, #36	; 0x24
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a70      	ldr	r2, [pc, #448]	; (800426c <HAL_I2C_IsDeviceReady+0x258>)
 80040ac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fa20 	bl	8004510 <I2C_WaitOnFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e4:	d103      	bne.n	80040ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e0b6      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040f2:	897b      	ldrh	r3, [r7, #10]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004100:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004102:	f7ff f83d 	bl	8003180 <HAL_GetTick>
 8004106:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b02      	cmp	r3, #2
 8004114:	bf0c      	ite	eq
 8004116:	2301      	moveq	r3, #1
 8004118:	2300      	movne	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004136:	e025      	b.n	8004184 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004138:	f7ff f822 	bl	8003180 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <HAL_I2C_IsDeviceReady+0x13a>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	22a0      	movs	r2, #160	; 0xa0
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	bf0c      	ite	eq
 8004164:	2301      	moveq	r3, #1
 8004166:	2300      	movne	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2ba0      	cmp	r3, #160	; 0xa0
 800418e:	d005      	beq.n	800419c <HAL_I2C_IsDeviceReady+0x188>
 8004190:	7dfb      	ldrb	r3, [r7, #23]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d102      	bne.n	800419c <HAL_I2C_IsDeviceReady+0x188>
 8004196:	7dbb      	ldrb	r3, [r7, #22]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0cd      	beq.n	8004138 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d129      	bne.n	8004206 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	2319      	movs	r3, #25
 80041de:	2201      	movs	r2, #1
 80041e0:	4921      	ldr	r1, [pc, #132]	; (8004268 <HAL_I2C_IsDeviceReady+0x254>)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f994 	bl	8004510 <I2C_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e036      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e02c      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004214:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800421e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2319      	movs	r3, #25
 8004226:	2201      	movs	r2, #1
 8004228:	490f      	ldr	r1, [pc, #60]	; (8004268 <HAL_I2C_IsDeviceReady+0x254>)
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f970 	bl	8004510 <I2C_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e012      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	3301      	adds	r3, #1
 800423e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	f4ff af32 	bcc.w	80040ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800425e:	2302      	movs	r3, #2
  }
}
 8004260:	4618      	mov	r0, r3
 8004262:	3720      	adds	r7, #32
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	00100002 	.word	0x00100002
 800426c:	ffff0000 	.word	0xffff0000

08004270 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	460b      	mov	r3, r1
 800427e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b08      	cmp	r3, #8
 800428a:	d006      	beq.n	800429a <I2C_MasterRequestWrite+0x2a>
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d003      	beq.n	800429a <I2C_MasterRequestWrite+0x2a>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004298:	d108      	bne.n	80042ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e00b      	b.n	80042c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	2b12      	cmp	r3, #18
 80042b2:	d107      	bne.n	80042c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f91d 	bl	8004510 <I2C_WaitOnFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00d      	beq.n	80042f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ea:	d103      	bne.n	80042f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e035      	b.n	8004364 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004300:	d108      	bne.n	8004314 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004302:	897b      	ldrh	r3, [r7, #10]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004310:	611a      	str	r2, [r3, #16]
 8004312:	e01b      	b.n	800434c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004314:	897b      	ldrh	r3, [r7, #10]
 8004316:	11db      	asrs	r3, r3, #7
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f003 0306 	and.w	r3, r3, #6
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f063 030f 	orn	r3, r3, #15
 8004324:	b2da      	uxtb	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	490e      	ldr	r1, [pc, #56]	; (800436c <I2C_MasterRequestWrite+0xfc>)
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f943 	bl	80045be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e010      	b.n	8004364 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004342:	897b      	ldrh	r3, [r7, #10]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	4907      	ldr	r1, [pc, #28]	; (8004370 <I2C_MasterRequestWrite+0x100>)
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f933 	bl	80045be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	00010008 	.word	0x00010008
 8004370:	00010002 	.word	0x00010002

08004374 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	460b      	mov	r3, r1
 8004382:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004398:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d006      	beq.n	80043ae <I2C_MasterRequestRead+0x3a>
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d003      	beq.n	80043ae <I2C_MasterRequestRead+0x3a>
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043ac:	d108      	bne.n	80043c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e00b      	b.n	80043d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	2b11      	cmp	r3, #17
 80043c6:	d107      	bne.n	80043d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f893 	bl	8004510 <I2C_WaitOnFlagUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00d      	beq.n	800440c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fe:	d103      	bne.n	8004408 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e079      	b.n	8004500 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004414:	d108      	bne.n	8004428 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004416:	897b      	ldrh	r3, [r7, #10]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	b2da      	uxtb	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	611a      	str	r2, [r3, #16]
 8004426:	e05f      	b.n	80044e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004428:	897b      	ldrh	r3, [r7, #10]
 800442a:	11db      	asrs	r3, r3, #7
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f003 0306 	and.w	r3, r3, #6
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f063 030f 	orn	r3, r3, #15
 8004438:	b2da      	uxtb	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4930      	ldr	r1, [pc, #192]	; (8004508 <I2C_MasterRequestRead+0x194>)
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f8b9 	bl	80045be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e054      	b.n	8004500 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004456:	897b      	ldrh	r3, [r7, #10]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4929      	ldr	r1, [pc, #164]	; (800450c <I2C_MasterRequestRead+0x198>)
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f8a9 	bl	80045be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e044      	b.n	8004500 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800449a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f831 	bl	8004510 <I2C_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00d      	beq.n	80044d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c2:	d103      	bne.n	80044cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e017      	b.n	8004500 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80044d0:	897b      	ldrh	r3, [r7, #10]
 80044d2:	11db      	asrs	r3, r3, #7
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f003 0306 	and.w	r3, r3, #6
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	f063 030e 	orn	r3, r3, #14
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	4907      	ldr	r1, [pc, #28]	; (800450c <I2C_MasterRequestRead+0x198>)
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f865 	bl	80045be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	00010008 	.word	0x00010008
 800450c:	00010002 	.word	0x00010002

08004510 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	4613      	mov	r3, r2
 800451e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004520:	e025      	b.n	800456e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004528:	d021      	beq.n	800456e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452a:	f7fe fe29 	bl	8003180 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d302      	bcc.n	8004540 <I2C_WaitOnFlagUntilTimeout+0x30>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d116      	bne.n	800456e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f043 0220 	orr.w	r2, r3, #32
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e023      	b.n	80045b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b01      	cmp	r3, #1
 8004576:	d10d      	bne.n	8004594 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	43da      	mvns	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4013      	ands	r3, r2
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	bf0c      	ite	eq
 800458a:	2301      	moveq	r3, #1
 800458c:	2300      	movne	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	461a      	mov	r2, r3
 8004592:	e00c      	b.n	80045ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	43da      	mvns	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4013      	ands	r3, r2
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d0b6      	beq.n	8004522 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	607a      	str	r2, [r7, #4]
 80045ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045cc:	e051      	b.n	8004672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045dc:	d123      	bne.n	8004626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f043 0204 	orr.w	r2, r3, #4
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e046      	b.n	80046b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d021      	beq.n	8004672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462e:	f7fe fda7 	bl	8003180 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	d302      	bcc.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d116      	bne.n	8004672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f043 0220 	orr.w	r2, r3, #32
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e020      	b.n	80046b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	0c1b      	lsrs	r3, r3, #16
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	d10c      	bne.n	8004696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	43da      	mvns	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4013      	ands	r3, r2
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	bf14      	ite	ne
 800468e:	2301      	movne	r3, #1
 8004690:	2300      	moveq	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	e00b      	b.n	80046ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	43da      	mvns	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4013      	ands	r3, r2
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bf14      	ite	ne
 80046a8:	2301      	movne	r3, #1
 80046aa:	2300      	moveq	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d18d      	bne.n	80045ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046c8:	e02d      	b.n	8004726 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f8ce 	bl	800486c <I2C_IsAcknowledgeFailed>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e02d      	b.n	8004736 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d021      	beq.n	8004726 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e2:	f7fe fd4d 	bl	8003180 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d302      	bcc.n	80046f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d116      	bne.n	8004726 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f043 0220 	orr.w	r2, r3, #32
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e007      	b.n	8004736 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004730:	2b80      	cmp	r3, #128	; 0x80
 8004732:	d1ca      	bne.n	80046ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800474a:	e02d      	b.n	80047a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f88d 	bl	800486c <I2C_IsAcknowledgeFailed>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e02d      	b.n	80047b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004762:	d021      	beq.n	80047a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004764:	f7fe fd0c 	bl	8003180 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	429a      	cmp	r2, r3
 8004772:	d302      	bcc.n	800477a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d116      	bne.n	80047a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f043 0220 	orr.w	r2, r3, #32
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e007      	b.n	80047b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d1ca      	bne.n	800474c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047cc:	e042      	b.n	8004854 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d119      	bne.n	8004810 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f06f 0210 	mvn.w	r2, #16
 80047e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e029      	b.n	8004864 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004810:	f7fe fcb6 	bl	8003180 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	429a      	cmp	r2, r3
 800481e:	d302      	bcc.n	8004826 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d116      	bne.n	8004854 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	f043 0220 	orr.w	r2, r3, #32
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e007      	b.n	8004864 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d1b5      	bne.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004882:	d11b      	bne.n	80048bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800488c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	f043 0204 	orr.w	r2, r3, #4
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
	...

080048cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e267      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d075      	beq.n	80049d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ea:	4b88      	ldr	r3, [pc, #544]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d00c      	beq.n	8004910 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f6:	4b85      	ldr	r3, [pc, #532]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d112      	bne.n	8004928 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004902:	4b82      	ldr	r3, [pc, #520]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490e:	d10b      	bne.n	8004928 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004910:	4b7e      	ldr	r3, [pc, #504]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d05b      	beq.n	80049d4 <HAL_RCC_OscConfig+0x108>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d157      	bne.n	80049d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e242      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004930:	d106      	bne.n	8004940 <HAL_RCC_OscConfig+0x74>
 8004932:	4b76      	ldr	r3, [pc, #472]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a75      	ldr	r2, [pc, #468]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e01d      	b.n	800497c <HAL_RCC_OscConfig+0xb0>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004948:	d10c      	bne.n	8004964 <HAL_RCC_OscConfig+0x98>
 800494a:	4b70      	ldr	r3, [pc, #448]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a6f      	ldr	r2, [pc, #444]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	4b6d      	ldr	r3, [pc, #436]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a6c      	ldr	r2, [pc, #432]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e00b      	b.n	800497c <HAL_RCC_OscConfig+0xb0>
 8004964:	4b69      	ldr	r3, [pc, #420]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a68      	ldr	r2, [pc, #416]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 800496a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b66      	ldr	r3, [pc, #408]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a65      	ldr	r2, [pc, #404]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800497a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d013      	beq.n	80049ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004984:	f7fe fbfc 	bl	8003180 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800498c:	f7fe fbf8 	bl	8003180 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	; 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e207      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499e:	4b5b      	ldr	r3, [pc, #364]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0xc0>
 80049aa:	e014      	b.n	80049d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7fe fbe8 	bl	8003180 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b4:	f7fe fbe4 	bl	8003180 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	; 0x64
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e1f3      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c6:	4b51      	ldr	r3, [pc, #324]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0xe8>
 80049d2:	e000      	b.n	80049d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d063      	beq.n	8004aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049e2:	4b4a      	ldr	r3, [pc, #296]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ee:	4b47      	ldr	r3, [pc, #284]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d11c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049fa:	4b44      	ldr	r3, [pc, #272]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d116      	bne.n	8004a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a06:	4b41      	ldr	r3, [pc, #260]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <HAL_RCC_OscConfig+0x152>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d001      	beq.n	8004a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e1c7      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1e:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4937      	ldr	r1, [pc, #220]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a32:	e03a      	b.n	8004aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d020      	beq.n	8004a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a3c:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <HAL_RCC_OscConfig+0x244>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a42:	f7fe fb9d 	bl	8003180 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a4a:	f7fe fb99 	bl	8003180 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e1a8      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5c:	4b2b      	ldr	r3, [pc, #172]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a68:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4925      	ldr	r1, [pc, #148]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	600b      	str	r3, [r1, #0]
 8004a7c:	e015      	b.n	8004aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <HAL_RCC_OscConfig+0x244>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fe fb7c 	bl	8003180 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a8c:	f7fe fb78 	bl	8003180 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e187      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9e:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d036      	beq.n	8004b24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d016      	beq.n	8004aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004abe:	4b15      	ldr	r3, [pc, #84]	; (8004b14 <HAL_RCC_OscConfig+0x248>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac4:	f7fe fb5c 	bl	8003180 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004acc:	f7fe fb58 	bl	8003180 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e167      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ade:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0x200>
 8004aea:	e01b      	b.n	8004b24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aec:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <HAL_RCC_OscConfig+0x248>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af2:	f7fe fb45 	bl	8003180 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af8:	e00e      	b.n	8004b18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004afa:	f7fe fb41 	bl	8003180 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d907      	bls.n	8004b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e150      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	42470000 	.word	0x42470000
 8004b14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b18:	4b88      	ldr	r3, [pc, #544]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1ea      	bne.n	8004afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8097 	beq.w	8004c60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b32:	2300      	movs	r3, #0
 8004b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b36:	4b81      	ldr	r3, [pc, #516]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10f      	bne.n	8004b62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b42:	2300      	movs	r3, #0
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	4b7d      	ldr	r3, [pc, #500]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	4a7c      	ldr	r2, [pc, #496]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b50:	6413      	str	r3, [r2, #64]	; 0x40
 8004b52:	4b7a      	ldr	r3, [pc, #488]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b62:	4b77      	ldr	r3, [pc, #476]	; (8004d40 <HAL_RCC_OscConfig+0x474>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d118      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b6e:	4b74      	ldr	r3, [pc, #464]	; (8004d40 <HAL_RCC_OscConfig+0x474>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a73      	ldr	r2, [pc, #460]	; (8004d40 <HAL_RCC_OscConfig+0x474>)
 8004b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b7a:	f7fe fb01 	bl	8003180 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b82:	f7fe fafd 	bl	8003180 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e10c      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b94:	4b6a      	ldr	r3, [pc, #424]	; (8004d40 <HAL_RCC_OscConfig+0x474>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x2ea>
 8004ba8:	4b64      	ldr	r3, [pc, #400]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	4a63      	ldr	r2, [pc, #396]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb4:	e01c      	b.n	8004bf0 <HAL_RCC_OscConfig+0x324>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b05      	cmp	r3, #5
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x30c>
 8004bbe:	4b5f      	ldr	r3, [pc, #380]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	4a5e      	ldr	r2, [pc, #376]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bc4:	f043 0304 	orr.w	r3, r3, #4
 8004bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bca:	4b5c      	ldr	r3, [pc, #368]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	4a5b      	ldr	r2, [pc, #364]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd6:	e00b      	b.n	8004bf0 <HAL_RCC_OscConfig+0x324>
 8004bd8:	4b58      	ldr	r3, [pc, #352]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	4a57      	ldr	r2, [pc, #348]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	6713      	str	r3, [r2, #112]	; 0x70
 8004be4:	4b55      	ldr	r3, [pc, #340]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	4a54      	ldr	r2, [pc, #336]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bea:	f023 0304 	bic.w	r3, r3, #4
 8004bee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d015      	beq.n	8004c24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fe fac2 	bl	8003180 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfe:	e00a      	b.n	8004c16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c00:	f7fe fabe 	bl	8003180 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e0cb      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c16:	4b49      	ldr	r3, [pc, #292]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0ee      	beq.n	8004c00 <HAL_RCC_OscConfig+0x334>
 8004c22:	e014      	b.n	8004c4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c24:	f7fe faac 	bl	8003180 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2a:	e00a      	b.n	8004c42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c2c:	f7fe faa8 	bl	8003180 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e0b5      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c42:	4b3e      	ldr	r3, [pc, #248]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1ee      	bne.n	8004c2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d105      	bne.n	8004c60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c54:	4b39      	ldr	r3, [pc, #228]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	4a38      	ldr	r2, [pc, #224]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80a1 	beq.w	8004dac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c6a:	4b34      	ldr	r3, [pc, #208]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 030c 	and.w	r3, r3, #12
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d05c      	beq.n	8004d30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d141      	bne.n	8004d02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7e:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <HAL_RCC_OscConfig+0x478>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c84:	f7fe fa7c 	bl	8003180 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c8c:	f7fe fa78 	bl	8003180 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e087      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9e:	4b27      	ldr	r3, [pc, #156]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	019b      	lsls	r3, r3, #6
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	041b      	lsls	r3, r3, #16
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	061b      	lsls	r3, r3, #24
 8004cce:	491b      	ldr	r1, [pc, #108]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd4:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <HAL_RCC_OscConfig+0x478>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cda:	f7fe fa51 	bl	8003180 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce2:	f7fe fa4d 	bl	8003180 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e05c      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf4:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x416>
 8004d00:	e054      	b.n	8004dac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d02:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <HAL_RCC_OscConfig+0x478>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d08:	f7fe fa3a 	bl	8003180 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d10:	f7fe fa36 	bl	8003180 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e045      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x444>
 8004d2e:	e03d      	b.n	8004dac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d107      	bne.n	8004d48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e038      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	40007000 	.word	0x40007000
 8004d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d48:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <HAL_RCC_OscConfig+0x4ec>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d028      	beq.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d121      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d11a      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d78:	4013      	ands	r3, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d111      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	3b01      	subs	r3, #1
 8004d92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d107      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e000      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800

08004dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0cc      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b68      	ldr	r3, [pc, #416]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d90c      	bls.n	8004df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b65      	ldr	r3, [pc, #404]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de6:	4b63      	ldr	r3, [pc, #396]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0b8      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d020      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e10:	4b59      	ldr	r3, [pc, #356]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4a58      	ldr	r2, [pc, #352]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e28:	4b53      	ldr	r3, [pc, #332]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4a52      	ldr	r2, [pc, #328]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e34:	4b50      	ldr	r3, [pc, #320]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	494d      	ldr	r1, [pc, #308]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d044      	beq.n	8004edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d107      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d119      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e07f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d003      	beq.n	8004e7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7a:	4b3f      	ldr	r3, [pc, #252]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e06f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8a:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e067      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e9a:	4b37      	ldr	r3, [pc, #220]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f023 0203 	bic.w	r2, r3, #3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	4934      	ldr	r1, [pc, #208]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eac:	f7fe f968 	bl	8003180 <HAL_GetTick>
 8004eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb4:	f7fe f964 	bl	8003180 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e04f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eca:	4b2b      	ldr	r3, [pc, #172]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 020c 	and.w	r2, r3, #12
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d1eb      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004edc:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d20c      	bcs.n	8004f04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eea:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef2:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e032      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f10:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4916      	ldr	r1, [pc, #88]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f2e:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	490e      	ldr	r1, [pc, #56]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f42:	f000 f821 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8004f46:	4602      	mov	r2, r0
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	490a      	ldr	r1, [pc, #40]	; (8004f7c <HAL_RCC_ClockConfig+0x1c0>)
 8004f54:	5ccb      	ldrb	r3, [r1, r3]
 8004f56:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5a:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <HAL_RCC_ClockConfig+0x1c8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fc fc9a 	bl	800189c <HAL_InitTick>

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40023c00 	.word	0x40023c00
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	08009370 	.word	0x08009370
 8004f80:	20000018 	.word	0x20000018
 8004f84:	20000114 	.word	0x20000114

08004f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f8c:	b090      	sub	sp, #64	; 0x40
 8004f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	637b      	str	r3, [r7, #52]	; 0x34
 8004f94:	2300      	movs	r3, #0
 8004f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f98:	2300      	movs	r3, #0
 8004f9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fa0:	4b59      	ldr	r3, [pc, #356]	; (8005108 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f003 030c 	and.w	r3, r3, #12
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d00d      	beq.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	f200 80a1 	bhi.w	80050f4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_RCC_GetSysClockFreq+0x34>
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d003      	beq.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fba:	e09b      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fbc:	4b53      	ldr	r3, [pc, #332]	; (800510c <HAL_RCC_GetSysClockFreq+0x184>)
 8004fbe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004fc0:	e09b      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fc2:	4b53      	ldr	r3, [pc, #332]	; (8005110 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fc6:	e098      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fc8:	4b4f      	ldr	r3, [pc, #316]	; (8005108 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fd0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fd2:	4b4d      	ldr	r3, [pc, #308]	; (8005108 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d028      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fde:	4b4a      	ldr	r3, [pc, #296]	; (8005108 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	099b      	lsrs	r3, r3, #6
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	623b      	str	r3, [r7, #32]
 8004fe8:	627a      	str	r2, [r7, #36]	; 0x24
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4b47      	ldr	r3, [pc, #284]	; (8005110 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ff4:	fb03 f201 	mul.w	r2, r3, r1
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	fb00 f303 	mul.w	r3, r0, r3
 8004ffe:	4413      	add	r3, r2
 8005000:	4a43      	ldr	r2, [pc, #268]	; (8005110 <HAL_RCC_GetSysClockFreq+0x188>)
 8005002:	fba0 1202 	umull	r1, r2, r0, r2
 8005006:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005008:	460a      	mov	r2, r1
 800500a:	62ba      	str	r2, [r7, #40]	; 0x28
 800500c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800500e:	4413      	add	r3, r2
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005014:	2200      	movs	r2, #0
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	61fa      	str	r2, [r7, #28]
 800501a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800501e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005022:	f7fb f8dd 	bl	80001e0 <__aeabi_uldivmod>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4613      	mov	r3, r2
 800502c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800502e:	e053      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005030:	4b35      	ldr	r3, [pc, #212]	; (8005108 <HAL_RCC_GetSysClockFreq+0x180>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	099b      	lsrs	r3, r3, #6
 8005036:	2200      	movs	r2, #0
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	617a      	str	r2, [r7, #20]
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005042:	f04f 0b00 	mov.w	fp, #0
 8005046:	4652      	mov	r2, sl
 8005048:	465b      	mov	r3, fp
 800504a:	f04f 0000 	mov.w	r0, #0
 800504e:	f04f 0100 	mov.w	r1, #0
 8005052:	0159      	lsls	r1, r3, #5
 8005054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005058:	0150      	lsls	r0, r2, #5
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	ebb2 080a 	subs.w	r8, r2, sl
 8005062:	eb63 090b 	sbc.w	r9, r3, fp
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005072:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005076:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800507a:	ebb2 0408 	subs.w	r4, r2, r8
 800507e:	eb63 0509 	sbc.w	r5, r3, r9
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	00eb      	lsls	r3, r5, #3
 800508c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005090:	00e2      	lsls	r2, r4, #3
 8005092:	4614      	mov	r4, r2
 8005094:	461d      	mov	r5, r3
 8005096:	eb14 030a 	adds.w	r3, r4, sl
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	eb45 030b 	adc.w	r3, r5, fp
 80050a0:	607b      	str	r3, [r7, #4]
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050ae:	4629      	mov	r1, r5
 80050b0:	028b      	lsls	r3, r1, #10
 80050b2:	4621      	mov	r1, r4
 80050b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050b8:	4621      	mov	r1, r4
 80050ba:	028a      	lsls	r2, r1, #10
 80050bc:	4610      	mov	r0, r2
 80050be:	4619      	mov	r1, r3
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	2200      	movs	r2, #0
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	60fa      	str	r2, [r7, #12]
 80050c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050cc:	f7fb f888 	bl	80001e0 <__aeabi_uldivmod>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4613      	mov	r3, r2
 80050d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_RCC_GetSysClockFreq+0x180>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	0c1b      	lsrs	r3, r3, #16
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	3301      	adds	r3, #1
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80050e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050f2:	e002      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <HAL_RCC_GetSysClockFreq+0x184>)
 80050f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3740      	adds	r7, #64	; 0x40
 8005100:	46bd      	mov	sp, r7
 8005102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005106:	bf00      	nop
 8005108:	40023800 	.word	0x40023800
 800510c:	00f42400 	.word	0x00f42400
 8005110:	017d7840 	.word	0x017d7840

08005114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005118:	4b03      	ldr	r3, [pc, #12]	; (8005128 <HAL_RCC_GetHCLKFreq+0x14>)
 800511a:	681b      	ldr	r3, [r3, #0]
}
 800511c:	4618      	mov	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000018 	.word	0x20000018

0800512c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005130:	f7ff fff0 	bl	8005114 <HAL_RCC_GetHCLKFreq>
 8005134:	4602      	mov	r2, r0
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	0a9b      	lsrs	r3, r3, #10
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	4903      	ldr	r1, [pc, #12]	; (8005150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005142:	5ccb      	ldrb	r3, [r1, r3]
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005148:	4618      	mov	r0, r3
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40023800 	.word	0x40023800
 8005150:	08009380 	.word	0x08009380

08005154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005158:	f7ff ffdc 	bl	8005114 <HAL_RCC_GetHCLKFreq>
 800515c:	4602      	mov	r2, r0
 800515e:	4b05      	ldr	r3, [pc, #20]	; (8005174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	0b5b      	lsrs	r3, r3, #13
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	4903      	ldr	r1, [pc, #12]	; (8005178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800516a:	5ccb      	ldrb	r3, [r1, r3]
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005170:	4618      	mov	r0, r3
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40023800 	.word	0x40023800
 8005178:	08009380 	.word	0x08009380

0800517c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	220f      	movs	r2, #15
 800518a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800518c:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <HAL_RCC_GetClockConfig+0x5c>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 0203 	and.w	r2, r3, #3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005198:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <HAL_RCC_GetClockConfig+0x5c>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <HAL_RCC_GetClockConfig+0x5c>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80051b0:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <HAL_RCC_GetClockConfig+0x5c>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	08db      	lsrs	r3, r3, #3
 80051b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051be:	4b07      	ldr	r3, [pc, #28]	; (80051dc <HAL_RCC_GetClockConfig+0x60>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0207 	and.w	r2, r3, #7
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	601a      	str	r2, [r3, #0]
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40023800 	.word	0x40023800
 80051dc:	40023c00 	.word	0x40023c00

080051e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e041      	b.n	8005276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc fa84 	bl	8001714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f000 fcaa 	bl	8005b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b01      	cmp	r3, #1
 8005292:	d001      	beq.n	8005298 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e03c      	b.n	8005312 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1e      	ldr	r2, [pc, #120]	; (8005320 <HAL_TIM_Base_Start+0xa0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d018      	beq.n	80052dc <HAL_TIM_Base_Start+0x5c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b2:	d013      	beq.n	80052dc <HAL_TIM_Base_Start+0x5c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1a      	ldr	r2, [pc, #104]	; (8005324 <HAL_TIM_Base_Start+0xa4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00e      	beq.n	80052dc <HAL_TIM_Base_Start+0x5c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a19      	ldr	r2, [pc, #100]	; (8005328 <HAL_TIM_Base_Start+0xa8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d009      	beq.n	80052dc <HAL_TIM_Base_Start+0x5c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a17      	ldr	r2, [pc, #92]	; (800532c <HAL_TIM_Base_Start+0xac>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d004      	beq.n	80052dc <HAL_TIM_Base_Start+0x5c>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a16      	ldr	r2, [pc, #88]	; (8005330 <HAL_TIM_Base_Start+0xb0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d111      	bne.n	8005300 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b06      	cmp	r3, #6
 80052ec:	d010      	beq.n	8005310 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0201 	orr.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fe:	e007      	b.n	8005310 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40010000 	.word	0x40010000
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800
 800532c:	40000c00 	.word	0x40000c00
 8005330:	40014000 	.word	0x40014000

08005334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	d001      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e044      	b.n	80053d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d018      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x6c>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005376:	d013      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x6c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1a      	ldr	r2, [pc, #104]	; (80053e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00e      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x6c>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a19      	ldr	r2, [pc, #100]	; (80053ec <HAL_TIM_Base_Start_IT+0xb8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d009      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x6c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d004      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x6c>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a16      	ldr	r2, [pc, #88]	; (80053f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d111      	bne.n	80053c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b06      	cmp	r3, #6
 80053b0:	d010      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0201 	orr.w	r2, r2, #1
 80053c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c2:	e007      	b.n	80053d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800
 80053f0:	40000c00 	.word	0x40000c00
 80053f4:	40014000 	.word	0x40014000

080053f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0201 	bic.w	r2, r2, #1
 800540e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6a1a      	ldr	r2, [r3, #32]
 8005416:	f241 1311 	movw	r3, #4369	; 0x1111
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10f      	bne.n	8005440 <HAL_TIM_Base_Stop_IT+0x48>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6a1a      	ldr	r2, [r3, #32]
 8005426:	f240 4344 	movw	r3, #1092	; 0x444
 800542a:	4013      	ands	r3, r2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d107      	bne.n	8005440 <HAL_TIM_Base_Stop_IT+0x48>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b082      	sub	sp, #8
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e041      	b.n	80054ee <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7fc f9ea 	bl	8001858 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3304      	adds	r3, #4
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f000 fb6e 	bl	8005b78 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0208 	bic.w	r2, r2, #8
 80054aa:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6819      	ldr	r1, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b086      	sub	sp, #24
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e097      	b.n	800563a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fc f94a 	bl	80017b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6812      	ldr	r2, [r2, #0]
 8005536:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800553a:	f023 0307 	bic.w	r3, r3, #7
 800553e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3304      	adds	r3, #4
 8005548:	4619      	mov	r1, r3
 800554a:	4610      	mov	r0, r2
 800554c:	f000 fb14 	bl	8005b78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005578:	f023 0303 	bic.w	r3, r3, #3
 800557c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	4313      	orrs	r3, r2
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005596:	f023 030c 	bic.w	r3, r3, #12
 800559a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	4313      	orrs	r3, r2
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	011a      	lsls	r2, r3, #4
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	031b      	lsls	r3, r3, #12
 80055c6:	4313      	orrs	r3, r2
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055d4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80055dc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	4313      	orrs	r3, r2
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b084      	sub	sp, #16
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005652:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800565a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005662:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800566a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d110      	bne.n	8005694 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d102      	bne.n	800567e <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005678:	7b7b      	ldrb	r3, [r7, #13]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d001      	beq.n	8005682 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e089      	b.n	8005796 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2202      	movs	r2, #2
 8005686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2202      	movs	r2, #2
 800568e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005692:	e031      	b.n	80056f8 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b04      	cmp	r3, #4
 8005698:	d110      	bne.n	80056bc <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800569a:	7bbb      	ldrb	r3, [r7, #14]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d102      	bne.n	80056a6 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056a0:	7b3b      	ldrb	r3, [r7, #12]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d001      	beq.n	80056aa <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e075      	b.n	8005796 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2202      	movs	r2, #2
 80056b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056ba:	e01d      	b.n	80056f8 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d108      	bne.n	80056d4 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056c2:	7bbb      	ldrb	r3, [r7, #14]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d105      	bne.n	80056d4 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056c8:	7b7b      	ldrb	r3, [r7, #13]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d102      	bne.n	80056d4 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056ce:	7b3b      	ldrb	r3, [r7, #12]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d001      	beq.n	80056d8 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e05e      	b.n	8005796 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_TIM_Encoder_Start_IT+0xc4>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b04      	cmp	r3, #4
 8005702:	d010      	beq.n	8005726 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005704:	e01f      	b.n	8005746 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2201      	movs	r2, #1
 800570c:	2100      	movs	r1, #0
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fb4c 	bl	8005dac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0202 	orr.w	r2, r2, #2
 8005722:	60da      	str	r2, [r3, #12]
      break;
 8005724:	e02e      	b.n	8005784 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2201      	movs	r2, #1
 800572c:	2104      	movs	r1, #4
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fb3c 	bl	8005dac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0204 	orr.w	r2, r2, #4
 8005742:	60da      	str	r2, [r3, #12]
      break;
 8005744:	e01e      	b.n	8005784 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2201      	movs	r2, #1
 800574c:	2100      	movs	r1, #0
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fb2c 	bl	8005dac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2201      	movs	r2, #1
 800575a:	2104      	movs	r1, #4
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fb25 	bl	8005dac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0202 	orr.w	r2, r2, #2
 8005770:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0204 	orr.w	r2, r2, #4
 8005780:	60da      	str	r2, [r3, #12]
      break;
 8005782:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b082      	sub	sp, #8
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d122      	bne.n	80057fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d11b      	bne.n	80057fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f06f 0202 	mvn.w	r2, #2
 80057ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f003 0303 	and.w	r3, r3, #3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7fa ffa7 	bl	8000734 <HAL_TIM_IC_CaptureCallback>
 80057e6:	e005      	b.n	80057f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f9a7 	bl	8005b3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f9ae 	bl	8005b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b04      	cmp	r3, #4
 8005806:	d122      	bne.n	800584e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b04      	cmp	r3, #4
 8005814:	d11b      	bne.n	800584e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f06f 0204 	mvn.w	r2, #4
 800581e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7fa ff7d 	bl	8000734 <HAL_TIM_IC_CaptureCallback>
 800583a:	e005      	b.n	8005848 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f97d 	bl	8005b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f984 	bl	8005b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b08      	cmp	r3, #8
 800585a:	d122      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b08      	cmp	r3, #8
 8005868:	d11b      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f06f 0208 	mvn.w	r2, #8
 8005872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2204      	movs	r2, #4
 8005878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7fa ff53 	bl	8000734 <HAL_TIM_IC_CaptureCallback>
 800588e:	e005      	b.n	800589c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f953 	bl	8005b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f95a 	bl	8005b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b10      	cmp	r3, #16
 80058ae:	d122      	bne.n	80058f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b10      	cmp	r3, #16
 80058bc:	d11b      	bne.n	80058f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f06f 0210 	mvn.w	r2, #16
 80058c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2208      	movs	r2, #8
 80058cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7fa ff29 	bl	8000734 <HAL_TIM_IC_CaptureCallback>
 80058e2:	e005      	b.n	80058f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f929 	bl	8005b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f930 	bl	8005b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b01      	cmp	r3, #1
 8005902:	d10e      	bne.n	8005922 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b01      	cmp	r3, #1
 8005910:	d107      	bne.n	8005922 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f06f 0201 	mvn.w	r2, #1
 800591a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7fb fcf7 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592c:	2b80      	cmp	r3, #128	; 0x80
 800592e:	d10e      	bne.n	800594e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593a:	2b80      	cmp	r3, #128	; 0x80
 800593c:	d107      	bne.n	800594e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 facd 	bl	8005ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	d10e      	bne.n	800597a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005966:	2b40      	cmp	r3, #64	; 0x40
 8005968:	d107      	bne.n	800597a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f8f5 	bl	8005b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b20      	cmp	r3, #32
 8005986:	d10e      	bne.n	80059a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b20      	cmp	r3, #32
 8005994:	d107      	bne.n	80059a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f06f 0220 	mvn.w	r2, #32
 800599e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fa97 	bl	8005ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b084      	sub	sp, #16
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_TIM_ConfigClockSource+0x1c>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e0b4      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x186>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2202      	movs	r2, #2
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059f0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a02:	d03e      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0xd4>
 8005a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a08:	f200 8087 	bhi.w	8005b1a <HAL_TIM_ConfigClockSource+0x16c>
 8005a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a10:	f000 8086 	beq.w	8005b20 <HAL_TIM_ConfigClockSource+0x172>
 8005a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a18:	d87f      	bhi.n	8005b1a <HAL_TIM_ConfigClockSource+0x16c>
 8005a1a:	2b70      	cmp	r3, #112	; 0x70
 8005a1c:	d01a      	beq.n	8005a54 <HAL_TIM_ConfigClockSource+0xa6>
 8005a1e:	2b70      	cmp	r3, #112	; 0x70
 8005a20:	d87b      	bhi.n	8005b1a <HAL_TIM_ConfigClockSource+0x16c>
 8005a22:	2b60      	cmp	r3, #96	; 0x60
 8005a24:	d050      	beq.n	8005ac8 <HAL_TIM_ConfigClockSource+0x11a>
 8005a26:	2b60      	cmp	r3, #96	; 0x60
 8005a28:	d877      	bhi.n	8005b1a <HAL_TIM_ConfigClockSource+0x16c>
 8005a2a:	2b50      	cmp	r3, #80	; 0x50
 8005a2c:	d03c      	beq.n	8005aa8 <HAL_TIM_ConfigClockSource+0xfa>
 8005a2e:	2b50      	cmp	r3, #80	; 0x50
 8005a30:	d873      	bhi.n	8005b1a <HAL_TIM_ConfigClockSource+0x16c>
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d058      	beq.n	8005ae8 <HAL_TIM_ConfigClockSource+0x13a>
 8005a36:	2b40      	cmp	r3, #64	; 0x40
 8005a38:	d86f      	bhi.n	8005b1a <HAL_TIM_ConfigClockSource+0x16c>
 8005a3a:	2b30      	cmp	r3, #48	; 0x30
 8005a3c:	d064      	beq.n	8005b08 <HAL_TIM_ConfigClockSource+0x15a>
 8005a3e:	2b30      	cmp	r3, #48	; 0x30
 8005a40:	d86b      	bhi.n	8005b1a <HAL_TIM_ConfigClockSource+0x16c>
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d060      	beq.n	8005b08 <HAL_TIM_ConfigClockSource+0x15a>
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d867      	bhi.n	8005b1a <HAL_TIM_ConfigClockSource+0x16c>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d05c      	beq.n	8005b08 <HAL_TIM_ConfigClockSource+0x15a>
 8005a4e:	2b10      	cmp	r3, #16
 8005a50:	d05a      	beq.n	8005b08 <HAL_TIM_ConfigClockSource+0x15a>
 8005a52:	e062      	b.n	8005b1a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	6899      	ldr	r1, [r3, #8]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f000 f982 	bl	8005d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	609a      	str	r2, [r3, #8]
      break;
 8005a80:	e04f      	b.n	8005b22 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6899      	ldr	r1, [r3, #8]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f000 f96b 	bl	8005d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aa4:	609a      	str	r2, [r3, #8]
      break;
 8005aa6:	e03c      	b.n	8005b22 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6818      	ldr	r0, [r3, #0]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	6859      	ldr	r1, [r3, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	f000 f8df 	bl	8005c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2150      	movs	r1, #80	; 0x50
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 f938 	bl	8005d36 <TIM_ITRx_SetConfig>
      break;
 8005ac6:	e02c      	b.n	8005b22 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	6859      	ldr	r1, [r3, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	f000 f8fe 	bl	8005cd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2160      	movs	r1, #96	; 0x60
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 f928 	bl	8005d36 <TIM_ITRx_SetConfig>
      break;
 8005ae6:	e01c      	b.n	8005b22 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	6859      	ldr	r1, [r3, #4]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	461a      	mov	r2, r3
 8005af6:	f000 f8bf 	bl	8005c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2140      	movs	r1, #64	; 0x40
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 f918 	bl	8005d36 <TIM_ITRx_SetConfig>
      break;
 8005b06:	e00c      	b.n	8005b22 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4619      	mov	r1, r3
 8005b12:	4610      	mov	r0, r2
 8005b14:	f000 f90f 	bl	8005d36 <TIM_ITRx_SetConfig>
      break;
 8005b18:	e003      	b.n	8005b22 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b1e:	e000      	b.n	8005b22 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a34      	ldr	r2, [pc, #208]	; (8005c5c <TIM_Base_SetConfig+0xe4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00f      	beq.n	8005bb0 <TIM_Base_SetConfig+0x38>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b96:	d00b      	beq.n	8005bb0 <TIM_Base_SetConfig+0x38>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a31      	ldr	r2, [pc, #196]	; (8005c60 <TIM_Base_SetConfig+0xe8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d007      	beq.n	8005bb0 <TIM_Base_SetConfig+0x38>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a30      	ldr	r2, [pc, #192]	; (8005c64 <TIM_Base_SetConfig+0xec>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_Base_SetConfig+0x38>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a2f      	ldr	r2, [pc, #188]	; (8005c68 <TIM_Base_SetConfig+0xf0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d108      	bne.n	8005bc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a25      	ldr	r2, [pc, #148]	; (8005c5c <TIM_Base_SetConfig+0xe4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d01b      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd0:	d017      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a22      	ldr	r2, [pc, #136]	; (8005c60 <TIM_Base_SetConfig+0xe8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a21      	ldr	r2, [pc, #132]	; (8005c64 <TIM_Base_SetConfig+0xec>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00f      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a20      	ldr	r2, [pc, #128]	; (8005c68 <TIM_Base_SetConfig+0xf0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00b      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a1f      	ldr	r2, [pc, #124]	; (8005c6c <TIM_Base_SetConfig+0xf4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d007      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1e      	ldr	r2, [pc, #120]	; (8005c70 <TIM_Base_SetConfig+0xf8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d003      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a1d      	ldr	r2, [pc, #116]	; (8005c74 <TIM_Base_SetConfig+0xfc>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d108      	bne.n	8005c14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a08      	ldr	r2, [pc, #32]	; (8005c5c <TIM_Base_SetConfig+0xe4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d103      	bne.n	8005c48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	615a      	str	r2, [r3, #20]
}
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40000c00 	.word	0x40000c00
 8005c6c:	40014000 	.word	0x40014000
 8005c70:	40014400 	.word	0x40014400
 8005c74:	40014800 	.word	0x40014800

08005c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f023 0201 	bic.w	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f023 030a 	bic.w	r3, r3, #10
 8005cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b087      	sub	sp, #28
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f023 0210 	bic.w	r2, r3, #16
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	031b      	lsls	r3, r3, #12
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b085      	sub	sp, #20
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f043 0307 	orr.w	r3, r3, #7
 8005d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	609a      	str	r2, [r3, #8]
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	021a      	lsls	r2, r3, #8
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	609a      	str	r2, [r3, #8]
}
 8005da0:	bf00      	nop
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a1a      	ldr	r2, [r3, #32]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	401a      	ands	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a1a      	ldr	r2, [r3, #32]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	fa01 f303 	lsl.w	r3, r1, r3
 8005de4:	431a      	orrs	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e050      	b.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1c      	ldr	r2, [pc, #112]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d018      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e5c:	d013      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a18      	ldr	r2, [pc, #96]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00e      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a16      	ldr	r2, [pc, #88]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d009      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a15      	ldr	r2, [pc, #84]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a13      	ldr	r2, [pc, #76]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d10c      	bne.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	40010000 	.word	0x40010000
 8005ec4:	40000400 	.word	0x40000400
 8005ec8:	40000800 	.word	0x40000800
 8005ecc:	40000c00 	.word	0x40000c00
 8005ed0:	40014000 	.word	0x40014000

08005ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <__NVIC_SetPriority>:
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	4603      	mov	r3, r0
 8005f04:	6039      	str	r1, [r7, #0]
 8005f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	db0a      	blt.n	8005f26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	490c      	ldr	r1, [pc, #48]	; (8005f48 <__NVIC_SetPriority+0x4c>)
 8005f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f1a:	0112      	lsls	r2, r2, #4
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	440b      	add	r3, r1
 8005f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f24:	e00a      	b.n	8005f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	4908      	ldr	r1, [pc, #32]	; (8005f4c <__NVIC_SetPriority+0x50>)
 8005f2c:	79fb      	ldrb	r3, [r7, #7]
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	3b04      	subs	r3, #4
 8005f34:	0112      	lsls	r2, r2, #4
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	440b      	add	r3, r1
 8005f3a:	761a      	strb	r2, [r3, #24]
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	e000e100 	.word	0xe000e100
 8005f4c:	e000ed00 	.word	0xe000ed00

08005f50 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005f54:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <SysTick_Handler+0x1c>)
 8005f56:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005f58:	f001 fd28 	bl	80079ac <xTaskGetSchedulerState>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d001      	beq.n	8005f66 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005f62:	f002 fb11 	bl	8008588 <xPortSysTickHandler>
  }
}
 8005f66:	bf00      	nop
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	e000e010 	.word	0xe000e010

08005f70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f74:	2100      	movs	r1, #0
 8005f76:	f06f 0004 	mvn.w	r0, #4
 8005f7a:	f7ff ffbf 	bl	8005efc <__NVIC_SetPriority>
#endif
}
 8005f7e:	bf00      	nop
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f8a:	f3ef 8305 	mrs	r3, IPSR
 8005f8e:	603b      	str	r3, [r7, #0]
  return(result);
 8005f90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f96:	f06f 0305 	mvn.w	r3, #5
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	e00c      	b.n	8005fb8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f9e:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <osKernelInitialize+0x44>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d105      	bne.n	8005fb2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005fa6:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <osKernelInitialize+0x44>)
 8005fa8:	2201      	movs	r2, #1
 8005faa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005fac:	2300      	movs	r3, #0
 8005fae:	607b      	str	r3, [r7, #4]
 8005fb0:	e002      	b.n	8005fb8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005fb8:	687b      	ldr	r3, [r7, #4]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	20000838 	.word	0x20000838

08005fcc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fd2:	f3ef 8305 	mrs	r3, IPSR
 8005fd6:	603b      	str	r3, [r7, #0]
  return(result);
 8005fd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005fde:	f06f 0305 	mvn.w	r3, #5
 8005fe2:	607b      	str	r3, [r7, #4]
 8005fe4:	e010      	b.n	8006008 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <osKernelStart+0x48>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d109      	bne.n	8006002 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005fee:	f7ff ffbf 	bl	8005f70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ff2:	4b08      	ldr	r3, [pc, #32]	; (8006014 <osKernelStart+0x48>)
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ff8:	f001 f87c 	bl	80070f4 <vTaskStartScheduler>
      stat = osOK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	607b      	str	r3, [r7, #4]
 8006000:	e002      	b.n	8006008 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006002:	f04f 33ff 	mov.w	r3, #4294967295
 8006006:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006008:	687b      	ldr	r3, [r7, #4]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20000838 	.word	0x20000838

08006018 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006018:	b580      	push	{r7, lr}
 800601a:	b08e      	sub	sp, #56	; 0x38
 800601c:	af04      	add	r7, sp, #16
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006024:	2300      	movs	r3, #0
 8006026:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006028:	f3ef 8305 	mrs	r3, IPSR
 800602c:	617b      	str	r3, [r7, #20]
  return(result);
 800602e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006030:	2b00      	cmp	r3, #0
 8006032:	d17e      	bne.n	8006132 <osThreadNew+0x11a>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d07b      	beq.n	8006132 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800603e:	2318      	movs	r3, #24
 8006040:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006046:	f04f 33ff 	mov.w	r3, #4294967295
 800604a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d045      	beq.n	80060de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <osThreadNew+0x48>
        name = attr->name;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <osThreadNew+0x6e>
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	2b38      	cmp	r3, #56	; 0x38
 8006078:	d805      	bhi.n	8006086 <osThreadNew+0x6e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <osThreadNew+0x72>
        return (NULL);
 8006086:	2300      	movs	r3, #0
 8006088:	e054      	b.n	8006134 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	089b      	lsrs	r3, r3, #2
 8006098:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00e      	beq.n	80060c0 <osThreadNew+0xa8>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	2bbb      	cmp	r3, #187	; 0xbb
 80060a8:	d90a      	bls.n	80060c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d006      	beq.n	80060c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <osThreadNew+0xa8>
        mem = 1;
 80060ba:	2301      	movs	r3, #1
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	e010      	b.n	80060e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10c      	bne.n	80060e2 <osThreadNew+0xca>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d108      	bne.n	80060e2 <osThreadNew+0xca>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d104      	bne.n	80060e2 <osThreadNew+0xca>
          mem = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	61bb      	str	r3, [r7, #24]
 80060dc:	e001      	b.n	80060e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d110      	bne.n	800610a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060f0:	9202      	str	r2, [sp, #8]
 80060f2:	9301      	str	r3, [sp, #4]
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	6a3a      	ldr	r2, [r7, #32]
 80060fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fe0c 	bl	8006d1c <xTaskCreateStatic>
 8006104:	4603      	mov	r3, r0
 8006106:	613b      	str	r3, [r7, #16]
 8006108:	e013      	b.n	8006132 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d110      	bne.n	8006132 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	b29a      	uxth	r2, r3
 8006114:	f107 0310 	add.w	r3, r7, #16
 8006118:	9301      	str	r3, [sp, #4]
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 fe57 	bl	8006dd6 <xTaskCreate>
 8006128:	4603      	mov	r3, r0
 800612a:	2b01      	cmp	r3, #1
 800612c:	d001      	beq.n	8006132 <osThreadNew+0x11a>
            hTask = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006132:	693b      	ldr	r3, [r7, #16]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3728      	adds	r7, #40	; 0x28
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006144:	f3ef 8305 	mrs	r3, IPSR
 8006148:	60bb      	str	r3, [r7, #8]
  return(result);
 800614a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <osDelay+0x1c>
    stat = osErrorISR;
 8006150:	f06f 0305 	mvn.w	r3, #5
 8006154:	60fb      	str	r3, [r7, #12]
 8006156:	e007      	b.n	8006168 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 ff92 	bl	800708c <vTaskDelay>
    }
  }

  return (stat);
 8006168:	68fb      	ldr	r3, [r7, #12]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4a07      	ldr	r2, [pc, #28]	; (80061a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4a06      	ldr	r2, [pc, #24]	; (80061a4 <vApplicationGetIdleTaskMemory+0x30>)
 800618a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2280      	movs	r2, #128	; 0x80
 8006190:	601a      	str	r2, [r3, #0]
}
 8006192:	bf00      	nop
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	2000083c 	.word	0x2000083c
 80061a4:	200008f8 	.word	0x200008f8

080061a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4a07      	ldr	r2, [pc, #28]	; (80061d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80061b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	4a06      	ldr	r2, [pc, #24]	; (80061d8 <vApplicationGetTimerTaskMemory+0x30>)
 80061be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061c6:	601a      	str	r2, [r3, #0]
}
 80061c8:	bf00      	nop
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	20000af8 	.word	0x20000af8
 80061d8:	20000bb4 	.word	0x20000bb4

080061dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f103 0208 	add.w	r2, r3, #8
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f04f 32ff 	mov.w	r2, #4294967295
 80061f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f103 0208 	add.w	r2, r3, #8
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f103 0208 	add.w	r2, r3, #8
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006236:	b480      	push	{r7}
 8006238:	b085      	sub	sp, #20
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	601a      	str	r2, [r3, #0]
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800627e:	b480      	push	{r7}
 8006280:	b085      	sub	sp, #20
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006294:	d103      	bne.n	800629e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	e00c      	b.n	80062b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3308      	adds	r3, #8
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	e002      	b.n	80062ac <vListInsert+0x2e>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d2f6      	bcs.n	80062a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	601a      	str	r2, [r3, #0]
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6892      	ldr	r2, [r2, #8]
 8006306:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6852      	ldr	r2, [r2, #4]
 8006310:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	429a      	cmp	r2, r3
 800631a:	d103      	bne.n	8006324 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	1e5a      	subs	r2, r3, #1
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10a      	bne.n	800636e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800636a:	bf00      	nop
 800636c:	e7fe      	b.n	800636c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800636e:	f002 f879 	bl	8008464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637a:	68f9      	ldr	r1, [r7, #12]
 800637c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800637e:	fb01 f303 	mul.w	r3, r1, r3
 8006382:	441a      	add	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639e:	3b01      	subs	r3, #1
 80063a0:	68f9      	ldr	r1, [r7, #12]
 80063a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063a4:	fb01 f303 	mul.w	r3, r1, r3
 80063a8:	441a      	add	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	22ff      	movs	r2, #255	; 0xff
 80063b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	22ff      	movs	r2, #255	; 0xff
 80063ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d114      	bne.n	80063ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01a      	beq.n	8006402 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3310      	adds	r3, #16
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 f929 	bl	8007628 <xTaskRemoveFromEventList>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d012      	beq.n	8006402 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063dc:	4b0c      	ldr	r3, [pc, #48]	; (8006410 <xQueueGenericReset+0xcc>)
 80063de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	e009      	b.n	8006402 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3310      	adds	r3, #16
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff fef2 	bl	80061dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3324      	adds	r3, #36	; 0x24
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff feed 	bl	80061dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006402:	f002 f85f 	bl	80084c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006406:	2301      	movs	r3, #1
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	e000ed04 	.word	0xe000ed04

08006414 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08e      	sub	sp, #56	; 0x38
 8006418:	af02      	add	r7, sp, #8
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <xQueueGenericCreateStatic+0x52>
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <xQueueGenericCreateStatic+0x56>
 8006466:	2301      	movs	r3, #1
 8006468:	e000      	b.n	800646c <xQueueGenericCreateStatic+0x58>
 800646a:	2300      	movs	r3, #0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10a      	bne.n	8006486 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	623b      	str	r3, [r7, #32]
}
 8006482:	bf00      	nop
 8006484:	e7fe      	b.n	8006484 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d102      	bne.n	8006492 <xQueueGenericCreateStatic+0x7e>
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <xQueueGenericCreateStatic+0x82>
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <xQueueGenericCreateStatic+0x84>
 8006496:	2300      	movs	r3, #0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	61fb      	str	r3, [r7, #28]
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064b2:	2350      	movs	r3, #80	; 0x50
 80064b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b50      	cmp	r3, #80	; 0x50
 80064ba:	d00a      	beq.n	80064d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	61bb      	str	r3, [r7, #24]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80064d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00d      	beq.n	80064fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	4613      	mov	r3, r2
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f805 	bl	8006504 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3730      	adds	r7, #48	; 0x30
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d103      	bne.n	8006520 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	e002      	b.n	8006526 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006532:	2101      	movs	r1, #1
 8006534:	69b8      	ldr	r0, [r7, #24]
 8006536:	f7ff ff05 	bl	8006344 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	78fa      	ldrb	r2, [r7, #3]
 800653e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08e      	sub	sp, #56	; 0x38
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800655a:	2300      	movs	r3, #0
 800655c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <xQueueGenericSend+0x32>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d103      	bne.n	800658c <xQueueGenericSend+0x40>
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <xQueueGenericSend+0x44>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <xQueueGenericSend+0x46>
 8006590:	2300      	movs	r3, #0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <xQueueGenericSend+0x60>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d103      	bne.n	80065ba <xQueueGenericSend+0x6e>
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <xQueueGenericSend+0x72>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <xQueueGenericSend+0x74>
 80065be:	2300      	movs	r3, #0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10a      	bne.n	80065da <xQueueGenericSend+0x8e>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	623b      	str	r3, [r7, #32]
}
 80065d6:	bf00      	nop
 80065d8:	e7fe      	b.n	80065d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065da:	f001 f9e7 	bl	80079ac <xTaskGetSchedulerState>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <xQueueGenericSend+0x9e>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <xQueueGenericSend+0xa2>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <xQueueGenericSend+0xa4>
 80065ee:	2300      	movs	r3, #0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <xQueueGenericSend+0xbe>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	61fb      	str	r3, [r7, #28]
}
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800660a:	f001 ff2b 	bl	8008464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006616:	429a      	cmp	r2, r3
 8006618:	d302      	bcc.n	8006620 <xQueueGenericSend+0xd4>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d129      	bne.n	8006674 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006626:	f000 fa0b 	bl	8006a40 <prvCopyDataToQueue>
 800662a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	d010      	beq.n	8006656 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	3324      	adds	r3, #36	; 0x24
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fff5 	bl	8007628 <xTaskRemoveFromEventList>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d013      	beq.n	800666c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006644:	4b3f      	ldr	r3, [pc, #252]	; (8006744 <xQueueGenericSend+0x1f8>)
 8006646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	e00a      	b.n	800666c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d007      	beq.n	800666c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800665c:	4b39      	ldr	r3, [pc, #228]	; (8006744 <xQueueGenericSend+0x1f8>)
 800665e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800666c:	f001 ff2a 	bl	80084c4 <vPortExitCritical>
				return pdPASS;
 8006670:	2301      	movs	r3, #1
 8006672:	e063      	b.n	800673c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d103      	bne.n	8006682 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800667a:	f001 ff23 	bl	80084c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800667e:	2300      	movs	r3, #0
 8006680:	e05c      	b.n	800673c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006684:	2b00      	cmp	r3, #0
 8006686:	d106      	bne.n	8006696 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006688:	f107 0314 	add.w	r3, r7, #20
 800668c:	4618      	mov	r0, r3
 800668e:	f001 f82f 	bl	80076f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006692:	2301      	movs	r3, #1
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006696:	f001 ff15 	bl	80084c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800669a:	f000 fd9b 	bl	80071d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800669e:	f001 fee1 	bl	8008464 <vPortEnterCritical>
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066a8:	b25b      	sxtb	r3, r3
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ae:	d103      	bne.n	80066b8 <xQueueGenericSend+0x16c>
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066be:	b25b      	sxtb	r3, r3
 80066c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c4:	d103      	bne.n	80066ce <xQueueGenericSend+0x182>
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066ce:	f001 fef9 	bl	80084c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066d2:	1d3a      	adds	r2, r7, #4
 80066d4:	f107 0314 	add.w	r3, r7, #20
 80066d8:	4611      	mov	r1, r2
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 f81e 	bl	800771c <xTaskCheckForTimeOut>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d124      	bne.n	8006730 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066e8:	f000 faa2 	bl	8006c30 <prvIsQueueFull>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d018      	beq.n	8006724 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	3310      	adds	r3, #16
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	4611      	mov	r1, r2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 ff44 	bl	8007588 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006702:	f000 fa2d 	bl	8006b60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006706:	f000 fd73 	bl	80071f0 <xTaskResumeAll>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	f47f af7c 	bne.w	800660a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006712:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <xQueueGenericSend+0x1f8>)
 8006714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	e772      	b.n	800660a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006726:	f000 fa1b 	bl	8006b60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800672a:	f000 fd61 	bl	80071f0 <xTaskResumeAll>
 800672e:	e76c      	b.n	800660a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006732:	f000 fa15 	bl	8006b60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006736:	f000 fd5b 	bl	80071f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800673a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800673c:	4618      	mov	r0, r3
 800673e:	3738      	adds	r7, #56	; 0x38
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	e000ed04 	.word	0xe000ed04

08006748 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b090      	sub	sp, #64	; 0x40
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10a      	bne.n	8006776 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006772:	bf00      	nop
 8006774:	e7fe      	b.n	8006774 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d103      	bne.n	8006784 <xQueueGenericSendFromISR+0x3c>
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <xQueueGenericSendFromISR+0x40>
 8006784:	2301      	movs	r3, #1
 8006786:	e000      	b.n	800678a <xQueueGenericSendFromISR+0x42>
 8006788:	2300      	movs	r3, #0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067a0:	bf00      	nop
 80067a2:	e7fe      	b.n	80067a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d103      	bne.n	80067b2 <xQueueGenericSendFromISR+0x6a>
 80067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d101      	bne.n	80067b6 <xQueueGenericSendFromISR+0x6e>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e000      	b.n	80067b8 <xQueueGenericSendFromISR+0x70>
 80067b6:	2300      	movs	r3, #0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10a      	bne.n	80067d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	623b      	str	r3, [r7, #32]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067d2:	f001 ff29 	bl	8008628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067d6:	f3ef 8211 	mrs	r2, BASEPRI
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	61fa      	str	r2, [r7, #28]
 80067ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d302      	bcc.n	8006804 <xQueueGenericSendFromISR+0xbc>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d12f      	bne.n	8006864 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800680a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800681a:	f000 f911 	bl	8006a40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800681e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006826:	d112      	bne.n	800684e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	2b00      	cmp	r3, #0
 800682e:	d016      	beq.n	800685e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	3324      	adds	r3, #36	; 0x24
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fef7 	bl	8007628 <xTaskRemoveFromEventList>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00e      	beq.n	800685e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	e007      	b.n	800685e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800684e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006852:	3301      	adds	r3, #1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	b25a      	sxtb	r2, r3
 8006858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800685e:	2301      	movs	r3, #1
 8006860:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006862:	e001      	b.n	8006868 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006864:	2300      	movs	r3, #0
 8006866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006872:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006876:	4618      	mov	r0, r3
 8006878:	3740      	adds	r7, #64	; 0x40
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08c      	sub	sp, #48	; 0x30
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800688c:	2300      	movs	r3, #0
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10a      	bne.n	80068b0 <xQueueReceive+0x30>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	623b      	str	r3, [r7, #32]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d103      	bne.n	80068be <xQueueReceive+0x3e>
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <xQueueReceive+0x42>
 80068be:	2301      	movs	r3, #1
 80068c0:	e000      	b.n	80068c4 <xQueueReceive+0x44>
 80068c2:	2300      	movs	r3, #0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <xQueueReceive+0x5e>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	61fb      	str	r3, [r7, #28]
}
 80068da:	bf00      	nop
 80068dc:	e7fe      	b.n	80068dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068de:	f001 f865 	bl	80079ac <xTaskGetSchedulerState>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d102      	bne.n	80068ee <xQueueReceive+0x6e>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <xQueueReceive+0x72>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <xQueueReceive+0x74>
 80068f2:	2300      	movs	r3, #0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10a      	bne.n	800690e <xQueueReceive+0x8e>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	61bb      	str	r3, [r7, #24]
}
 800690a:	bf00      	nop
 800690c:	e7fe      	b.n	800690c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800690e:	f001 fda9 	bl	8008464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01f      	beq.n	800695e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006922:	f000 f8f7 	bl	8006b14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	1e5a      	subs	r2, r3, #1
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00f      	beq.n	8006956 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	3310      	adds	r3, #16
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fe74 	bl	8007628 <xTaskRemoveFromEventList>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006946:	4b3d      	ldr	r3, [pc, #244]	; (8006a3c <xQueueReceive+0x1bc>)
 8006948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006956:	f001 fdb5 	bl	80084c4 <vPortExitCritical>
				return pdPASS;
 800695a:	2301      	movs	r3, #1
 800695c:	e069      	b.n	8006a32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d103      	bne.n	800696c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006964:	f001 fdae 	bl	80084c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006968:	2300      	movs	r3, #0
 800696a:	e062      	b.n	8006a32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006972:	f107 0310 	add.w	r3, r7, #16
 8006976:	4618      	mov	r0, r3
 8006978:	f000 feba 	bl	80076f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800697c:	2301      	movs	r3, #1
 800697e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006980:	f001 fda0 	bl	80084c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006984:	f000 fc26 	bl	80071d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006988:	f001 fd6c 	bl	8008464 <vPortEnterCritical>
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006992:	b25b      	sxtb	r3, r3
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006998:	d103      	bne.n	80069a2 <xQueueReceive+0x122>
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a8:	b25b      	sxtb	r3, r3
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ae:	d103      	bne.n	80069b8 <xQueueReceive+0x138>
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069b8:	f001 fd84 	bl	80084c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069bc:	1d3a      	adds	r2, r7, #4
 80069be:	f107 0310 	add.w	r3, r7, #16
 80069c2:	4611      	mov	r1, r2
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 fea9 	bl	800771c <xTaskCheckForTimeOut>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d123      	bne.n	8006a18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069d2:	f000 f917 	bl	8006c04 <prvIsQueueEmpty>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d017      	beq.n	8006a0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	3324      	adds	r3, #36	; 0x24
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	4611      	mov	r1, r2
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fdcf 	bl	8007588 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ec:	f000 f8b8 	bl	8006b60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069f0:	f000 fbfe 	bl	80071f0 <xTaskResumeAll>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d189      	bne.n	800690e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80069fa:	4b10      	ldr	r3, [pc, #64]	; (8006a3c <xQueueReceive+0x1bc>)
 80069fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	e780      	b.n	800690e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a0e:	f000 f8a7 	bl	8006b60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a12:	f000 fbed 	bl	80071f0 <xTaskResumeAll>
 8006a16:	e77a      	b.n	800690e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a1a:	f000 f8a1 	bl	8006b60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a1e:	f000 fbe7 	bl	80071f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a24:	f000 f8ee 	bl	8006c04 <prvIsQueueEmpty>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f43f af6f 	beq.w	800690e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3730      	adds	r7, #48	; 0x30
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	e000ed04 	.word	0xe000ed04

08006a40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10d      	bne.n	8006a7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d14d      	bne.n	8006b02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 ffbc 	bl	80079e8 <xTaskPriorityDisinherit>
 8006a70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	609a      	str	r2, [r3, #8]
 8006a78:	e043      	b.n	8006b02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d119      	bne.n	8006ab4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6858      	ldr	r0, [r3, #4]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	461a      	mov	r2, r3
 8006a8a:	68b9      	ldr	r1, [r7, #8]
 8006a8c:	f002 f81c 	bl	8008ac8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	441a      	add	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d32b      	bcc.n	8006b02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	605a      	str	r2, [r3, #4]
 8006ab2:	e026      	b.n	8006b02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	68d8      	ldr	r0, [r3, #12]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abc:	461a      	mov	r2, r3
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	f002 f802 	bl	8008ac8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006acc:	425b      	negs	r3, r3
 8006ace:	441a      	add	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d207      	bcs.n	8006af0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae8:	425b      	negs	r3, r3
 8006aea:	441a      	add	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d105      	bne.n	8006b02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b0a:	697b      	ldr	r3, [r7, #20]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d018      	beq.n	8006b58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	441a      	add	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d303      	bcc.n	8006b48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68d9      	ldr	r1, [r3, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	461a      	mov	r2, r3
 8006b52:	6838      	ldr	r0, [r7, #0]
 8006b54:	f001 ffb8 	bl	8008ac8 <memcpy>
	}
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006b68:	f001 fc7c 	bl	8008464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b74:	e011      	b.n	8006b9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d012      	beq.n	8006ba4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3324      	adds	r3, #36	; 0x24
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fd50 	bl	8007628 <xTaskRemoveFromEventList>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b8e:	f000 fe27 	bl	80077e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	dce9      	bgt.n	8006b76 <prvUnlockQueue+0x16>
 8006ba2:	e000      	b.n	8006ba6 <prvUnlockQueue+0x46>
					break;
 8006ba4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	22ff      	movs	r2, #255	; 0xff
 8006baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006bae:	f001 fc89 	bl	80084c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006bb2:	f001 fc57 	bl	8008464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bbe:	e011      	b.n	8006be4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d012      	beq.n	8006bee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3310      	adds	r3, #16
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 fd2b 	bl	8007628 <xTaskRemoveFromEventList>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006bd8:	f000 fe02 	bl	80077e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	dce9      	bgt.n	8006bc0 <prvUnlockQueue+0x60>
 8006bec:	e000      	b.n	8006bf0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006bee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	22ff      	movs	r2, #255	; 0xff
 8006bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006bf8:	f001 fc64 	bl	80084c4 <vPortExitCritical>
}
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c0c:	f001 fc2a 	bl	8008464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d102      	bne.n	8006c1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	e001      	b.n	8006c22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c22:	f001 fc4f 	bl	80084c4 <vPortExitCritical>

	return xReturn;
 8006c26:	68fb      	ldr	r3, [r7, #12]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c38:	f001 fc14 	bl	8008464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d102      	bne.n	8006c4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	e001      	b.n	8006c52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c52:	f001 fc37 	bl	80084c4 <vPortExitCritical>

	return xReturn;
 8006c56:	68fb      	ldr	r3, [r7, #12]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	e014      	b.n	8006c9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006c70:	4a0f      	ldr	r2, [pc, #60]	; (8006cb0 <vQueueAddToRegistry+0x50>)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10b      	bne.n	8006c94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006c7c:	490c      	ldr	r1, [pc, #48]	; (8006cb0 <vQueueAddToRegistry+0x50>)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c86:	4a0a      	ldr	r2, [pc, #40]	; (8006cb0 <vQueueAddToRegistry+0x50>)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	4413      	add	r3, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c92:	e006      	b.n	8006ca2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b07      	cmp	r3, #7
 8006c9e:	d9e7      	bls.n	8006c70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	20000fb4 	.word	0x20000fb4

08006cb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006cc4:	f001 fbce 	bl	8008464 <vPortEnterCritical>
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cce:	b25b      	sxtb	r3, r3
 8006cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd4:	d103      	bne.n	8006cde <vQueueWaitForMessageRestricted+0x2a>
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ce4:	b25b      	sxtb	r3, r3
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cea:	d103      	bne.n	8006cf4 <vQueueWaitForMessageRestricted+0x40>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cf4:	f001 fbe6 	bl	80084c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d106      	bne.n	8006d0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	3324      	adds	r3, #36	; 0x24
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 fc61 	bl	80075d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006d0e:	6978      	ldr	r0, [r7, #20]
 8006d10:	f7ff ff26 	bl	8006b60 <prvUnlockQueue>
	}
 8006d14:	bf00      	nop
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08e      	sub	sp, #56	; 0x38
 8006d20:	af04      	add	r7, sp, #16
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10a      	bne.n	8006d46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	623b      	str	r3, [r7, #32]
}
 8006d42:	bf00      	nop
 8006d44:	e7fe      	b.n	8006d44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10a      	bne.n	8006d62 <xTaskCreateStatic+0x46>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	61fb      	str	r3, [r7, #28]
}
 8006d5e:	bf00      	nop
 8006d60:	e7fe      	b.n	8006d60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d62:	23bc      	movs	r3, #188	; 0xbc
 8006d64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2bbc      	cmp	r3, #188	; 0xbc
 8006d6a:	d00a      	beq.n	8006d82 <xTaskCreateStatic+0x66>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	61bb      	str	r3, [r7, #24]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d01e      	beq.n	8006dc8 <xTaskCreateStatic+0xac>
 8006d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01b      	beq.n	8006dc8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006da2:	2300      	movs	r3, #0
 8006da4:	9303      	str	r3, [sp, #12]
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	9302      	str	r3, [sp, #8]
 8006daa:	f107 0314 	add.w	r3, r7, #20
 8006dae:	9301      	str	r3, [sp, #4]
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	68b9      	ldr	r1, [r7, #8]
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 f850 	bl	8006e60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006dc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dc2:	f000 f8f3 	bl	8006fac <prvAddNewTaskToReadyList>
 8006dc6:	e001      	b.n	8006dcc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006dcc:	697b      	ldr	r3, [r7, #20]
	}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3728      	adds	r7, #40	; 0x28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b08c      	sub	sp, #48	; 0x30
 8006dda:	af04      	add	r7, sp, #16
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	4613      	mov	r3, r2
 8006de4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 fc5c 	bl	80086a8 <pvPortMalloc>
 8006df0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00e      	beq.n	8006e16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006df8:	20bc      	movs	r0, #188	; 0xbc
 8006dfa:	f001 fc55 	bl	80086a8 <pvPortMalloc>
 8006dfe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e0c:	e005      	b.n	8006e1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e0e:	6978      	ldr	r0, [r7, #20]
 8006e10:	f001 fd16 	bl	8008840 <vPortFree>
 8006e14:	e001      	b.n	8006e1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d017      	beq.n	8006e50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e28:	88fa      	ldrh	r2, [r7, #6]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	9303      	str	r3, [sp, #12]
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	9302      	str	r3, [sp, #8]
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	9301      	str	r3, [sp, #4]
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	68b9      	ldr	r1, [r7, #8]
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 f80e 	bl	8006e60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e44:	69f8      	ldr	r0, [r7, #28]
 8006e46:	f000 f8b1 	bl	8006fac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	e002      	b.n	8006e56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e50:	f04f 33ff 	mov.w	r3, #4294967295
 8006e54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e56:	69bb      	ldr	r3, [r7, #24]
	}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3720      	adds	r7, #32
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	461a      	mov	r2, r3
 8006e78:	21a5      	movs	r1, #165	; 0xa5
 8006e7a:	f001 fe33 	bl	8008ae4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	f023 0307 	bic.w	r3, r3, #7
 8006e96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00a      	beq.n	8006eb8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	617b      	str	r3, [r7, #20]
}
 8006eb4:	bf00      	nop
 8006eb6:	e7fe      	b.n	8006eb6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d01f      	beq.n	8006efe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61fb      	str	r3, [r7, #28]
 8006ec2:	e012      	b.n	8006eea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	4413      	add	r3, r2
 8006eca:	7819      	ldrb	r1, [r3, #0]
 8006ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	3334      	adds	r3, #52	; 0x34
 8006ed4:	460a      	mov	r2, r1
 8006ed6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	4413      	add	r3, r2
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d006      	beq.n	8006ef2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	61fb      	str	r3, [r7, #28]
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	2b0f      	cmp	r3, #15
 8006eee:	d9e9      	bls.n	8006ec4 <prvInitialiseNewTask+0x64>
 8006ef0:	e000      	b.n	8006ef4 <prvInitialiseNewTask+0x94>
			{
				break;
 8006ef2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006efc:	e003      	b.n	8006f06 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	2b37      	cmp	r3, #55	; 0x37
 8006f0a:	d901      	bls.n	8006f10 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f0c:	2337      	movs	r3, #55	; 0x37
 8006f0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1e:	2200      	movs	r2, #0
 8006f20:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	3304      	adds	r3, #4
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff f978 	bl	800621c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	3318      	adds	r3, #24
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff f973 	bl	800621c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	3354      	adds	r3, #84	; 0x54
 8006f60:	2260      	movs	r2, #96	; 0x60
 8006f62:	2100      	movs	r1, #0
 8006f64:	4618      	mov	r0, r3
 8006f66:	f001 fdbd 	bl	8008ae4 <memset>
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	4a0c      	ldr	r2, [pc, #48]	; (8006fa0 <prvInitialiseNewTask+0x140>)
 8006f6e:	659a      	str	r2, [r3, #88]	; 0x58
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	4a0c      	ldr	r2, [pc, #48]	; (8006fa4 <prvInitialiseNewTask+0x144>)
 8006f74:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	4a0b      	ldr	r2, [pc, #44]	; (8006fa8 <prvInitialiseNewTask+0x148>)
 8006f7a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	68f9      	ldr	r1, [r7, #12]
 8006f80:	69b8      	ldr	r0, [r7, #24]
 8006f82:	f001 f941 	bl	8008208 <pxPortInitialiseStack>
 8006f86:	4602      	mov	r2, r0
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f98:	bf00      	nop
 8006f9a:	3720      	adds	r7, #32
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	0800a870 	.word	0x0800a870
 8006fa4:	0800a890 	.word	0x0800a890
 8006fa8:	0800a850 	.word	0x0800a850

08006fac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006fb4:	f001 fa56 	bl	8008464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006fb8:	4b2d      	ldr	r3, [pc, #180]	; (8007070 <prvAddNewTaskToReadyList+0xc4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	4a2c      	ldr	r2, [pc, #176]	; (8007070 <prvAddNewTaskToReadyList+0xc4>)
 8006fc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006fc2:	4b2c      	ldr	r3, [pc, #176]	; (8007074 <prvAddNewTaskToReadyList+0xc8>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006fca:	4a2a      	ldr	r2, [pc, #168]	; (8007074 <prvAddNewTaskToReadyList+0xc8>)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fd0:	4b27      	ldr	r3, [pc, #156]	; (8007070 <prvAddNewTaskToReadyList+0xc4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d110      	bne.n	8006ffa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006fd8:	f000 fc26 	bl	8007828 <prvInitialiseTaskLists>
 8006fdc:	e00d      	b.n	8006ffa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006fde:	4b26      	ldr	r3, [pc, #152]	; (8007078 <prvAddNewTaskToReadyList+0xcc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d109      	bne.n	8006ffa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006fe6:	4b23      	ldr	r3, [pc, #140]	; (8007074 <prvAddNewTaskToReadyList+0xc8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d802      	bhi.n	8006ffa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ff4:	4a1f      	ldr	r2, [pc, #124]	; (8007074 <prvAddNewTaskToReadyList+0xc8>)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ffa:	4b20      	ldr	r3, [pc, #128]	; (800707c <prvAddNewTaskToReadyList+0xd0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3301      	adds	r3, #1
 8007000:	4a1e      	ldr	r2, [pc, #120]	; (800707c <prvAddNewTaskToReadyList+0xd0>)
 8007002:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007004:	4b1d      	ldr	r3, [pc, #116]	; (800707c <prvAddNewTaskToReadyList+0xd0>)
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007010:	4b1b      	ldr	r3, [pc, #108]	; (8007080 <prvAddNewTaskToReadyList+0xd4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	429a      	cmp	r2, r3
 8007016:	d903      	bls.n	8007020 <prvAddNewTaskToReadyList+0x74>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	4a18      	ldr	r2, [pc, #96]	; (8007080 <prvAddNewTaskToReadyList+0xd4>)
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4a15      	ldr	r2, [pc, #84]	; (8007084 <prvAddNewTaskToReadyList+0xd8>)
 800702e:	441a      	add	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3304      	adds	r3, #4
 8007034:	4619      	mov	r1, r3
 8007036:	4610      	mov	r0, r2
 8007038:	f7ff f8fd 	bl	8006236 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800703c:	f001 fa42 	bl	80084c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007040:	4b0d      	ldr	r3, [pc, #52]	; (8007078 <prvAddNewTaskToReadyList+0xcc>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00e      	beq.n	8007066 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007048:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <prvAddNewTaskToReadyList+0xc8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007052:	429a      	cmp	r2, r3
 8007054:	d207      	bcs.n	8007066 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <prvAddNewTaskToReadyList+0xdc>)
 8007058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007066:	bf00      	nop
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	200014c8 	.word	0x200014c8
 8007074:	20000ff4 	.word	0x20000ff4
 8007078:	200014d4 	.word	0x200014d4
 800707c:	200014e4 	.word	0x200014e4
 8007080:	200014d0 	.word	0x200014d0
 8007084:	20000ff8 	.word	0x20000ff8
 8007088:	e000ed04 	.word	0xe000ed04

0800708c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d017      	beq.n	80070ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800709e:	4b13      	ldr	r3, [pc, #76]	; (80070ec <vTaskDelay+0x60>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <vTaskDelay+0x30>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	60bb      	str	r3, [r7, #8]
}
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80070bc:	f000 f88a 	bl	80071d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070c0:	2100      	movs	r1, #0
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fcfe 	bl	8007ac4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070c8:	f000 f892 	bl	80071f0 <xTaskResumeAll>
 80070cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d107      	bne.n	80070e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <vTaskDelay+0x64>)
 80070d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070e4:	bf00      	nop
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	200014f0 	.word	0x200014f0
 80070f0:	e000ed04 	.word	0xe000ed04

080070f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08a      	sub	sp, #40	; 0x28
 80070f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007102:	463a      	mov	r2, r7
 8007104:	1d39      	adds	r1, r7, #4
 8007106:	f107 0308 	add.w	r3, r7, #8
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff f832 	bl	8006174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	9202      	str	r2, [sp, #8]
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	2300      	movs	r3, #0
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	2300      	movs	r3, #0
 8007120:	460a      	mov	r2, r1
 8007122:	4924      	ldr	r1, [pc, #144]	; (80071b4 <vTaskStartScheduler+0xc0>)
 8007124:	4824      	ldr	r0, [pc, #144]	; (80071b8 <vTaskStartScheduler+0xc4>)
 8007126:	f7ff fdf9 	bl	8006d1c <xTaskCreateStatic>
 800712a:	4603      	mov	r3, r0
 800712c:	4a23      	ldr	r2, [pc, #140]	; (80071bc <vTaskStartScheduler+0xc8>)
 800712e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007130:	4b22      	ldr	r3, [pc, #136]	; (80071bc <vTaskStartScheduler+0xc8>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007138:	2301      	movs	r3, #1
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	e001      	b.n	8007142 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d102      	bne.n	800714e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007148:	f000 fd10 	bl	8007b6c <xTimerCreateTimerTask>
 800714c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d11b      	bne.n	800718c <vTaskStartScheduler+0x98>
	__asm volatile
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	613b      	str	r3, [r7, #16]
}
 8007166:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007168:	4b15      	ldr	r3, [pc, #84]	; (80071c0 <vTaskStartScheduler+0xcc>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3354      	adds	r3, #84	; 0x54
 800716e:	4a15      	ldr	r2, [pc, #84]	; (80071c4 <vTaskStartScheduler+0xd0>)
 8007170:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007172:	4b15      	ldr	r3, [pc, #84]	; (80071c8 <vTaskStartScheduler+0xd4>)
 8007174:	f04f 32ff 	mov.w	r2, #4294967295
 8007178:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800717a:	4b14      	ldr	r3, [pc, #80]	; (80071cc <vTaskStartScheduler+0xd8>)
 800717c:	2201      	movs	r2, #1
 800717e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007180:	4b13      	ldr	r3, [pc, #76]	; (80071d0 <vTaskStartScheduler+0xdc>)
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007186:	f001 f8cb 	bl	8008320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800718a:	e00e      	b.n	80071aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007192:	d10a      	bne.n	80071aa <vTaskStartScheduler+0xb6>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	60fb      	str	r3, [r7, #12]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <vTaskStartScheduler+0xb4>
}
 80071aa:	bf00      	nop
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	08008d3c 	.word	0x08008d3c
 80071b8:	080077f9 	.word	0x080077f9
 80071bc:	200014ec 	.word	0x200014ec
 80071c0:	20000ff4 	.word	0x20000ff4
 80071c4:	20000120 	.word	0x20000120
 80071c8:	200014e8 	.word	0x200014e8
 80071cc:	200014d4 	.word	0x200014d4
 80071d0:	200014cc 	.word	0x200014cc

080071d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071d4:	b480      	push	{r7}
 80071d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80071d8:	4b04      	ldr	r3, [pc, #16]	; (80071ec <vTaskSuspendAll+0x18>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3301      	adds	r3, #1
 80071de:	4a03      	ldr	r2, [pc, #12]	; (80071ec <vTaskSuspendAll+0x18>)
 80071e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80071e2:	bf00      	nop
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	200014f0 	.word	0x200014f0

080071f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071fa:	2300      	movs	r3, #0
 80071fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071fe:	4b42      	ldr	r3, [pc, #264]	; (8007308 <xTaskResumeAll+0x118>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <xTaskResumeAll+0x2c>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	603b      	str	r3, [r7, #0]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800721c:	f001 f922 	bl	8008464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007220:	4b39      	ldr	r3, [pc, #228]	; (8007308 <xTaskResumeAll+0x118>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3b01      	subs	r3, #1
 8007226:	4a38      	ldr	r2, [pc, #224]	; (8007308 <xTaskResumeAll+0x118>)
 8007228:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800722a:	4b37      	ldr	r3, [pc, #220]	; (8007308 <xTaskResumeAll+0x118>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d162      	bne.n	80072f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007232:	4b36      	ldr	r3, [pc, #216]	; (800730c <xTaskResumeAll+0x11c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d05e      	beq.n	80072f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800723a:	e02f      	b.n	800729c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800723c:	4b34      	ldr	r3, [pc, #208]	; (8007310 <xTaskResumeAll+0x120>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3318      	adds	r3, #24
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff f851 	bl	80062f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	3304      	adds	r3, #4
 8007252:	4618      	mov	r0, r3
 8007254:	f7ff f84c 	bl	80062f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725c:	4b2d      	ldr	r3, [pc, #180]	; (8007314 <xTaskResumeAll+0x124>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	429a      	cmp	r2, r3
 8007262:	d903      	bls.n	800726c <xTaskResumeAll+0x7c>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	4a2a      	ldr	r2, [pc, #168]	; (8007314 <xTaskResumeAll+0x124>)
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4a27      	ldr	r2, [pc, #156]	; (8007318 <xTaskResumeAll+0x128>)
 800727a:	441a      	add	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3304      	adds	r3, #4
 8007280:	4619      	mov	r1, r3
 8007282:	4610      	mov	r0, r2
 8007284:	f7fe ffd7 	bl	8006236 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728c:	4b23      	ldr	r3, [pc, #140]	; (800731c <xTaskResumeAll+0x12c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007292:	429a      	cmp	r2, r3
 8007294:	d302      	bcc.n	800729c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007296:	4b22      	ldr	r3, [pc, #136]	; (8007320 <xTaskResumeAll+0x130>)
 8007298:	2201      	movs	r2, #1
 800729a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800729c:	4b1c      	ldr	r3, [pc, #112]	; (8007310 <xTaskResumeAll+0x120>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1cb      	bne.n	800723c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80072aa:	f000 fb5f 	bl	800796c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80072ae:	4b1d      	ldr	r3, [pc, #116]	; (8007324 <xTaskResumeAll+0x134>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d010      	beq.n	80072dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072ba:	f000 f847 	bl	800734c <xTaskIncrementTick>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80072c4:	4b16      	ldr	r3, [pc, #88]	; (8007320 <xTaskResumeAll+0x130>)
 80072c6:	2201      	movs	r2, #1
 80072c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1f1      	bne.n	80072ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80072d6:	4b13      	ldr	r3, [pc, #76]	; (8007324 <xTaskResumeAll+0x134>)
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072dc:	4b10      	ldr	r3, [pc, #64]	; (8007320 <xTaskResumeAll+0x130>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d009      	beq.n	80072f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072e4:	2301      	movs	r3, #1
 80072e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072e8:	4b0f      	ldr	r3, [pc, #60]	; (8007328 <xTaskResumeAll+0x138>)
 80072ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072f8:	f001 f8e4 	bl	80084c4 <vPortExitCritical>

	return xAlreadyYielded;
 80072fc:	68bb      	ldr	r3, [r7, #8]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	200014f0 	.word	0x200014f0
 800730c:	200014c8 	.word	0x200014c8
 8007310:	20001488 	.word	0x20001488
 8007314:	200014d0 	.word	0x200014d0
 8007318:	20000ff8 	.word	0x20000ff8
 800731c:	20000ff4 	.word	0x20000ff4
 8007320:	200014dc 	.word	0x200014dc
 8007324:	200014d8 	.word	0x200014d8
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007332:	4b05      	ldr	r3, [pc, #20]	; (8007348 <xTaskGetTickCount+0x1c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007338:	687b      	ldr	r3, [r7, #4]
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	200014cc 	.word	0x200014cc

0800734c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007352:	2300      	movs	r3, #0
 8007354:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007356:	4b4f      	ldr	r3, [pc, #316]	; (8007494 <xTaskIncrementTick+0x148>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	f040 808f 	bne.w	800747e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007360:	4b4d      	ldr	r3, [pc, #308]	; (8007498 <xTaskIncrementTick+0x14c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3301      	adds	r3, #1
 8007366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007368:	4a4b      	ldr	r2, [pc, #300]	; (8007498 <xTaskIncrementTick+0x14c>)
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d120      	bne.n	80073b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007374:	4b49      	ldr	r3, [pc, #292]	; (800749c <xTaskIncrementTick+0x150>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00a      	beq.n	8007394 <xTaskIncrementTick+0x48>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	603b      	str	r3, [r7, #0]
}
 8007390:	bf00      	nop
 8007392:	e7fe      	b.n	8007392 <xTaskIncrementTick+0x46>
 8007394:	4b41      	ldr	r3, [pc, #260]	; (800749c <xTaskIncrementTick+0x150>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	4b41      	ldr	r3, [pc, #260]	; (80074a0 <xTaskIncrementTick+0x154>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a3f      	ldr	r2, [pc, #252]	; (800749c <xTaskIncrementTick+0x150>)
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	4a3f      	ldr	r2, [pc, #252]	; (80074a0 <xTaskIncrementTick+0x154>)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	4b3e      	ldr	r3, [pc, #248]	; (80074a4 <xTaskIncrementTick+0x158>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3301      	adds	r3, #1
 80073ae:	4a3d      	ldr	r2, [pc, #244]	; (80074a4 <xTaskIncrementTick+0x158>)
 80073b0:	6013      	str	r3, [r2, #0]
 80073b2:	f000 fadb 	bl	800796c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80073b6:	4b3c      	ldr	r3, [pc, #240]	; (80074a8 <xTaskIncrementTick+0x15c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d349      	bcc.n	8007454 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073c0:	4b36      	ldr	r3, [pc, #216]	; (800749c <xTaskIncrementTick+0x150>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d104      	bne.n	80073d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ca:	4b37      	ldr	r3, [pc, #220]	; (80074a8 <xTaskIncrementTick+0x15c>)
 80073cc:	f04f 32ff 	mov.w	r2, #4294967295
 80073d0:	601a      	str	r2, [r3, #0]
					break;
 80073d2:	e03f      	b.n	8007454 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073d4:	4b31      	ldr	r3, [pc, #196]	; (800749c <xTaskIncrementTick+0x150>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d203      	bcs.n	80073f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073ec:	4a2e      	ldr	r2, [pc, #184]	; (80074a8 <xTaskIncrementTick+0x15c>)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073f2:	e02f      	b.n	8007454 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	3304      	adds	r3, #4
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fe ff79 	bl	80062f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007402:	2b00      	cmp	r3, #0
 8007404:	d004      	beq.n	8007410 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	3318      	adds	r3, #24
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe ff70 	bl	80062f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007414:	4b25      	ldr	r3, [pc, #148]	; (80074ac <xTaskIncrementTick+0x160>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d903      	bls.n	8007424 <xTaskIncrementTick+0xd8>
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007420:	4a22      	ldr	r2, [pc, #136]	; (80074ac <xTaskIncrementTick+0x160>)
 8007422:	6013      	str	r3, [r2, #0]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4a1f      	ldr	r2, [pc, #124]	; (80074b0 <xTaskIncrementTick+0x164>)
 8007432:	441a      	add	r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	3304      	adds	r3, #4
 8007438:	4619      	mov	r1, r3
 800743a:	4610      	mov	r0, r2
 800743c:	f7fe fefb 	bl	8006236 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007444:	4b1b      	ldr	r3, [pc, #108]	; (80074b4 <xTaskIncrementTick+0x168>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	429a      	cmp	r2, r3
 800744c:	d3b8      	bcc.n	80073c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800744e:	2301      	movs	r3, #1
 8007450:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007452:	e7b5      	b.n	80073c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007454:	4b17      	ldr	r3, [pc, #92]	; (80074b4 <xTaskIncrementTick+0x168>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745a:	4915      	ldr	r1, [pc, #84]	; (80074b0 <xTaskIncrementTick+0x164>)
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d901      	bls.n	8007470 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800746c:	2301      	movs	r3, #1
 800746e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007470:	4b11      	ldr	r3, [pc, #68]	; (80074b8 <xTaskIncrementTick+0x16c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007478:	2301      	movs	r3, #1
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	e004      	b.n	8007488 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800747e:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <xTaskIncrementTick+0x170>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3301      	adds	r3, #1
 8007484:	4a0d      	ldr	r2, [pc, #52]	; (80074bc <xTaskIncrementTick+0x170>)
 8007486:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007488:	697b      	ldr	r3, [r7, #20]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	200014f0 	.word	0x200014f0
 8007498:	200014cc 	.word	0x200014cc
 800749c:	20001480 	.word	0x20001480
 80074a0:	20001484 	.word	0x20001484
 80074a4:	200014e0 	.word	0x200014e0
 80074a8:	200014e8 	.word	0x200014e8
 80074ac:	200014d0 	.word	0x200014d0
 80074b0:	20000ff8 	.word	0x20000ff8
 80074b4:	20000ff4 	.word	0x20000ff4
 80074b8:	200014dc 	.word	0x200014dc
 80074bc:	200014d8 	.word	0x200014d8

080074c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074c6:	4b2a      	ldr	r3, [pc, #168]	; (8007570 <vTaskSwitchContext+0xb0>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80074ce:	4b29      	ldr	r3, [pc, #164]	; (8007574 <vTaskSwitchContext+0xb4>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074d4:	e046      	b.n	8007564 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80074d6:	4b27      	ldr	r3, [pc, #156]	; (8007574 <vTaskSwitchContext+0xb4>)
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074dc:	4b26      	ldr	r3, [pc, #152]	; (8007578 <vTaskSwitchContext+0xb8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	e010      	b.n	8007506 <vTaskSwitchContext+0x46>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10a      	bne.n	8007500 <vTaskSwitchContext+0x40>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	607b      	str	r3, [r7, #4]
}
 80074fc:	bf00      	nop
 80074fe:	e7fe      	b.n	80074fe <vTaskSwitchContext+0x3e>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3b01      	subs	r3, #1
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	491d      	ldr	r1, [pc, #116]	; (800757c <vTaskSwitchContext+0xbc>)
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	440b      	add	r3, r1
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0e4      	beq.n	80074e4 <vTaskSwitchContext+0x24>
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4a15      	ldr	r2, [pc, #84]	; (800757c <vTaskSwitchContext+0xbc>)
 8007526:	4413      	add	r3, r2
 8007528:	60bb      	str	r3, [r7, #8]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	605a      	str	r2, [r3, #4]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	3308      	adds	r3, #8
 800753c:	429a      	cmp	r2, r3
 800753e:	d104      	bne.n	800754a <vTaskSwitchContext+0x8a>
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	605a      	str	r2, [r3, #4]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	4a0b      	ldr	r2, [pc, #44]	; (8007580 <vTaskSwitchContext+0xc0>)
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	4a08      	ldr	r2, [pc, #32]	; (8007578 <vTaskSwitchContext+0xb8>)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800755a:	4b09      	ldr	r3, [pc, #36]	; (8007580 <vTaskSwitchContext+0xc0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3354      	adds	r3, #84	; 0x54
 8007560:	4a08      	ldr	r2, [pc, #32]	; (8007584 <vTaskSwitchContext+0xc4>)
 8007562:	6013      	str	r3, [r2, #0]
}
 8007564:	bf00      	nop
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	200014f0 	.word	0x200014f0
 8007574:	200014dc 	.word	0x200014dc
 8007578:	200014d0 	.word	0x200014d0
 800757c:	20000ff8 	.word	0x20000ff8
 8007580:	20000ff4 	.word	0x20000ff4
 8007584:	20000120 	.word	0x20000120

08007588 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10a      	bne.n	80075ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	60fb      	str	r3, [r7, #12]
}
 80075aa:	bf00      	nop
 80075ac:	e7fe      	b.n	80075ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075ae:	4b07      	ldr	r3, [pc, #28]	; (80075cc <vTaskPlaceOnEventList+0x44>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3318      	adds	r3, #24
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7fe fe61 	bl	800627e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075bc:	2101      	movs	r1, #1
 80075be:	6838      	ldr	r0, [r7, #0]
 80075c0:	f000 fa80 	bl	8007ac4 <prvAddCurrentTaskToDelayedList>
}
 80075c4:	bf00      	nop
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20000ff4 	.word	0x20000ff4

080075d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10a      	bne.n	80075f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	617b      	str	r3, [r7, #20]
}
 80075f4:	bf00      	nop
 80075f6:	e7fe      	b.n	80075f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075f8:	4b0a      	ldr	r3, [pc, #40]	; (8007624 <vTaskPlaceOnEventListRestricted+0x54>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3318      	adds	r3, #24
 80075fe:	4619      	mov	r1, r3
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f7fe fe18 	bl	8006236 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800760c:	f04f 33ff 	mov.w	r3, #4294967295
 8007610:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007612:	6879      	ldr	r1, [r7, #4]
 8007614:	68b8      	ldr	r0, [r7, #8]
 8007616:	f000 fa55 	bl	8007ac4 <prvAddCurrentTaskToDelayedList>
	}
 800761a:	bf00      	nop
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20000ff4 	.word	0x20000ff4

08007628 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	60fb      	str	r3, [r7, #12]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	3318      	adds	r3, #24
 8007658:	4618      	mov	r0, r3
 800765a:	f7fe fe49 	bl	80062f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800765e:	4b1e      	ldr	r3, [pc, #120]	; (80076d8 <xTaskRemoveFromEventList+0xb0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d11d      	bne.n	80076a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	3304      	adds	r3, #4
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fe40 	bl	80062f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007674:	4b19      	ldr	r3, [pc, #100]	; (80076dc <xTaskRemoveFromEventList+0xb4>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	429a      	cmp	r2, r3
 800767a:	d903      	bls.n	8007684 <xTaskRemoveFromEventList+0x5c>
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	4a16      	ldr	r2, [pc, #88]	; (80076dc <xTaskRemoveFromEventList+0xb4>)
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007688:	4613      	mov	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4a13      	ldr	r2, [pc, #76]	; (80076e0 <xTaskRemoveFromEventList+0xb8>)
 8007692:	441a      	add	r2, r3
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3304      	adds	r3, #4
 8007698:	4619      	mov	r1, r3
 800769a:	4610      	mov	r0, r2
 800769c:	f7fe fdcb 	bl	8006236 <vListInsertEnd>
 80076a0:	e005      	b.n	80076ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	3318      	adds	r3, #24
 80076a6:	4619      	mov	r1, r3
 80076a8:	480e      	ldr	r0, [pc, #56]	; (80076e4 <xTaskRemoveFromEventList+0xbc>)
 80076aa:	f7fe fdc4 	bl	8006236 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b2:	4b0d      	ldr	r3, [pc, #52]	; (80076e8 <xTaskRemoveFromEventList+0xc0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d905      	bls.n	80076c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80076bc:	2301      	movs	r3, #1
 80076be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80076c0:	4b0a      	ldr	r3, [pc, #40]	; (80076ec <xTaskRemoveFromEventList+0xc4>)
 80076c2:	2201      	movs	r2, #1
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	e001      	b.n	80076cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80076cc:	697b      	ldr	r3, [r7, #20]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	200014f0 	.word	0x200014f0
 80076dc:	200014d0 	.word	0x200014d0
 80076e0:	20000ff8 	.word	0x20000ff8
 80076e4:	20001488 	.word	0x20001488
 80076e8:	20000ff4 	.word	0x20000ff4
 80076ec:	200014dc 	.word	0x200014dc

080076f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076f8:	4b06      	ldr	r3, [pc, #24]	; (8007714 <vTaskInternalSetTimeOutState+0x24>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007700:	4b05      	ldr	r3, [pc, #20]	; (8007718 <vTaskInternalSetTimeOutState+0x28>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	605a      	str	r2, [r3, #4]
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	200014e0 	.word	0x200014e0
 8007718:	200014cc 	.word	0x200014cc

0800771c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10a      	bne.n	8007742 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	613b      	str	r3, [r7, #16]
}
 800773e:	bf00      	nop
 8007740:	e7fe      	b.n	8007740 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10a      	bne.n	800775e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	60fb      	str	r3, [r7, #12]
}
 800775a:	bf00      	nop
 800775c:	e7fe      	b.n	800775c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800775e:	f000 fe81 	bl	8008464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007762:	4b1d      	ldr	r3, [pc, #116]	; (80077d8 <xTaskCheckForTimeOut+0xbc>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777a:	d102      	bne.n	8007782 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
 8007780:	e023      	b.n	80077ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	4b15      	ldr	r3, [pc, #84]	; (80077dc <xTaskCheckForTimeOut+0xc0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d007      	beq.n	800779e <xTaskCheckForTimeOut+0x82>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	429a      	cmp	r2, r3
 8007796:	d302      	bcc.n	800779e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007798:	2301      	movs	r3, #1
 800779a:	61fb      	str	r3, [r7, #28]
 800779c:	e015      	b.n	80077ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d20b      	bcs.n	80077c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	1ad2      	subs	r2, r2, r3
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff ff9b 	bl	80076f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	61fb      	str	r3, [r7, #28]
 80077be:	e004      	b.n	80077ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80077c6:	2301      	movs	r3, #1
 80077c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80077ca:	f000 fe7b 	bl	80084c4 <vPortExitCritical>

	return xReturn;
 80077ce:	69fb      	ldr	r3, [r7, #28]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3720      	adds	r7, #32
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	200014cc 	.word	0x200014cc
 80077dc:	200014e0 	.word	0x200014e0

080077e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077e4:	4b03      	ldr	r3, [pc, #12]	; (80077f4 <vTaskMissedYield+0x14>)
 80077e6:	2201      	movs	r2, #1
 80077e8:	601a      	str	r2, [r3, #0]
}
 80077ea:	bf00      	nop
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	200014dc 	.word	0x200014dc

080077f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007800:	f000 f852 	bl	80078a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007804:	4b06      	ldr	r3, [pc, #24]	; (8007820 <prvIdleTask+0x28>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d9f9      	bls.n	8007800 <prvIdleTask+0x8>
			{
				taskYIELD();
 800780c:	4b05      	ldr	r3, [pc, #20]	; (8007824 <prvIdleTask+0x2c>)
 800780e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800781c:	e7f0      	b.n	8007800 <prvIdleTask+0x8>
 800781e:	bf00      	nop
 8007820:	20000ff8 	.word	0x20000ff8
 8007824:	e000ed04 	.word	0xe000ed04

08007828 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800782e:	2300      	movs	r3, #0
 8007830:	607b      	str	r3, [r7, #4]
 8007832:	e00c      	b.n	800784e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	4613      	mov	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4413      	add	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4a12      	ldr	r2, [pc, #72]	; (8007888 <prvInitialiseTaskLists+0x60>)
 8007840:	4413      	add	r3, r2
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe fcca 	bl	80061dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3301      	adds	r3, #1
 800784c:	607b      	str	r3, [r7, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b37      	cmp	r3, #55	; 0x37
 8007852:	d9ef      	bls.n	8007834 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007854:	480d      	ldr	r0, [pc, #52]	; (800788c <prvInitialiseTaskLists+0x64>)
 8007856:	f7fe fcc1 	bl	80061dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800785a:	480d      	ldr	r0, [pc, #52]	; (8007890 <prvInitialiseTaskLists+0x68>)
 800785c:	f7fe fcbe 	bl	80061dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007860:	480c      	ldr	r0, [pc, #48]	; (8007894 <prvInitialiseTaskLists+0x6c>)
 8007862:	f7fe fcbb 	bl	80061dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007866:	480c      	ldr	r0, [pc, #48]	; (8007898 <prvInitialiseTaskLists+0x70>)
 8007868:	f7fe fcb8 	bl	80061dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800786c:	480b      	ldr	r0, [pc, #44]	; (800789c <prvInitialiseTaskLists+0x74>)
 800786e:	f7fe fcb5 	bl	80061dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007872:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <prvInitialiseTaskLists+0x78>)
 8007874:	4a05      	ldr	r2, [pc, #20]	; (800788c <prvInitialiseTaskLists+0x64>)
 8007876:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007878:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <prvInitialiseTaskLists+0x7c>)
 800787a:	4a05      	ldr	r2, [pc, #20]	; (8007890 <prvInitialiseTaskLists+0x68>)
 800787c:	601a      	str	r2, [r3, #0]
}
 800787e:	bf00      	nop
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	20000ff8 	.word	0x20000ff8
 800788c:	20001458 	.word	0x20001458
 8007890:	2000146c 	.word	0x2000146c
 8007894:	20001488 	.word	0x20001488
 8007898:	2000149c 	.word	0x2000149c
 800789c:	200014b4 	.word	0x200014b4
 80078a0:	20001480 	.word	0x20001480
 80078a4:	20001484 	.word	0x20001484

080078a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078ae:	e019      	b.n	80078e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078b0:	f000 fdd8 	bl	8008464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b4:	4b10      	ldr	r3, [pc, #64]	; (80078f8 <prvCheckTasksWaitingTermination+0x50>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	3304      	adds	r3, #4
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe fd15 	bl	80062f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078c6:	4b0d      	ldr	r3, [pc, #52]	; (80078fc <prvCheckTasksWaitingTermination+0x54>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3b01      	subs	r3, #1
 80078cc:	4a0b      	ldr	r2, [pc, #44]	; (80078fc <prvCheckTasksWaitingTermination+0x54>)
 80078ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078d0:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <prvCheckTasksWaitingTermination+0x58>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	4a0a      	ldr	r2, [pc, #40]	; (8007900 <prvCheckTasksWaitingTermination+0x58>)
 80078d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078da:	f000 fdf3 	bl	80084c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f810 	bl	8007904 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078e4:	4b06      	ldr	r3, [pc, #24]	; (8007900 <prvCheckTasksWaitingTermination+0x58>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e1      	bne.n	80078b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078ec:	bf00      	nop
 80078ee:	bf00      	nop
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	2000149c 	.word	0x2000149c
 80078fc:	200014c8 	.word	0x200014c8
 8007900:	200014b0 	.word	0x200014b0

08007904 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3354      	adds	r3, #84	; 0x54
 8007910:	4618      	mov	r0, r3
 8007912:	f001 f8fd 	bl	8008b10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800791c:	2b00      	cmp	r3, #0
 800791e:	d108      	bne.n	8007932 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007924:	4618      	mov	r0, r3
 8007926:	f000 ff8b 	bl	8008840 <vPortFree>
				vPortFree( pxTCB );
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 ff88 	bl	8008840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007930:	e018      	b.n	8007964 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007938:	2b01      	cmp	r3, #1
 800793a:	d103      	bne.n	8007944 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 ff7f 	bl	8008840 <vPortFree>
	}
 8007942:	e00f      	b.n	8007964 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800794a:	2b02      	cmp	r3, #2
 800794c:	d00a      	beq.n	8007964 <prvDeleteTCB+0x60>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	60fb      	str	r3, [r7, #12]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <prvDeleteTCB+0x5e>
	}
 8007964:	bf00      	nop
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007972:	4b0c      	ldr	r3, [pc, #48]	; (80079a4 <prvResetNextTaskUnblockTime+0x38>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d104      	bne.n	8007986 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <prvResetNextTaskUnblockTime+0x3c>)
 800797e:	f04f 32ff 	mov.w	r2, #4294967295
 8007982:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007984:	e008      	b.n	8007998 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007986:	4b07      	ldr	r3, [pc, #28]	; (80079a4 <prvResetNextTaskUnblockTime+0x38>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	4a04      	ldr	r2, [pc, #16]	; (80079a8 <prvResetNextTaskUnblockTime+0x3c>)
 8007996:	6013      	str	r3, [r2, #0]
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	20001480 	.word	0x20001480
 80079a8:	200014e8 	.word	0x200014e8

080079ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079b2:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <xTaskGetSchedulerState+0x34>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d102      	bne.n	80079c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079ba:	2301      	movs	r3, #1
 80079bc:	607b      	str	r3, [r7, #4]
 80079be:	e008      	b.n	80079d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079c0:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <xTaskGetSchedulerState+0x38>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d102      	bne.n	80079ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079c8:	2302      	movs	r3, #2
 80079ca:	607b      	str	r3, [r7, #4]
 80079cc:	e001      	b.n	80079d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079ce:	2300      	movs	r3, #0
 80079d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079d2:	687b      	ldr	r3, [r7, #4]
	}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	200014d4 	.word	0x200014d4
 80079e4:	200014f0 	.word	0x200014f0

080079e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d056      	beq.n	8007aac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079fe:	4b2e      	ldr	r3, [pc, #184]	; (8007ab8 <xTaskPriorityDisinherit+0xd0>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d00a      	beq.n	8007a1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	60fb      	str	r3, [r7, #12]
}
 8007a1a:	bf00      	nop
 8007a1c:	e7fe      	b.n	8007a1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10a      	bne.n	8007a3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	60bb      	str	r3, [r7, #8]
}
 8007a38:	bf00      	nop
 8007a3a:	e7fe      	b.n	8007a3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a40:	1e5a      	subs	r2, r3, #1
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d02c      	beq.n	8007aac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d128      	bne.n	8007aac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fe fc46 	bl	80062f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7c:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <xTaskPriorityDisinherit+0xd4>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d903      	bls.n	8007a8c <xTaskPriorityDisinherit+0xa4>
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	4a0c      	ldr	r2, [pc, #48]	; (8007abc <xTaskPriorityDisinherit+0xd4>)
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <xTaskPriorityDisinherit+0xd8>)
 8007a9a:	441a      	add	r2, r3
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	f7fe fbc7 	bl	8006236 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007aac:	697b      	ldr	r3, [r7, #20]
	}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20000ff4 	.word	0x20000ff4
 8007abc:	200014d0 	.word	0x200014d0
 8007ac0:	20000ff8 	.word	0x20000ff8

08007ac4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ace:	4b21      	ldr	r3, [pc, #132]	; (8007b54 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ad4:	4b20      	ldr	r3, [pc, #128]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe fc08 	bl	80062f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae6:	d10a      	bne.n	8007afe <prvAddCurrentTaskToDelayedList+0x3a>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d007      	beq.n	8007afe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aee:	4b1a      	ldr	r3, [pc, #104]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4619      	mov	r1, r3
 8007af6:	4819      	ldr	r0, [pc, #100]	; (8007b5c <prvAddCurrentTaskToDelayedList+0x98>)
 8007af8:	f7fe fb9d 	bl	8006236 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007afc:	e026      	b.n	8007b4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4413      	add	r3, r2
 8007b04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d209      	bcs.n	8007b2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b16:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	4b0f      	ldr	r3, [pc, #60]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	4619      	mov	r1, r3
 8007b22:	4610      	mov	r0, r2
 8007b24:	f7fe fbab 	bl	800627e <vListInsert>
}
 8007b28:	e010      	b.n	8007b4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b2a:	4b0e      	ldr	r3, [pc, #56]	; (8007b64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3304      	adds	r3, #4
 8007b34:	4619      	mov	r1, r3
 8007b36:	4610      	mov	r0, r2
 8007b38:	f7fe fba1 	bl	800627e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d202      	bcs.n	8007b4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b46:	4a08      	ldr	r2, [pc, #32]	; (8007b68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	6013      	str	r3, [r2, #0]
}
 8007b4c:	bf00      	nop
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	200014cc 	.word	0x200014cc
 8007b58:	20000ff4 	.word	0x20000ff4
 8007b5c:	200014b4 	.word	0x200014b4
 8007b60:	20001484 	.word	0x20001484
 8007b64:	20001480 	.word	0x20001480
 8007b68:	200014e8 	.word	0x200014e8

08007b6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08a      	sub	sp, #40	; 0x28
 8007b70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b72:	2300      	movs	r3, #0
 8007b74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b76:	f000 fb07 	bl	8008188 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b7a:	4b1c      	ldr	r3, [pc, #112]	; (8007bec <xTimerCreateTimerTask+0x80>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d021      	beq.n	8007bc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b8a:	1d3a      	adds	r2, r7, #4
 8007b8c:	f107 0108 	add.w	r1, r7, #8
 8007b90:	f107 030c 	add.w	r3, r7, #12
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fe fb07 	bl	80061a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b9a:	6879      	ldr	r1, [r7, #4]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	9202      	str	r2, [sp, #8]
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	460a      	mov	r2, r1
 8007bac:	4910      	ldr	r1, [pc, #64]	; (8007bf0 <xTimerCreateTimerTask+0x84>)
 8007bae:	4811      	ldr	r0, [pc, #68]	; (8007bf4 <xTimerCreateTimerTask+0x88>)
 8007bb0:	f7ff f8b4 	bl	8006d1c <xTaskCreateStatic>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	4a10      	ldr	r2, [pc, #64]	; (8007bf8 <xTimerCreateTimerTask+0x8c>)
 8007bb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007bba:	4b0f      	ldr	r3, [pc, #60]	; (8007bf8 <xTimerCreateTimerTask+0x8c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	613b      	str	r3, [r7, #16]
}
 8007bde:	bf00      	nop
 8007be0:	e7fe      	b.n	8007be0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007be2:	697b      	ldr	r3, [r7, #20]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20001524 	.word	0x20001524
 8007bf0:	08008d44 	.word	0x08008d44
 8007bf4:	08007d31 	.word	0x08007d31
 8007bf8:	20001528 	.word	0x20001528

08007bfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08a      	sub	sp, #40	; 0x28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	623b      	str	r3, [r7, #32]
}
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c2a:	4b1a      	ldr	r3, [pc, #104]	; (8007c94 <xTimerGenericCommand+0x98>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d02a      	beq.n	8007c88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b05      	cmp	r3, #5
 8007c42:	dc18      	bgt.n	8007c76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c44:	f7ff feb2 	bl	80079ac <xTaskGetSchedulerState>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d109      	bne.n	8007c62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c4e:	4b11      	ldr	r3, [pc, #68]	; (8007c94 <xTimerGenericCommand+0x98>)
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	f107 0110 	add.w	r1, r7, #16
 8007c56:	2300      	movs	r3, #0
 8007c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c5a:	f7fe fc77 	bl	800654c <xQueueGenericSend>
 8007c5e:	6278      	str	r0, [r7, #36]	; 0x24
 8007c60:	e012      	b.n	8007c88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c62:	4b0c      	ldr	r3, [pc, #48]	; (8007c94 <xTimerGenericCommand+0x98>)
 8007c64:	6818      	ldr	r0, [r3, #0]
 8007c66:	f107 0110 	add.w	r1, r7, #16
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f7fe fc6d 	bl	800654c <xQueueGenericSend>
 8007c72:	6278      	str	r0, [r7, #36]	; 0x24
 8007c74:	e008      	b.n	8007c88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c76:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <xTimerGenericCommand+0x98>)
 8007c78:	6818      	ldr	r0, [r3, #0]
 8007c7a:	f107 0110 	add.w	r1, r7, #16
 8007c7e:	2300      	movs	r3, #0
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	f7fe fd61 	bl	8006748 <xQueueGenericSendFromISR>
 8007c86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3728      	adds	r7, #40	; 0x28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20001524 	.word	0x20001524

08007c98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af02      	add	r7, sp, #8
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ca2:	4b22      	ldr	r3, [pc, #136]	; (8007d2c <prvProcessExpiredTimer+0x94>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fe fb1d 	bl	80062f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d022      	beq.n	8007d0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	699a      	ldr	r2, [r3, #24]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	18d1      	adds	r1, r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	6978      	ldr	r0, [r7, #20]
 8007cd2:	f000 f8d1 	bl	8007e78 <prvInsertTimerInActiveList>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d01f      	beq.n	8007d1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cdc:	2300      	movs	r3, #0
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	6978      	ldr	r0, [r7, #20]
 8007ce8:	f7ff ff88 	bl	8007bfc <xTimerGenericCommand>
 8007cec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d113      	bne.n	8007d1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	60fb      	str	r3, [r7, #12]
}
 8007d06:	bf00      	nop
 8007d08:	e7fe      	b.n	8007d08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d10:	f023 0301 	bic.w	r3, r3, #1
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	6978      	ldr	r0, [r7, #20]
 8007d22:	4798      	blx	r3
}
 8007d24:	bf00      	nop
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	2000151c 	.word	0x2000151c

08007d30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d38:	f107 0308 	add.w	r3, r7, #8
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 f857 	bl	8007df0 <prvGetNextExpireTime>
 8007d42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	4619      	mov	r1, r3
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 f803 	bl	8007d54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d4e:	f000 f8d5 	bl	8007efc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d52:	e7f1      	b.n	8007d38 <prvTimerTask+0x8>

08007d54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d5e:	f7ff fa39 	bl	80071d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d62:	f107 0308 	add.w	r3, r7, #8
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 f866 	bl	8007e38 <prvSampleTimeNow>
 8007d6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d130      	bne.n	8007dd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10a      	bne.n	8007d90 <prvProcessTimerOrBlockTask+0x3c>
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d806      	bhi.n	8007d90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d82:	f7ff fa35 	bl	80071f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d86:	68f9      	ldr	r1, [r7, #12]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff ff85 	bl	8007c98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d8e:	e024      	b.n	8007dda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d008      	beq.n	8007da8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d96:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <prvProcessTimerOrBlockTask+0x90>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <prvProcessTimerOrBlockTask+0x50>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e000      	b.n	8007da6 <prvProcessTimerOrBlockTask+0x52>
 8007da4:	2300      	movs	r3, #0
 8007da6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007da8:	4b0f      	ldr	r3, [pc, #60]	; (8007de8 <prvProcessTimerOrBlockTask+0x94>)
 8007daa:	6818      	ldr	r0, [r3, #0]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	4619      	mov	r1, r3
 8007db6:	f7fe ff7d 	bl	8006cb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007dba:	f7ff fa19 	bl	80071f0 <xTaskResumeAll>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10a      	bne.n	8007dda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007dc4:	4b09      	ldr	r3, [pc, #36]	; (8007dec <prvProcessTimerOrBlockTask+0x98>)
 8007dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	f3bf 8f6f 	isb	sy
}
 8007dd4:	e001      	b.n	8007dda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007dd6:	f7ff fa0b 	bl	80071f0 <xTaskResumeAll>
}
 8007dda:	bf00      	nop
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20001520 	.word	0x20001520
 8007de8:	20001524 	.word	0x20001524
 8007dec:	e000ed04 	.word	0xe000ed04

08007df0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007df8:	4b0e      	ldr	r3, [pc, #56]	; (8007e34 <prvGetNextExpireTime+0x44>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <prvGetNextExpireTime+0x16>
 8007e02:	2201      	movs	r2, #1
 8007e04:	e000      	b.n	8007e08 <prvGetNextExpireTime+0x18>
 8007e06:	2200      	movs	r2, #0
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d105      	bne.n	8007e20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e14:	4b07      	ldr	r3, [pc, #28]	; (8007e34 <prvGetNextExpireTime+0x44>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	e001      	b.n	8007e24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e24:	68fb      	ldr	r3, [r7, #12]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	2000151c 	.word	0x2000151c

08007e38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e40:	f7ff fa74 	bl	800732c <xTaskGetTickCount>
 8007e44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e46:	4b0b      	ldr	r3, [pc, #44]	; (8007e74 <prvSampleTimeNow+0x3c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d205      	bcs.n	8007e5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e50:	f000 f936 	bl	80080c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	e002      	b.n	8007e62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e62:	4a04      	ldr	r2, [pc, #16]	; (8007e74 <prvSampleTimeNow+0x3c>)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e68:	68fb      	ldr	r3, [r7, #12]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	2000152c 	.word	0x2000152c

08007e78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
 8007e84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e86:	2300      	movs	r3, #0
 8007e88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d812      	bhi.n	8007ec4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	1ad2      	subs	r2, r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d302      	bcc.n	8007eb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007eac:	2301      	movs	r3, #1
 8007eae:	617b      	str	r3, [r7, #20]
 8007eb0:	e01b      	b.n	8007eea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007eb2:	4b10      	ldr	r3, [pc, #64]	; (8007ef4 <prvInsertTimerInActiveList+0x7c>)
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	f7fe f9de 	bl	800627e <vListInsert>
 8007ec2:	e012      	b.n	8007eea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d206      	bcs.n	8007eda <prvInsertTimerInActiveList+0x62>
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d302      	bcc.n	8007eda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	e007      	b.n	8007eea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eda:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <prvInsertTimerInActiveList+0x80>)
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	f7fe f9ca 	bl	800627e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007eea:	697b      	ldr	r3, [r7, #20]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3718      	adds	r7, #24
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	20001520 	.word	0x20001520
 8007ef8:	2000151c 	.word	0x2000151c

08007efc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08e      	sub	sp, #56	; 0x38
 8007f00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f02:	e0ca      	b.n	800809a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	da18      	bge.n	8007f3c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f0a:	1d3b      	adds	r3, r7, #4
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10a      	bne.n	8007f2c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	61fb      	str	r3, [r7, #28]
}
 8007f28:	bf00      	nop
 8007f2a:	e7fe      	b.n	8007f2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f32:	6850      	ldr	r0, [r2, #4]
 8007f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f36:	6892      	ldr	r2, [r2, #8]
 8007f38:	4611      	mov	r1, r2
 8007f3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f2c0 80aa 	blt.w	8008098 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d004      	beq.n	8007f5a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f52:	3304      	adds	r3, #4
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fe f9cb 	bl	80062f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f5a:	463b      	mov	r3, r7
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7ff ff6b 	bl	8007e38 <prvSampleTimeNow>
 8007f62:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b09      	cmp	r3, #9
 8007f68:	f200 8097 	bhi.w	800809a <prvProcessReceivedCommands+0x19e>
 8007f6c:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <prvProcessReceivedCommands+0x78>)
 8007f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f72:	bf00      	nop
 8007f74:	08007f9d 	.word	0x08007f9d
 8007f78:	08007f9d 	.word	0x08007f9d
 8007f7c:	08007f9d 	.word	0x08007f9d
 8007f80:	08008011 	.word	0x08008011
 8007f84:	08008025 	.word	0x08008025
 8007f88:	0800806f 	.word	0x0800806f
 8007f8c:	08007f9d 	.word	0x08007f9d
 8007f90:	08007f9d 	.word	0x08007f9d
 8007f94:	08008011 	.word	0x08008011
 8007f98:	08008025 	.word	0x08008025
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fa2:	f043 0301 	orr.w	r3, r3, #1
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007faa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	18d1      	adds	r1, r2, r3
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fbc:	f7ff ff5c 	bl	8007e78 <prvInsertTimerInActiveList>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d069      	beq.n	800809a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d05e      	beq.n	800809a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	441a      	add	r2, r3
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	2100      	movs	r1, #0
 8007fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fee:	f7ff fe05 	bl	8007bfc <xTimerGenericCommand>
 8007ff2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d14f      	bne.n	800809a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	61bb      	str	r3, [r7, #24]
}
 800800c:	bf00      	nop
 800800e:	e7fe      	b.n	800800e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008016:	f023 0301 	bic.w	r3, r3, #1
 800801a:	b2da      	uxtb	r2, r3
 800801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008022:	e03a      	b.n	800809a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800802a:	f043 0301 	orr.w	r3, r3, #1
 800802e:	b2da      	uxtb	r2, r3
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	617b      	str	r3, [r7, #20]
}
 8008056:	bf00      	nop
 8008058:	e7fe      	b.n	8008058 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	18d1      	adds	r1, r2, r3
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008068:	f7ff ff06 	bl	8007e78 <prvInsertTimerInActiveList>
					break;
 800806c:	e015      	b.n	800809a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d103      	bne.n	8008084 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800807c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800807e:	f000 fbdf 	bl	8008840 <vPortFree>
 8008082:	e00a      	b.n	800809a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008086:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800808a:	f023 0301 	bic.w	r3, r3, #1
 800808e:	b2da      	uxtb	r2, r3
 8008090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008092:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008096:	e000      	b.n	800809a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008098:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800809a:	4b08      	ldr	r3, [pc, #32]	; (80080bc <prvProcessReceivedCommands+0x1c0>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	1d39      	adds	r1, r7, #4
 80080a0:	2200      	movs	r2, #0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe fbec 	bl	8006880 <xQueueReceive>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f47f af2a 	bne.w	8007f04 <prvProcessReceivedCommands+0x8>
	}
}
 80080b0:	bf00      	nop
 80080b2:	bf00      	nop
 80080b4:	3730      	adds	r7, #48	; 0x30
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20001524 	.word	0x20001524

080080c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080c6:	e048      	b.n	800815a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080c8:	4b2d      	ldr	r3, [pc, #180]	; (8008180 <prvSwitchTimerLists+0xc0>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d2:	4b2b      	ldr	r3, [pc, #172]	; (8008180 <prvSwitchTimerLists+0xc0>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	3304      	adds	r3, #4
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fe f905 	bl	80062f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d02e      	beq.n	800815a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	4413      	add	r3, r2
 8008104:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	429a      	cmp	r2, r3
 800810c:	d90e      	bls.n	800812c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800811a:	4b19      	ldr	r3, [pc, #100]	; (8008180 <prvSwitchTimerLists+0xc0>)
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3304      	adds	r3, #4
 8008122:	4619      	mov	r1, r3
 8008124:	4610      	mov	r0, r2
 8008126:	f7fe f8aa 	bl	800627e <vListInsert>
 800812a:	e016      	b.n	800815a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800812c:	2300      	movs	r3, #0
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	2300      	movs	r3, #0
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	2100      	movs	r1, #0
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f7ff fd60 	bl	8007bfc <xTimerGenericCommand>
 800813c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10a      	bne.n	800815a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	603b      	str	r3, [r7, #0]
}
 8008156:	bf00      	nop
 8008158:	e7fe      	b.n	8008158 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800815a:	4b09      	ldr	r3, [pc, #36]	; (8008180 <prvSwitchTimerLists+0xc0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1b1      	bne.n	80080c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008164:	4b06      	ldr	r3, [pc, #24]	; (8008180 <prvSwitchTimerLists+0xc0>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800816a:	4b06      	ldr	r3, [pc, #24]	; (8008184 <prvSwitchTimerLists+0xc4>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a04      	ldr	r2, [pc, #16]	; (8008180 <prvSwitchTimerLists+0xc0>)
 8008170:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008172:	4a04      	ldr	r2, [pc, #16]	; (8008184 <prvSwitchTimerLists+0xc4>)
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	6013      	str	r3, [r2, #0]
}
 8008178:	bf00      	nop
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	2000151c 	.word	0x2000151c
 8008184:	20001520 	.word	0x20001520

08008188 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800818e:	f000 f969 	bl	8008464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008192:	4b15      	ldr	r3, [pc, #84]	; (80081e8 <prvCheckForValidListAndQueue+0x60>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d120      	bne.n	80081dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800819a:	4814      	ldr	r0, [pc, #80]	; (80081ec <prvCheckForValidListAndQueue+0x64>)
 800819c:	f7fe f81e 	bl	80061dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80081a0:	4813      	ldr	r0, [pc, #76]	; (80081f0 <prvCheckForValidListAndQueue+0x68>)
 80081a2:	f7fe f81b 	bl	80061dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80081a6:	4b13      	ldr	r3, [pc, #76]	; (80081f4 <prvCheckForValidListAndQueue+0x6c>)
 80081a8:	4a10      	ldr	r2, [pc, #64]	; (80081ec <prvCheckForValidListAndQueue+0x64>)
 80081aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80081ac:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <prvCheckForValidListAndQueue+0x70>)
 80081ae:	4a10      	ldr	r2, [pc, #64]	; (80081f0 <prvCheckForValidListAndQueue+0x68>)
 80081b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80081b2:	2300      	movs	r3, #0
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	4b11      	ldr	r3, [pc, #68]	; (80081fc <prvCheckForValidListAndQueue+0x74>)
 80081b8:	4a11      	ldr	r2, [pc, #68]	; (8008200 <prvCheckForValidListAndQueue+0x78>)
 80081ba:	2110      	movs	r1, #16
 80081bc:	200a      	movs	r0, #10
 80081be:	f7fe f929 	bl	8006414 <xQueueGenericCreateStatic>
 80081c2:	4603      	mov	r3, r0
 80081c4:	4a08      	ldr	r2, [pc, #32]	; (80081e8 <prvCheckForValidListAndQueue+0x60>)
 80081c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80081c8:	4b07      	ldr	r3, [pc, #28]	; (80081e8 <prvCheckForValidListAndQueue+0x60>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d005      	beq.n	80081dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081d0:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <prvCheckForValidListAndQueue+0x60>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	490b      	ldr	r1, [pc, #44]	; (8008204 <prvCheckForValidListAndQueue+0x7c>)
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe fd42 	bl	8006c60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081dc:	f000 f972 	bl	80084c4 <vPortExitCritical>
}
 80081e0:	bf00      	nop
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20001524 	.word	0x20001524
 80081ec:	200014f4 	.word	0x200014f4
 80081f0:	20001508 	.word	0x20001508
 80081f4:	2000151c 	.word	0x2000151c
 80081f8:	20001520 	.word	0x20001520
 80081fc:	200015d0 	.word	0x200015d0
 8008200:	20001530 	.word	0x20001530
 8008204:	08008d4c 	.word	0x08008d4c

08008208 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3b04      	subs	r3, #4
 8008218:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008220:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3b04      	subs	r3, #4
 8008226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f023 0201 	bic.w	r2, r3, #1
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3b04      	subs	r3, #4
 8008236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008238:	4a0c      	ldr	r2, [pc, #48]	; (800826c <pxPortInitialiseStack+0x64>)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3b14      	subs	r3, #20
 8008242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3b04      	subs	r3, #4
 800824e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f06f 0202 	mvn.w	r2, #2
 8008256:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3b20      	subs	r3, #32
 800825c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800825e:	68fb      	ldr	r3, [r7, #12]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	08008271 	.word	0x08008271

08008270 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800827a:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <prvTaskExitError+0x54>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008282:	d00a      	beq.n	800829a <prvTaskExitError+0x2a>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	60fb      	str	r3, [r7, #12]
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <prvTaskExitError+0x28>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	60bb      	str	r3, [r7, #8]
}
 80082ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082ae:	bf00      	nop
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0fc      	beq.n	80082b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082b6:	bf00      	nop
 80082b8:	bf00      	nop
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	2000011c 	.word	0x2000011c
	...

080082d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082d0:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <pxCurrentTCBConst2>)
 80082d2:	6819      	ldr	r1, [r3, #0]
 80082d4:	6808      	ldr	r0, [r1, #0]
 80082d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082da:	f380 8809 	msr	PSP, r0
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f04f 0000 	mov.w	r0, #0
 80082e6:	f380 8811 	msr	BASEPRI, r0
 80082ea:	4770      	bx	lr
 80082ec:	f3af 8000 	nop.w

080082f0 <pxCurrentTCBConst2>:
 80082f0:	20000ff4 	.word	0x20000ff4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082f4:	bf00      	nop
 80082f6:	bf00      	nop

080082f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80082f8:	4808      	ldr	r0, [pc, #32]	; (800831c <prvPortStartFirstTask+0x24>)
 80082fa:	6800      	ldr	r0, [r0, #0]
 80082fc:	6800      	ldr	r0, [r0, #0]
 80082fe:	f380 8808 	msr	MSP, r0
 8008302:	f04f 0000 	mov.w	r0, #0
 8008306:	f380 8814 	msr	CONTROL, r0
 800830a:	b662      	cpsie	i
 800830c:	b661      	cpsie	f
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	df00      	svc	0
 8008318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800831a:	bf00      	nop
 800831c:	e000ed08 	.word	0xe000ed08

08008320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008326:	4b46      	ldr	r3, [pc, #280]	; (8008440 <xPortStartScheduler+0x120>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a46      	ldr	r2, [pc, #280]	; (8008444 <xPortStartScheduler+0x124>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d10a      	bne.n	8008346 <xPortStartScheduler+0x26>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	613b      	str	r3, [r7, #16]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008346:	4b3e      	ldr	r3, [pc, #248]	; (8008440 <xPortStartScheduler+0x120>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a3f      	ldr	r2, [pc, #252]	; (8008448 <xPortStartScheduler+0x128>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d10a      	bne.n	8008366 <xPortStartScheduler+0x46>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	60fb      	str	r3, [r7, #12]
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008366:	4b39      	ldr	r3, [pc, #228]	; (800844c <xPortStartScheduler+0x12c>)
 8008368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	b2db      	uxtb	r3, r3
 8008370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	22ff      	movs	r2, #255	; 0xff
 8008376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	b2db      	uxtb	r3, r3
 8008384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008388:	b2da      	uxtb	r2, r3
 800838a:	4b31      	ldr	r3, [pc, #196]	; (8008450 <xPortStartScheduler+0x130>)
 800838c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800838e:	4b31      	ldr	r3, [pc, #196]	; (8008454 <xPortStartScheduler+0x134>)
 8008390:	2207      	movs	r2, #7
 8008392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008394:	e009      	b.n	80083aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008396:	4b2f      	ldr	r3, [pc, #188]	; (8008454 <xPortStartScheduler+0x134>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3b01      	subs	r3, #1
 800839c:	4a2d      	ldr	r2, [pc, #180]	; (8008454 <xPortStartScheduler+0x134>)
 800839e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083a0:	78fb      	ldrb	r3, [r7, #3]
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083aa:	78fb      	ldrb	r3, [r7, #3]
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b2:	2b80      	cmp	r3, #128	; 0x80
 80083b4:	d0ef      	beq.n	8008396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80083b6:	4b27      	ldr	r3, [pc, #156]	; (8008454 <xPortStartScheduler+0x134>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f1c3 0307 	rsb	r3, r3, #7
 80083be:	2b04      	cmp	r3, #4
 80083c0:	d00a      	beq.n	80083d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	60bb      	str	r3, [r7, #8]
}
 80083d4:	bf00      	nop
 80083d6:	e7fe      	b.n	80083d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083d8:	4b1e      	ldr	r3, [pc, #120]	; (8008454 <xPortStartScheduler+0x134>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	021b      	lsls	r3, r3, #8
 80083de:	4a1d      	ldr	r2, [pc, #116]	; (8008454 <xPortStartScheduler+0x134>)
 80083e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083e2:	4b1c      	ldr	r3, [pc, #112]	; (8008454 <xPortStartScheduler+0x134>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083ea:	4a1a      	ldr	r2, [pc, #104]	; (8008454 <xPortStartScheduler+0x134>)
 80083ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80083f6:	4b18      	ldr	r3, [pc, #96]	; (8008458 <xPortStartScheduler+0x138>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a17      	ldr	r2, [pc, #92]	; (8008458 <xPortStartScheduler+0x138>)
 80083fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008402:	4b15      	ldr	r3, [pc, #84]	; (8008458 <xPortStartScheduler+0x138>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a14      	ldr	r2, [pc, #80]	; (8008458 <xPortStartScheduler+0x138>)
 8008408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800840c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800840e:	f000 f8dd 	bl	80085cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008412:	4b12      	ldr	r3, [pc, #72]	; (800845c <xPortStartScheduler+0x13c>)
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008418:	f000 f8fc 	bl	8008614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800841c:	4b10      	ldr	r3, [pc, #64]	; (8008460 <xPortStartScheduler+0x140>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a0f      	ldr	r2, [pc, #60]	; (8008460 <xPortStartScheduler+0x140>)
 8008422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008428:	f7ff ff66 	bl	80082f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800842c:	f7ff f848 	bl	80074c0 <vTaskSwitchContext>
	prvTaskExitError();
 8008430:	f7ff ff1e 	bl	8008270 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3718      	adds	r7, #24
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	e000ed00 	.word	0xe000ed00
 8008444:	410fc271 	.word	0x410fc271
 8008448:	410fc270 	.word	0x410fc270
 800844c:	e000e400 	.word	0xe000e400
 8008450:	20001620 	.word	0x20001620
 8008454:	20001624 	.word	0x20001624
 8008458:	e000ed20 	.word	0xe000ed20
 800845c:	2000011c 	.word	0x2000011c
 8008460:	e000ef34 	.word	0xe000ef34

08008464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	607b      	str	r3, [r7, #4]
}
 800847c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800847e:	4b0f      	ldr	r3, [pc, #60]	; (80084bc <vPortEnterCritical+0x58>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3301      	adds	r3, #1
 8008484:	4a0d      	ldr	r2, [pc, #52]	; (80084bc <vPortEnterCritical+0x58>)
 8008486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008488:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <vPortEnterCritical+0x58>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d10f      	bne.n	80084b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008490:	4b0b      	ldr	r3, [pc, #44]	; (80084c0 <vPortEnterCritical+0x5c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00a      	beq.n	80084b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800849a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	603b      	str	r3, [r7, #0]
}
 80084ac:	bf00      	nop
 80084ae:	e7fe      	b.n	80084ae <vPortEnterCritical+0x4a>
	}
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	2000011c 	.word	0x2000011c
 80084c0:	e000ed04 	.word	0xe000ed04

080084c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80084ca:	4b12      	ldr	r3, [pc, #72]	; (8008514 <vPortExitCritical+0x50>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10a      	bne.n	80084e8 <vPortExitCritical+0x24>
	__asm volatile
 80084d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	607b      	str	r3, [r7, #4]
}
 80084e4:	bf00      	nop
 80084e6:	e7fe      	b.n	80084e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80084e8:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <vPortExitCritical+0x50>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3b01      	subs	r3, #1
 80084ee:	4a09      	ldr	r2, [pc, #36]	; (8008514 <vPortExitCritical+0x50>)
 80084f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80084f2:	4b08      	ldr	r3, [pc, #32]	; (8008514 <vPortExitCritical+0x50>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d105      	bne.n	8008506 <vPortExitCritical+0x42>
 80084fa:	2300      	movs	r3, #0
 80084fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	f383 8811 	msr	BASEPRI, r3
}
 8008504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	2000011c 	.word	0x2000011c
	...

08008520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008520:	f3ef 8009 	mrs	r0, PSP
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	4b15      	ldr	r3, [pc, #84]	; (8008580 <pxCurrentTCBConst>)
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	f01e 0f10 	tst.w	lr, #16
 8008530:	bf08      	it	eq
 8008532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853a:	6010      	str	r0, [r2, #0]
 800853c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008544:	f380 8811 	msr	BASEPRI, r0
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f7fe ffb6 	bl	80074c0 <vTaskSwitchContext>
 8008554:	f04f 0000 	mov.w	r0, #0
 8008558:	f380 8811 	msr	BASEPRI, r0
 800855c:	bc09      	pop	{r0, r3}
 800855e:	6819      	ldr	r1, [r3, #0]
 8008560:	6808      	ldr	r0, [r1, #0]
 8008562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008566:	f01e 0f10 	tst.w	lr, #16
 800856a:	bf08      	it	eq
 800856c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008570:	f380 8809 	msr	PSP, r0
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	f3af 8000 	nop.w

08008580 <pxCurrentTCBConst>:
 8008580:	20000ff4 	.word	0x20000ff4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop

08008588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	607b      	str	r3, [r7, #4]
}
 80085a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085a2:	f7fe fed3 	bl	800734c <xTaskIncrementTick>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d003      	beq.n	80085b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085ac:	4b06      	ldr	r3, [pc, #24]	; (80085c8 <xPortSysTickHandler+0x40>)
 80085ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	2300      	movs	r3, #0
 80085b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	f383 8811 	msr	BASEPRI, r3
}
 80085be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80085c0:	bf00      	nop
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	e000ed04 	.word	0xe000ed04

080085cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085d0:	4b0b      	ldr	r3, [pc, #44]	; (8008600 <vPortSetupTimerInterrupt+0x34>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085d6:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <vPortSetupTimerInterrupt+0x38>)
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085dc:	4b0a      	ldr	r3, [pc, #40]	; (8008608 <vPortSetupTimerInterrupt+0x3c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a0a      	ldr	r2, [pc, #40]	; (800860c <vPortSetupTimerInterrupt+0x40>)
 80085e2:	fba2 2303 	umull	r2, r3, r2, r3
 80085e6:	099b      	lsrs	r3, r3, #6
 80085e8:	4a09      	ldr	r2, [pc, #36]	; (8008610 <vPortSetupTimerInterrupt+0x44>)
 80085ea:	3b01      	subs	r3, #1
 80085ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80085ee:	4b04      	ldr	r3, [pc, #16]	; (8008600 <vPortSetupTimerInterrupt+0x34>)
 80085f0:	2207      	movs	r2, #7
 80085f2:	601a      	str	r2, [r3, #0]
}
 80085f4:	bf00      	nop
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	e000e010 	.word	0xe000e010
 8008604:	e000e018 	.word	0xe000e018
 8008608:	20000018 	.word	0x20000018
 800860c:	10624dd3 	.word	0x10624dd3
 8008610:	e000e014 	.word	0xe000e014

08008614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008624 <vPortEnableVFP+0x10>
 8008618:	6801      	ldr	r1, [r0, #0]
 800861a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800861e:	6001      	str	r1, [r0, #0]
 8008620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008622:	bf00      	nop
 8008624:	e000ed88 	.word	0xe000ed88

08008628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800862e:	f3ef 8305 	mrs	r3, IPSR
 8008632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b0f      	cmp	r3, #15
 8008638:	d914      	bls.n	8008664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800863a:	4a17      	ldr	r2, [pc, #92]	; (8008698 <vPortValidateInterruptPriority+0x70>)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	4413      	add	r3, r2
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008644:	4b15      	ldr	r3, [pc, #84]	; (800869c <vPortValidateInterruptPriority+0x74>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	7afa      	ldrb	r2, [r7, #11]
 800864a:	429a      	cmp	r2, r3
 800864c:	d20a      	bcs.n	8008664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	607b      	str	r3, [r7, #4]
}
 8008660:	bf00      	nop
 8008662:	e7fe      	b.n	8008662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008664:	4b0e      	ldr	r3, [pc, #56]	; (80086a0 <vPortValidateInterruptPriority+0x78>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800866c:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <vPortValidateInterruptPriority+0x7c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	429a      	cmp	r2, r3
 8008672:	d90a      	bls.n	800868a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	603b      	str	r3, [r7, #0]
}
 8008686:	bf00      	nop
 8008688:	e7fe      	b.n	8008688 <vPortValidateInterruptPriority+0x60>
	}
 800868a:	bf00      	nop
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	e000e3f0 	.word	0xe000e3f0
 800869c:	20001620 	.word	0x20001620
 80086a0:	e000ed0c 	.word	0xe000ed0c
 80086a4:	20001624 	.word	0x20001624

080086a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b08a      	sub	sp, #40	; 0x28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80086b4:	f7fe fd8e 	bl	80071d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80086b8:	4b5b      	ldr	r3, [pc, #364]	; (8008828 <pvPortMalloc+0x180>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086c0:	f000 f920 	bl	8008904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086c4:	4b59      	ldr	r3, [pc, #356]	; (800882c <pvPortMalloc+0x184>)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4013      	ands	r3, r2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f040 8093 	bne.w	80087f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d01d      	beq.n	8008714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80086d8:	2208      	movs	r2, #8
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4413      	add	r3, r2
 80086de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f003 0307 	and.w	r3, r3, #7
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d014      	beq.n	8008714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f023 0307 	bic.w	r3, r3, #7
 80086f0:	3308      	adds	r3, #8
 80086f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f003 0307 	and.w	r3, r3, #7
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <pvPortMalloc+0x6c>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	617b      	str	r3, [r7, #20]
}
 8008710:	bf00      	nop
 8008712:	e7fe      	b.n	8008712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d06e      	beq.n	80087f8 <pvPortMalloc+0x150>
 800871a:	4b45      	ldr	r3, [pc, #276]	; (8008830 <pvPortMalloc+0x188>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	429a      	cmp	r2, r3
 8008722:	d869      	bhi.n	80087f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008724:	4b43      	ldr	r3, [pc, #268]	; (8008834 <pvPortMalloc+0x18c>)
 8008726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008728:	4b42      	ldr	r3, [pc, #264]	; (8008834 <pvPortMalloc+0x18c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800872e:	e004      	b.n	800873a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	429a      	cmp	r2, r3
 8008742:	d903      	bls.n	800874c <pvPortMalloc+0xa4>
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1f1      	bne.n	8008730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800874c:	4b36      	ldr	r3, [pc, #216]	; (8008828 <pvPortMalloc+0x180>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008752:	429a      	cmp	r2, r3
 8008754:	d050      	beq.n	80087f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2208      	movs	r2, #8
 800875c:	4413      	add	r3, r2
 800875e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	1ad2      	subs	r2, r2, r3
 8008770:	2308      	movs	r3, #8
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	429a      	cmp	r2, r3
 8008776:	d91f      	bls.n	80087b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4413      	add	r3, r2
 800877e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	f003 0307 	and.w	r3, r3, #7
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00a      	beq.n	80087a0 <pvPortMalloc+0xf8>
	__asm volatile
 800878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	613b      	str	r3, [r7, #16]
}
 800879c:	bf00      	nop
 800879e:	e7fe      	b.n	800879e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	685a      	ldr	r2, [r3, #4]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	1ad2      	subs	r2, r2, r3
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087b2:	69b8      	ldr	r0, [r7, #24]
 80087b4:	f000 f908 	bl	80089c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087b8:	4b1d      	ldr	r3, [pc, #116]	; (8008830 <pvPortMalloc+0x188>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	4a1b      	ldr	r2, [pc, #108]	; (8008830 <pvPortMalloc+0x188>)
 80087c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087c6:	4b1a      	ldr	r3, [pc, #104]	; (8008830 <pvPortMalloc+0x188>)
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	4b1b      	ldr	r3, [pc, #108]	; (8008838 <pvPortMalloc+0x190>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d203      	bcs.n	80087da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087d2:	4b17      	ldr	r3, [pc, #92]	; (8008830 <pvPortMalloc+0x188>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a18      	ldr	r2, [pc, #96]	; (8008838 <pvPortMalloc+0x190>)
 80087d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	4b13      	ldr	r3, [pc, #76]	; (800882c <pvPortMalloc+0x184>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	431a      	orrs	r2, r3
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	2200      	movs	r2, #0
 80087ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80087ee:	4b13      	ldr	r3, [pc, #76]	; (800883c <pvPortMalloc+0x194>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3301      	adds	r3, #1
 80087f4:	4a11      	ldr	r2, [pc, #68]	; (800883c <pvPortMalloc+0x194>)
 80087f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087f8:	f7fe fcfa 	bl	80071f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	f003 0307 	and.w	r3, r3, #7
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <pvPortMalloc+0x174>
	__asm volatile
 8008806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	60fb      	str	r3, [r7, #12]
}
 8008818:	bf00      	nop
 800881a:	e7fe      	b.n	800881a <pvPortMalloc+0x172>
	return pvReturn;
 800881c:	69fb      	ldr	r3, [r7, #28]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3728      	adds	r7, #40	; 0x28
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20005230 	.word	0x20005230
 800882c:	20005244 	.word	0x20005244
 8008830:	20005234 	.word	0x20005234
 8008834:	20005228 	.word	0x20005228
 8008838:	20005238 	.word	0x20005238
 800883c:	2000523c 	.word	0x2000523c

08008840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d04d      	beq.n	80088ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008852:	2308      	movs	r3, #8
 8008854:	425b      	negs	r3, r3
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	4413      	add	r3, r2
 800885a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	4b24      	ldr	r3, [pc, #144]	; (80088f8 <vPortFree+0xb8>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4013      	ands	r3, r2
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <vPortFree+0x44>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	60fb      	str	r3, [r7, #12]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00a      	beq.n	80088a2 <vPortFree+0x62>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	60bb      	str	r3, [r7, #8]
}
 800889e:	bf00      	nop
 80088a0:	e7fe      	b.n	80088a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	4b14      	ldr	r3, [pc, #80]	; (80088f8 <vPortFree+0xb8>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4013      	ands	r3, r2
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01e      	beq.n	80088ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d11a      	bne.n	80088ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	4b0e      	ldr	r3, [pc, #56]	; (80088f8 <vPortFree+0xb8>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	43db      	mvns	r3, r3
 80088c2:	401a      	ands	r2, r3
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80088c8:	f7fe fc84 	bl	80071d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <vPortFree+0xbc>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4413      	add	r3, r2
 80088d6:	4a09      	ldr	r2, [pc, #36]	; (80088fc <vPortFree+0xbc>)
 80088d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088da:	6938      	ldr	r0, [r7, #16]
 80088dc:	f000 f874 	bl	80089c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80088e0:	4b07      	ldr	r3, [pc, #28]	; (8008900 <vPortFree+0xc0>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3301      	adds	r3, #1
 80088e6:	4a06      	ldr	r2, [pc, #24]	; (8008900 <vPortFree+0xc0>)
 80088e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80088ea:	f7fe fc81 	bl	80071f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088ee:	bf00      	nop
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20005244 	.word	0x20005244
 80088fc:	20005234 	.word	0x20005234
 8008900:	20005240 	.word	0x20005240

08008904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800890a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800890e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008910:	4b27      	ldr	r3, [pc, #156]	; (80089b0 <prvHeapInit+0xac>)
 8008912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f003 0307 	and.w	r3, r3, #7
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00c      	beq.n	8008938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3307      	adds	r3, #7
 8008922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f023 0307 	bic.w	r3, r3, #7
 800892a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	4a1f      	ldr	r2, [pc, #124]	; (80089b0 <prvHeapInit+0xac>)
 8008934:	4413      	add	r3, r2
 8008936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800893c:	4a1d      	ldr	r2, [pc, #116]	; (80089b4 <prvHeapInit+0xb0>)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008942:	4b1c      	ldr	r3, [pc, #112]	; (80089b4 <prvHeapInit+0xb0>)
 8008944:	2200      	movs	r2, #0
 8008946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	4413      	add	r3, r2
 800894e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008950:	2208      	movs	r2, #8
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	1a9b      	subs	r3, r3, r2
 8008956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f023 0307 	bic.w	r3, r3, #7
 800895e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4a15      	ldr	r2, [pc, #84]	; (80089b8 <prvHeapInit+0xb4>)
 8008964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008966:	4b14      	ldr	r3, [pc, #80]	; (80089b8 <prvHeapInit+0xb4>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2200      	movs	r2, #0
 800896c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800896e:	4b12      	ldr	r3, [pc, #72]	; (80089b8 <prvHeapInit+0xb4>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	1ad2      	subs	r2, r2, r3
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008984:	4b0c      	ldr	r3, [pc, #48]	; (80089b8 <prvHeapInit+0xb4>)
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	4a0a      	ldr	r2, [pc, #40]	; (80089bc <prvHeapInit+0xb8>)
 8008992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	4a09      	ldr	r2, [pc, #36]	; (80089c0 <prvHeapInit+0xbc>)
 800899a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800899c:	4b09      	ldr	r3, [pc, #36]	; (80089c4 <prvHeapInit+0xc0>)
 800899e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089a2:	601a      	str	r2, [r3, #0]
}
 80089a4:	bf00      	nop
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	20001628 	.word	0x20001628
 80089b4:	20005228 	.word	0x20005228
 80089b8:	20005230 	.word	0x20005230
 80089bc:	20005238 	.word	0x20005238
 80089c0:	20005234 	.word	0x20005234
 80089c4:	20005244 	.word	0x20005244

080089c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089d0:	4b28      	ldr	r3, [pc, #160]	; (8008a74 <prvInsertBlockIntoFreeList+0xac>)
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	e002      	b.n	80089dc <prvInsertBlockIntoFreeList+0x14>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d8f7      	bhi.n	80089d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	4413      	add	r3, r2
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d108      	bne.n	8008a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	441a      	add	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	441a      	add	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d118      	bne.n	8008a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <prvInsertBlockIntoFreeList+0xb0>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d00d      	beq.n	8008a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	441a      	add	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	e008      	b.n	8008a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a46:	4b0c      	ldr	r3, [pc, #48]	; (8008a78 <prvInsertBlockIntoFreeList+0xb0>)
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	601a      	str	r2, [r3, #0]
 8008a4e:	e003      	b.n	8008a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d002      	beq.n	8008a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a66:	bf00      	nop
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20005228 	.word	0x20005228
 8008a78:	20005230 	.word	0x20005230

08008a7c <__libc_init_array>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	4d0d      	ldr	r5, [pc, #52]	; (8008ab4 <__libc_init_array+0x38>)
 8008a80:	4c0d      	ldr	r4, [pc, #52]	; (8008ab8 <__libc_init_array+0x3c>)
 8008a82:	1b64      	subs	r4, r4, r5
 8008a84:	10a4      	asrs	r4, r4, #2
 8008a86:	2600      	movs	r6, #0
 8008a88:	42a6      	cmp	r6, r4
 8008a8a:	d109      	bne.n	8008aa0 <__libc_init_array+0x24>
 8008a8c:	4d0b      	ldr	r5, [pc, #44]	; (8008abc <__libc_init_array+0x40>)
 8008a8e:	4c0c      	ldr	r4, [pc, #48]	; (8008ac0 <__libc_init_array+0x44>)
 8008a90:	f000 f8f2 	bl	8008c78 <_init>
 8008a94:	1b64      	subs	r4, r4, r5
 8008a96:	10a4      	asrs	r4, r4, #2
 8008a98:	2600      	movs	r6, #0
 8008a9a:	42a6      	cmp	r6, r4
 8008a9c:	d105      	bne.n	8008aaa <__libc_init_array+0x2e>
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aa4:	4798      	blx	r3
 8008aa6:	3601      	adds	r6, #1
 8008aa8:	e7ee      	b.n	8008a88 <__libc_init_array+0xc>
 8008aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aae:	4798      	blx	r3
 8008ab0:	3601      	adds	r6, #1
 8008ab2:	e7f2      	b.n	8008a9a <__libc_init_array+0x1e>
 8008ab4:	0800a8b8 	.word	0x0800a8b8
 8008ab8:	0800a8b8 	.word	0x0800a8b8
 8008abc:	0800a8b8 	.word	0x0800a8b8
 8008ac0:	0800a8bc 	.word	0x0800a8bc

08008ac4 <__retarget_lock_acquire_recursive>:
 8008ac4:	4770      	bx	lr

08008ac6 <__retarget_lock_release_recursive>:
 8008ac6:	4770      	bx	lr

08008ac8 <memcpy>:
 8008ac8:	440a      	add	r2, r1
 8008aca:	4291      	cmp	r1, r2
 8008acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ad0:	d100      	bne.n	8008ad4 <memcpy+0xc>
 8008ad2:	4770      	bx	lr
 8008ad4:	b510      	push	{r4, lr}
 8008ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ade:	4291      	cmp	r1, r2
 8008ae0:	d1f9      	bne.n	8008ad6 <memcpy+0xe>
 8008ae2:	bd10      	pop	{r4, pc}

08008ae4 <memset>:
 8008ae4:	4402      	add	r2, r0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d100      	bne.n	8008aee <memset+0xa>
 8008aec:	4770      	bx	lr
 8008aee:	f803 1b01 	strb.w	r1, [r3], #1
 8008af2:	e7f9      	b.n	8008ae8 <memset+0x4>

08008af4 <cleanup_glue>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	460c      	mov	r4, r1
 8008af8:	6809      	ldr	r1, [r1, #0]
 8008afa:	4605      	mov	r5, r0
 8008afc:	b109      	cbz	r1, 8008b02 <cleanup_glue+0xe>
 8008afe:	f7ff fff9 	bl	8008af4 <cleanup_glue>
 8008b02:	4621      	mov	r1, r4
 8008b04:	4628      	mov	r0, r5
 8008b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b0a:	f000 b869 	b.w	8008be0 <_free_r>
	...

08008b10 <_reclaim_reent>:
 8008b10:	4b2c      	ldr	r3, [pc, #176]	; (8008bc4 <_reclaim_reent+0xb4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4283      	cmp	r3, r0
 8008b16:	b570      	push	{r4, r5, r6, lr}
 8008b18:	4604      	mov	r4, r0
 8008b1a:	d051      	beq.n	8008bc0 <_reclaim_reent+0xb0>
 8008b1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b1e:	b143      	cbz	r3, 8008b32 <_reclaim_reent+0x22>
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d14a      	bne.n	8008bbc <_reclaim_reent+0xac>
 8008b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b28:	6819      	ldr	r1, [r3, #0]
 8008b2a:	b111      	cbz	r1, 8008b32 <_reclaim_reent+0x22>
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 f857 	bl	8008be0 <_free_r>
 8008b32:	6961      	ldr	r1, [r4, #20]
 8008b34:	b111      	cbz	r1, 8008b3c <_reclaim_reent+0x2c>
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 f852 	bl	8008be0 <_free_r>
 8008b3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008b3e:	b111      	cbz	r1, 8008b46 <_reclaim_reent+0x36>
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 f84d 	bl	8008be0 <_free_r>
 8008b46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008b48:	b111      	cbz	r1, 8008b50 <_reclaim_reent+0x40>
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 f848 	bl	8008be0 <_free_r>
 8008b50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008b52:	b111      	cbz	r1, 8008b5a <_reclaim_reent+0x4a>
 8008b54:	4620      	mov	r0, r4
 8008b56:	f000 f843 	bl	8008be0 <_free_r>
 8008b5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008b5c:	b111      	cbz	r1, 8008b64 <_reclaim_reent+0x54>
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f000 f83e 	bl	8008be0 <_free_r>
 8008b64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008b66:	b111      	cbz	r1, 8008b6e <_reclaim_reent+0x5e>
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f000 f839 	bl	8008be0 <_free_r>
 8008b6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008b70:	b111      	cbz	r1, 8008b78 <_reclaim_reent+0x68>
 8008b72:	4620      	mov	r0, r4
 8008b74:	f000 f834 	bl	8008be0 <_free_r>
 8008b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b7a:	b111      	cbz	r1, 8008b82 <_reclaim_reent+0x72>
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 f82f 	bl	8008be0 <_free_r>
 8008b82:	69a3      	ldr	r3, [r4, #24]
 8008b84:	b1e3      	cbz	r3, 8008bc0 <_reclaim_reent+0xb0>
 8008b86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b88:	4620      	mov	r0, r4
 8008b8a:	4798      	blx	r3
 8008b8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b8e:	b1b9      	cbz	r1, 8008bc0 <_reclaim_reent+0xb0>
 8008b90:	4620      	mov	r0, r4
 8008b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b96:	f7ff bfad 	b.w	8008af4 <cleanup_glue>
 8008b9a:	5949      	ldr	r1, [r1, r5]
 8008b9c:	b941      	cbnz	r1, 8008bb0 <_reclaim_reent+0xa0>
 8008b9e:	3504      	adds	r5, #4
 8008ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ba2:	2d80      	cmp	r5, #128	; 0x80
 8008ba4:	68d9      	ldr	r1, [r3, #12]
 8008ba6:	d1f8      	bne.n	8008b9a <_reclaim_reent+0x8a>
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 f819 	bl	8008be0 <_free_r>
 8008bae:	e7ba      	b.n	8008b26 <_reclaim_reent+0x16>
 8008bb0:	680e      	ldr	r6, [r1, #0]
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 f814 	bl	8008be0 <_free_r>
 8008bb8:	4631      	mov	r1, r6
 8008bba:	e7ef      	b.n	8008b9c <_reclaim_reent+0x8c>
 8008bbc:	2500      	movs	r5, #0
 8008bbe:	e7ef      	b.n	8008ba0 <_reclaim_reent+0x90>
 8008bc0:	bd70      	pop	{r4, r5, r6, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20000120 	.word	0x20000120

08008bc8 <__malloc_lock>:
 8008bc8:	4801      	ldr	r0, [pc, #4]	; (8008bd0 <__malloc_lock+0x8>)
 8008bca:	f7ff bf7b 	b.w	8008ac4 <__retarget_lock_acquire_recursive>
 8008bce:	bf00      	nop
 8008bd0:	20005248 	.word	0x20005248

08008bd4 <__malloc_unlock>:
 8008bd4:	4801      	ldr	r0, [pc, #4]	; (8008bdc <__malloc_unlock+0x8>)
 8008bd6:	f7ff bf76 	b.w	8008ac6 <__retarget_lock_release_recursive>
 8008bda:	bf00      	nop
 8008bdc:	20005248 	.word	0x20005248

08008be0 <_free_r>:
 8008be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008be2:	2900      	cmp	r1, #0
 8008be4:	d044      	beq.n	8008c70 <_free_r+0x90>
 8008be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bea:	9001      	str	r0, [sp, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f1a1 0404 	sub.w	r4, r1, #4
 8008bf2:	bfb8      	it	lt
 8008bf4:	18e4      	addlt	r4, r4, r3
 8008bf6:	f7ff ffe7 	bl	8008bc8 <__malloc_lock>
 8008bfa:	4a1e      	ldr	r2, [pc, #120]	; (8008c74 <_free_r+0x94>)
 8008bfc:	9801      	ldr	r0, [sp, #4]
 8008bfe:	6813      	ldr	r3, [r2, #0]
 8008c00:	b933      	cbnz	r3, 8008c10 <_free_r+0x30>
 8008c02:	6063      	str	r3, [r4, #4]
 8008c04:	6014      	str	r4, [r2, #0]
 8008c06:	b003      	add	sp, #12
 8008c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c0c:	f7ff bfe2 	b.w	8008bd4 <__malloc_unlock>
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	d908      	bls.n	8008c26 <_free_r+0x46>
 8008c14:	6825      	ldr	r5, [r4, #0]
 8008c16:	1961      	adds	r1, r4, r5
 8008c18:	428b      	cmp	r3, r1
 8008c1a:	bf01      	itttt	eq
 8008c1c:	6819      	ldreq	r1, [r3, #0]
 8008c1e:	685b      	ldreq	r3, [r3, #4]
 8008c20:	1949      	addeq	r1, r1, r5
 8008c22:	6021      	streq	r1, [r4, #0]
 8008c24:	e7ed      	b.n	8008c02 <_free_r+0x22>
 8008c26:	461a      	mov	r2, r3
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	b10b      	cbz	r3, 8008c30 <_free_r+0x50>
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	d9fa      	bls.n	8008c26 <_free_r+0x46>
 8008c30:	6811      	ldr	r1, [r2, #0]
 8008c32:	1855      	adds	r5, r2, r1
 8008c34:	42a5      	cmp	r5, r4
 8008c36:	d10b      	bne.n	8008c50 <_free_r+0x70>
 8008c38:	6824      	ldr	r4, [r4, #0]
 8008c3a:	4421      	add	r1, r4
 8008c3c:	1854      	adds	r4, r2, r1
 8008c3e:	42a3      	cmp	r3, r4
 8008c40:	6011      	str	r1, [r2, #0]
 8008c42:	d1e0      	bne.n	8008c06 <_free_r+0x26>
 8008c44:	681c      	ldr	r4, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	6053      	str	r3, [r2, #4]
 8008c4a:	4421      	add	r1, r4
 8008c4c:	6011      	str	r1, [r2, #0]
 8008c4e:	e7da      	b.n	8008c06 <_free_r+0x26>
 8008c50:	d902      	bls.n	8008c58 <_free_r+0x78>
 8008c52:	230c      	movs	r3, #12
 8008c54:	6003      	str	r3, [r0, #0]
 8008c56:	e7d6      	b.n	8008c06 <_free_r+0x26>
 8008c58:	6825      	ldr	r5, [r4, #0]
 8008c5a:	1961      	adds	r1, r4, r5
 8008c5c:	428b      	cmp	r3, r1
 8008c5e:	bf04      	itt	eq
 8008c60:	6819      	ldreq	r1, [r3, #0]
 8008c62:	685b      	ldreq	r3, [r3, #4]
 8008c64:	6063      	str	r3, [r4, #4]
 8008c66:	bf04      	itt	eq
 8008c68:	1949      	addeq	r1, r1, r5
 8008c6a:	6021      	streq	r1, [r4, #0]
 8008c6c:	6054      	str	r4, [r2, #4]
 8008c6e:	e7ca      	b.n	8008c06 <_free_r+0x26>
 8008c70:	b003      	add	sp, #12
 8008c72:	bd30      	pop	{r4, r5, pc}
 8008c74:	2000524c 	.word	0x2000524c

08008c78 <_init>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	bf00      	nop
 8008c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7e:	bc08      	pop	{r3}
 8008c80:	469e      	mov	lr, r3
 8008c82:	4770      	bx	lr

08008c84 <_fini>:
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	bf00      	nop
 8008c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8a:	bc08      	pop	{r3}
 8008c8c:	469e      	mov	lr, r3
 8008c8e:	4770      	bx	lr
